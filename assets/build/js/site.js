document.querySelector("body").classList.remove("no-js"),$("body").hasClass("hasForm")&&("true"==form_success?window.onload=swal({title:"Success",text:success_message,type:"success",confirmButtonText:"Thanks"}):"false"==form_success?window.onload=swal({title:"Whoops",text:error_message,type:"error",confirmButtonText:"OK"}):"email"==form_success&&(window.onload=swal({title:"Error",text:"It seems there was an error with your email entry, please make sure it is a valid email and try to submit again.",type:"error",confirmButtonText:"OK"})),onload=function(){document.forms.contactform.reset()}),function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t["default"]}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=35)}([function(t,e){t.exports=jQuery},function(t,e,i){"use strict";function n(){return"rtl"===r()("html").attr("dir")}function o(t,e){return t=t||6,Math.round(Math.pow(36,t+1)-Math.random()*Math.pow(36,t)).toString(36).slice(1)+(e?"-"+e:"")}function s(t){var e,i={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"},n=document.createElement("div");for(var o in i)"undefined"!=typeof n.style[o]&&(e=i[o]);return e?e:(e=setTimeout(function(){t.triggerHandler("transitionend",[t])},1),"transitionend")}i.d(e,"c",function(){return n}),i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s});var a=i(0),r=i.n(a)},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function s(t){return o("undefined"!=typeof t.constructor.name?t.constructor.name:t.className)}i.d(e,"a",function(){return u});var a=i(0),r=(i.n(a),i(1)),l=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),u=function(){function t(e,o){n(this,t),this._setup(e,o);var a=s(this);this.uuid=i.i(r.a)(6,a),this.$element.attr("data-"+a)||this.$element.attr("data-"+a,this.uuid),this.$element.data("zfPlugin")||this.$element.data("zfPlugin",this),this.$element.trigger("init.zf."+a)}return l(t,[{key:"destroy",value:function(){this._destroy();var t=s(this);this.$element.removeAttr("data-"+t).removeData("zfPlugin").trigger("destroyed.zf."+t);for(var e in this)this[e]=null}}]),t}()},function(t,e,i){"use strict";function n(t){var e={};return"string"!=typeof t?e:(t=t.trim().slice(1,-1))?e=t.split("&").reduce(function(t,e){var i=e.replace(/\+/g," ").split("="),n=i[0],o=i[1];return n=decodeURIComponent(n),o=void 0===o?null:decodeURIComponent(o),t.hasOwnProperty(n)?Array.isArray(t[n])?t[n].push(o):t[n]=[t[n],o]:t[n]=o,t},{}):e}i.d(e,"a",function(){return r});var o=i(0),s=i.n(o),a=window.matchMedia||function(){var t=window.styleMedia||window.media;if(!t){var e=document.createElement("style"),i=document.getElementsByTagName("script")[0],n=null;e.type="text/css",e.id="matchmediajs-test",i&&i.parentNode&&i.parentNode.insertBefore(e,i),n="getComputedStyle"in window&&window.getComputedStyle(e,null)||e.currentStyle,t={matchMedium:function(t){var i="@media "+t+"{ #matchmediajs-test { width: 1px; } }";return e.styleSheet?e.styleSheet.cssText=i:e.textContent=i,"1px"===n.width}}}return function(e){return{matches:t.matchMedium(e||"all"),media:e||"all"}}}(),r={queries:[],current:"",_init:function(){var t=this,e=s()("meta.foundation-mq");e.length||s()('<meta class="foundation-mq">').appendTo(document.head);var i,o=s()(".foundation-mq").css("font-family");i=n(o);for(var a in i)i.hasOwnProperty(a)&&t.queries.push({name:a,value:"only screen and (min-width: "+i[a]+")"});this.current=this._getCurrentSize(),this._watcher()},atLeast:function(t){var e=this.get(t);return!!e&&a(e).matches},is:function(t){return t=t.trim().split(" "),t.length>1&&"only"===t[1]?t[0]===this._getCurrentSize():this.atLeast(t[0])},get:function(t){for(var e in this.queries)if(this.queries.hasOwnProperty(e)){var i=this.queries[e];if(t===i.name)return i.value}return null},_getCurrentSize:function(){for(var t,e=0;e<this.queries.length;e++){var i=this.queries[e];a(i.value).matches&&(t=i)}return"object"==typeof t?t.name:t},_watcher:function(){var t=this;s()(window).off("resize.zf.mediaquery").on("resize.zf.mediaquery",function(){var e=t._getCurrentSize(),i=t.current;e!==i&&(t.current=e,s()(window).trigger("changed.zf.mediaquery",[e,i]))})}}},function(t,e,i){"use strict";function n(t){return!!t&&t.find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]").filter(function(){return!(!r()(this).is(":visible")||r()(this).attr("tabindex")<0)})}function o(t){var e=u[t.which||t.keyCode]||String.fromCharCode(t.which).toUpperCase();return e=e.replace(/\W+/,""),t.shiftKey&&(e="SHIFT_"+e),t.ctrlKey&&(e="CTRL_"+e),t.altKey&&(e="ALT_"+e),e=e.replace(/_$/,"")}function s(t){var e={};for(var i in t)e[t[i]]=t[i];return e}i.d(e,"a",function(){return h});var a=i(0),r=i.n(a),l=i(1),u={9:"TAB",13:"ENTER",27:"ESCAPE",32:"SPACE",35:"END",36:"HOME",37:"ARROW_LEFT",38:"ARROW_UP",39:"ARROW_RIGHT",40:"ARROW_DOWN"},c={},h={keys:s(u),parseKey:o,handleKey:function(t,e,n){var o,s,a,u=c[e],h=this.parseKey(t);if(!u)return console.warn("Component not defined!");if(o="undefined"==typeof u.ltr?u:i.i(l.c)()?r.a.extend({},u.ltr,u.rtl):r.a.extend({},u.rtl,u.ltr),s=o[h],a=n[s],a&&"function"==typeof a){var d=a.apply();(n.handled||"function"==typeof n.handled)&&n.handled(d)}else(n.unhandled||"function"==typeof n.unhandled)&&n.unhandled()},findFocusable:n,register:function(t,e){c[t]=e},trapFocus:function(t){var e=n(t),i=e.eq(0),s=e.eq(-1);t.on("keydown.zf.trapfocus",function(t){t.target===s[0]&&"TAB"===o(t)?(t.preventDefault(),i.focus()):t.target===i[0]&&"SHIFT_TAB"===o(t)&&(t.preventDefault(),s.focus())})},releaseFocus:function(t){t.off("keydown.zf.trapfocus")}}},function(t,e,i){"use strict";function n(t,e,i){var n=void 0,o=Array.prototype.slice.call(arguments,3);s()(window).off(e).on(e,function(e){n&&clearTimeout(n),n=setTimeout(function(){i.apply(null,o)},t||10)})}i.d(e,"a",function(){return u});var o=i(0),s=i.n(o),a=i(6),r=function(){for(var t=["WebKit","Moz","O","Ms",""],e=0;e<t.length;e++)if(t[e]+"MutationObserver"in window)return window[t[e]+"MutationObserver"];return!1}(),l=function(t,e){t.data(e).split(" ").forEach(function(i){s()("#"+i)["close"===e?"trigger":"triggerHandler"](e+".zf.trigger",[t])})},u={Listeners:{Basic:{},Global:{}},Initializers:{}};u.Listeners.Basic={openListener:function(){l(s()(this),"open")},closeListener:function(){var t=s()(this).data("close");t?l(s()(this),"close"):s()(this).trigger("close.zf.trigger")},toggleListener:function(){var t=s()(this).data("toggle");t?l(s()(this),"toggle"):s()(this).trigger("toggle.zf.trigger")},closeableListener:function(t){t.stopPropagation();var e=s()(this).data("closable");""!==e?a.a.animateOut(s()(this),e,function(){s()(this).trigger("closed.zf")}):s()(this).fadeOut().trigger("closed.zf")},toggleFocusListener:function(){var t=s()(this).data("toggle-focus");s()("#"+t).triggerHandler("toggle.zf.trigger",[s()(this)])}},u.Initializers.addOpenListener=function(t){t.off("click.zf.trigger",u.Listeners.Basic.openListener),t.on("click.zf.trigger","[data-open]",u.Listeners.Basic.openListener)},u.Initializers.addCloseListener=function(t){t.off("click.zf.trigger",u.Listeners.Basic.closeListener),t.on("click.zf.trigger","[data-close]",u.Listeners.Basic.closeListener)},u.Initializers.addToggleListener=function(t){t.off("click.zf.trigger",u.Listeners.Basic.toggleListener),t.on("click.zf.trigger","[data-toggle]",u.Listeners.Basic.toggleListener)},u.Initializers.addCloseableListener=function(t){t.off("close.zf.trigger",u.Listeners.Basic.closeableListener),t.on("close.zf.trigger","[data-closeable], [data-closable]",u.Listeners.Basic.closeableListener)},u.Initializers.addToggleFocusListener=function(t){t.off("focus.zf.trigger blur.zf.trigger",u.Listeners.Basic.toggleFocusListener),t.on("focus.zf.trigger blur.zf.trigger","[data-toggle-focus]",u.Listeners.Basic.toggleFocusListener)},u.Listeners.Global={resizeListener:function(t){r||t.each(function(){s()(this).triggerHandler("resizeme.zf.trigger")}),t.attr("data-events","resize")},scrollListener:function(t){r||t.each(function(){s()(this).triggerHandler("scrollme.zf.trigger")}),t.attr("data-events","scroll")},closeMeListener:function(t,e){var i=t.namespace.split(".")[0],n=s()("[data-"+i+"]").not('[data-yeti-box="'+e+'"]');n.each(function(){var t=s()(this);t.triggerHandler("close.zf.trigger",[t])})}},u.Initializers.addClosemeListener=function(t){var e=s()("[data-yeti-box]"),i=["dropdown","tooltip","reveal"];if(t&&("string"==typeof t?i.push(t):"object"==typeof t&&"string"==typeof t[0]?i.concat(t):console.error("Plugin names must be strings")),e.length){var n=i.map(function(t){return"closeme.zf."+t}).join(" ");s()(window).off(n).on(n,u.Listeners.Global.closeMeListener)}},u.Initializers.addResizeListener=function(t){var e=s()("[data-resize]");e.length&&n(t,"resize.zf.trigger",u.Listeners.Global.resizeListener,e)},u.Initializers.addScrollListener=function(t){var e=s()("[data-scroll]");e.length&&n(t,"scroll.zf.trigger",u.Listeners.Global.scrollListener,e)},u.Initializers.addMutationEventsListener=function(t){if(!r)return!1;var e=t.find("[data-resize], [data-scroll], [data-mutate]"),i=function(t){var e=s()(t[0].target);switch(t[0].type){case"attributes":"scroll"===e.attr("data-events")&&"data-events"===t[0].attributeName&&e.triggerHandler("scrollme.zf.trigger",[e,window.pageYOffset]),"resize"===e.attr("data-events")&&"data-events"===t[0].attributeName&&e.triggerHandler("resizeme.zf.trigger",[e]),"style"===t[0].attributeName&&(e.closest("[data-mutate]").attr("data-events","mutate"),e.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[e.closest("[data-mutate]")]));break;case"childList":e.closest("[data-mutate]").attr("data-events","mutate"),e.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[e.closest("[data-mutate]")]);break;default:return!1}};if(e.length)for(var n=0;n<=e.length-1;n++){var o=new r(i);o.observe(e[n],{attributes:!0,childList:!0,characterData:!1,subtree:!0,attributeFilter:["data-events","style"]})}},u.Initializers.addSimpleListeners=function(){var t=s()(document);u.Initializers.addOpenListener(t),u.Initializers.addCloseListener(t),u.Initializers.addToggleListener(t),u.Initializers.addCloseableListener(t),u.Initializers.addToggleFocusListener(t)},u.Initializers.addGlobalListeners=function(){var t=s()(document);u.Initializers.addMutationEventsListener(t),u.Initializers.addResizeListener(),u.Initializers.addScrollListener(),u.Initializers.addClosemeListener()},u.init=function(t,e){if("undefined"==typeof t.triggersInitialized){t(document);"complete"===document.readyState?(u.Initializers.addSimpleListeners(),u.Initializers.addGlobalListeners()):t(window).on("load",function(){u.Initializers.addSimpleListeners(),u.Initializers.addGlobalListeners()}),t.triggersInitialized=!0}e&&(e.Triggers=u,e.IHearYou=u.Initializers.addGlobalListeners)}},function(t,e,i){"use strict";function n(t,e,i){function n(r){a||(a=r),s=r-a,i.apply(e),s<t?o=window.requestAnimationFrame(n,e):(window.cancelAnimationFrame(o),e.trigger("finished.zf.animate",[e]).triggerHandler("finished.zf.animate",[e]))}var o,s,a=null;return 0===t?(i.apply(e),void e.trigger("finished.zf.animate",[e]).triggerHandler("finished.zf.animate",[e])):void(o=window.requestAnimationFrame(n))}function o(t,e,n,o){function s(){t||e.hide(),c(),o&&o.apply(e)}function c(){e[0].style.transitionDuration=0,e.removeClass(h+" "+d+" "+n)}if(e=a()(e).eq(0),e.length){var h=t?l[0]:l[1],d=t?u[0]:u[1];c(),e.addClass(n).css("transition","none"),requestAnimationFrame(function(){e.addClass(h),t&&e.show()}),requestAnimationFrame(function(){e[0].offsetWidth,e.css("transition","").addClass(d)}),e.one(i.i(r.b)(e),s)}}i.d(e,"b",function(){return n}),i.d(e,"a",function(){return c});var s=i(0),a=i.n(s),r=i(1),l=["mui-enter","mui-leave"],u=["mui-enter-active","mui-leave-active"],c={animateIn:function(t,e,i){o(!0,t,e,i)},animateOut:function(t,e,i){o(!1,t,e,i)}}},function(t,e,i){"use strict";function n(t,e,i,n,s){return 0===o(t,e,i,n,s)}function o(t,e,i,n,o){var a,r,l,u,c=s(t);if(e){var h=s(e);r=h.height+h.offset.top-(c.offset.top+c.height),a=c.offset.top-h.offset.top,l=c.offset.left-h.offset.left,u=h.width+h.offset.left-(c.offset.left+c.width)}else r=c.windowDims.height+c.windowDims.offset.top-(c.offset.top+c.height),a=c.offset.top-c.windowDims.offset.top,l=c.offset.left-c.windowDims.offset.left,u=c.windowDims.width-(c.offset.left+c.width);return r=o?0:Math.min(r,0),a=Math.min(a,0),l=Math.min(l,0),u=Math.min(u,0),i?l+u:n?a+r:Math.sqrt(a*a+r*r+l*l+u*u)}function s(t){if(t=t.length?t[0]:t,t===window||t===document)throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");var e=t.getBoundingClientRect(),i=t.parentNode.getBoundingClientRect(),n=document.body.getBoundingClientRect(),o=window.pageYOffset,s=window.pageXOffset;return{width:e.width,height:e.height,offset:{top:e.top+o,left:e.left+s},parentDims:{width:i.width,height:i.height,offset:{top:i.top+o,left:i.left+s}},windowDims:{width:n.width,height:n.height,offset:{top:o,left:s}}}}function a(t,e,n,o,s,a){switch(console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5"),n){case"top":return i.i(l.c)()?r(t,e,"top","left",o,s,a):r(t,e,"top","right",o,s,a);case"bottom":return i.i(l.c)()?r(t,e,"bottom","left",o,s,a):r(t,e,"bottom","right",o,s,a);case"center top":return r(t,e,"top","center",o,s,a);case"center bottom":return r(t,e,"bottom","center",o,s,a);case"center left":return r(t,e,"left","center",o,s,a);case"center right":return r(t,e,"right","center",o,s,a);case"left bottom":return r(t,e,"bottom","left",o,s,a);case"right bottom":return r(t,e,"bottom","right",o,s,a);case"center":return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2+s,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-($eleDims.height/2+o)};case"reveal":return{left:($eleDims.windowDims.width-$eleDims.width)/2+s,top:$eleDims.windowDims.offset.top+o};case"reveal full":return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};default:return{left:i.i(l.c)()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width-s:$anchorDims.offset.left+s,top:$anchorDims.offset.top+$anchorDims.height+o}}}function r(t,e,i,n,o,a,r){var l,u,c=s(t),h=e?s(e):null;switch(i){case"top":l=h.offset.top-(c.height+o);break;case"bottom":l=h.offset.top+h.height+o;break;case"left":u=h.offset.left-(c.width+a);break;case"right":u=h.offset.left+h.width+a}switch(i){case"top":case"bottom":switch(n){case"left":u=h.offset.left+a;break;case"right":u=h.offset.left-c.width+h.width-a;break;case"center":u=r?a:h.offset.left+h.width/2-c.width/2+a}break;case"right":case"left":switch(n){case"bottom":l=h.offset.top-o+h.height-c.height;break;case"top":l=h.offset.top+o;break;case"center":l=h.offset.top+o+h.height/2-c.height/2}}return{top:l,left:u}}i.d(e,"a",function(){return u});var l=i(1),u={ImNotTouchingYou:n,OverlapArea:o,GetDimensions:s,GetOffsets:a,GetExplicitOffsets:r}},function(t,e,i){"use strict";function n(t,e){function i(){n--,0===n&&e()}var n=t.length;0===n&&e(),t.each(function(){if(this.complete&&void 0!==this.naturalWidth)i();else{var t=new Image,e="load.zf.images error.zf.images";s()(t).one(e,function n(t){s()(this).off(e,n),i()}),t.src=s()(this).attr("src")}})}i.d(e,"a",function(){return n});var o=i(0),s=i.n(o)},function(t,e,i){"use strict";i.d(e,"a",function(){return s});var n=i(0),o=i.n(n),s={Feather:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"zf";t.attr("role","menubar");var i=t.find("li").attr({role:"menuitem"}),n="is-"+e+"-submenu",s=n+"-item",a="is-"+e+"-submenu-parent",r="accordion"!==e;i.each(function(){var t=o()(this),i=t.children("ul");i.length&&(t.addClass(a),i.addClass("submenu "+n).attr({"data-submenu":""}),r&&(t.attr({"aria-haspopup":!0,"aria-label":t.children("a:first").text()}),"drilldown"===e&&t.attr({"aria-expanded":!1})),i.addClass("submenu "+n).attr({"data-submenu":"",role:"menu"}),"drilldown"===e&&i.attr({"aria-hidden":!0})),t.parent("[data-submenu]").length&&t.addClass("is-submenu-item "+s)})},Burn:function(t,e){var i="is-"+e+"-submenu",n=i+"-item",o="is-"+e+"-submenu-parent";t.find(">li, .menu, .menu > li").removeClass(i+" "+n+" "+o+" is-submenu-item submenu is-active").removeAttr("data-submenu").css("display","")}}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(4),u=i(1),c=i(2),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Accordion",this._init(),l.a.register("Accordion",{ENTER:"toggle",SPACE:"toggle",ARROW_DOWN:"next",ARROW_UP:"previous"})}},{key:"_init",value:function(){var t=this;this.$element.attr("role","tablist"),this.$tabs=this.$element.children("[data-accordion-item]"),this.$tabs.each(function(t,e){var n=r()(e),o=n.children("[data-tab-content]"),s=o[0].id||i.i(u.a)(6,"accordion"),a=e.id||s+"-label";n.find("a:first").attr({"aria-controls":s,role:"tab",id:a,"aria-expanded":!1,"aria-selected":!1}),o.attr({role:"tabpanel","aria-labelledby":a,"aria-hidden":!0,id:s})});var e=this.$element.find(".is-active").children("[data-tab-content]");this.firstTimeInit=!0,e.length&&(this.down(e,this.firstTimeInit),this.firstTimeInit=!1),this._checkDeepLink=function(){var e=window.location.hash;if(e.length){var i=t.$element.find('[href$="'+e+'"]'),n=r()(e);if(i.length&&n){if(i.parent("[data-accordion-item]").hasClass("is-active")||(t.down(n,t.firstTimeInit),t.firstTimeInit=!1),t.options.deepLinkSmudge){var o=t;r()(window).load(function(){var t=o.$element.offset();r()("html, body").animate({scrollTop:t.top},o.options.deepLinkSmudgeDelay)})}t.$element.trigger("deeplink.zf.accordion",[i,n])}}},this.options.deepLink&&this._checkDeepLink(),this._events()}},{key:"_events",value:function(){var t=this;this.$tabs.each(function(){var e=r()(this),i=e.children("[data-tab-content]");i.length&&e.children("a").off("click.zf.accordion keydown.zf.accordion").on("click.zf.accordion",function(e){e.preventDefault(),t.toggle(i)}).on("keydown.zf.accordion",function(n){l.a.handleKey(n,"Accordion",{toggle:function(){t.toggle(i)},next:function(){var i=e.next().find("a").focus();t.options.multiExpand||i.trigger("click.zf.accordion")},previous:function(){var i=e.prev().find("a").focus();t.options.multiExpand||i.trigger("click.zf.accordion")},handled:function(){n.preventDefault(),n.stopPropagation()}})})}),this.options.deepLink&&r()(window).on("popstate",this._checkDeepLink)}},{key:"toggle",value:function(t){if(t.closest("[data-accordion]").is("[disabled]"))return void console.info("Cannot toggle an accordion that is disabled.");if(t.parent().hasClass("is-active")?this.up(t):this.down(t),this.options.deepLink){var e=t.prev("a").attr("href");this.options.updateHistory?history.pushState({},"",e):history.replaceState({},"",e)}}},{key:"down",value:function(t,e){var i=this;if(t.closest("[data-accordion]").is("[disabled]")&&!e)return void console.info("Cannot call down on an accordion that is disabled.");if(t.attr("aria-hidden",!1).parent("[data-tab-content]").addBack().parent().addClass("is-active"),!this.options.multiExpand&&!e){var n=this.$element.children(".is-active").children("[data-tab-content]");n.length&&this.up(n.not(t))}t.slideDown(this.options.slideSpeed,function(){i.$element.trigger("down.zf.accordion",[t])}),r()("#"+t.attr("aria-labelledby")).attr({"aria-expanded":!0,"aria-selected":!0})}},{key:"up",value:function(t){if(t.closest("[data-accordion]").is("[disabled]"))return void console.info("Cannot call up on an accordion that is disabled.");var e=t.parent().siblings(),i=this;(this.options.allowAllClosed||e.hasClass("is-active"))&&t.parent().hasClass("is-active")&&(t.slideUp(i.options.slideSpeed,function(){i.$element.trigger("up.zf.accordion",[t])}),t.attr("aria-hidden",!0).parent().removeClass("is-active"),r()("#"+t.attr("aria-labelledby")).attr({"aria-expanded":!1,"aria-selected":!1}))}},{key:"_destroy",value:function(){this.$element.find("[data-tab-content]").stop(!0).slideUp(0).css("display",""),this.$element.find("a").off(".zf.accordion"),this.options.deepLink&&r()(window).off("popstate",this._checkDeepLink)}}]),e}(c.a);d.defaults={slideSpeed:250,multiExpand:!1,allowAllClosed:!1,deepLink:!1,deepLinkSmudge:!1,deepLinkSmudgeDelay:300,updateHistory:!1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return f});var a=i(0),r=i.n(a),l=i(4),u=i(9),c=i(1),h=i(2),d=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),f=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),d(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="AccordionMenu",this._init(),l.a.register("AccordionMenu",{ENTER:"toggle",SPACE:"toggle",ARROW_RIGHT:"open",ARROW_UP:"up",ARROW_DOWN:"down",ARROW_LEFT:"close",ESCAPE:"closeAll"})}},{key:"_init",value:function(){u.a.Feather(this.$element,"accordion");var t=this;this.$element.find("[data-submenu]").not(".is-active").slideUp(0),this.$element.attr({role:"tree","aria-multiselectable":this.options.multiOpen}),this.$menuLinks=this.$element.find(".is-accordion-submenu-parent"),this.$menuLinks.each(function(){var e=this.id||i.i(c.a)(6,"acc-menu-link"),n=r()(this),o=n.children("[data-submenu]"),s=o[0].id||i.i(c.a)(6,"acc-menu"),a=o.hasClass("is-active");t.options.submenuToggle?(n.addClass("has-submenu-toggle"),n.children("a").after('<button id="'+e+'" class="submenu-toggle" aria-controls="'+s+'" aria-expanded="'+a+'" title="'+t.options.submenuToggleText+'"><span class="submenu-toggle-text">'+t.options.submenuToggleText+"</span></button>")):n.attr({"aria-controls":s,"aria-expanded":a,id:e}),o.attr({"aria-labelledby":e,"aria-hidden":!a,role:"group",id:s})}),this.$element.find("li").attr({role:"treeitem"});var e=this.$element.find(".is-active");if(e.length){var t=this;e.each(function(){t.down(r()(this))})}this._events()}},{key:"_events",value:function(){var t=this;this.$element.find("li").each(function(){var e=r()(this).children("[data-submenu]");e.length&&(t.options.submenuToggle?r()(this).children(".submenu-toggle").off("click.zf.accordionMenu").on("click.zf.accordionMenu",function(i){t.toggle(e)}):r()(this).children("a").off("click.zf.accordionMenu").on("click.zf.accordionMenu",function(i){i.preventDefault(),t.toggle(e)}))}).on("keydown.zf.accordionmenu",function(e){var i,n,o=r()(this),s=o.parent("ul").children("li"),a=o.children("[data-submenu]");s.each(function(t){if(r()(this).is(o))return i=s.eq(Math.max(0,t-1)).find("a").first(),n=s.eq(Math.min(t+1,s.length-1)).find("a").first(),r()(this).children("[data-submenu]:visible").length&&(n=o.find("li:first-child").find("a").first()),r()(this).is(":first-child")?i=o.parents("li").first().find("a").first():i.parents("li").first().children("[data-submenu]:visible").length&&(i=i.parents("li").find("li:last-child").find("a").first()),void(r()(this).is(":last-child")&&(n=o.parents("li").first().next("li").find("a").first()))}),l.a.handleKey(e,"AccordionMenu",{open:function(){a.is(":hidden")&&(t.down(a),a.find("li").first().find("a").first().focus())},close:function(){a.length&&!a.is(":hidden")?t.up(a):o.parent("[data-submenu]").length&&(t.up(o.parent("[data-submenu]")),o.parents("li").first().find("a").first().focus())},up:function(){return i.focus(),!0},down:function(){return n.focus(),!0},toggle:function(){return!t.options.submenuToggle&&(o.children("[data-submenu]").length?(t.toggle(o.children("[data-submenu]")),!0):void 0)},closeAll:function(){t.hideAll()},handled:function(t){t&&e.preventDefault(),e.stopImmediatePropagation()}})})}},{key:"hideAll",value:function(){this.up(this.$element.find("[data-submenu]"))}},{key:"showAll",value:function(){this.down(this.$element.find("[data-submenu]"))}},{key:"toggle",value:function(t){t.is(":animated")||(t.is(":hidden")?this.down(t):this.up(t))}},{key:"down",value:function(t){var e=this;this.options.multiOpen||this.up(this.$element.find(".is-active").not(t.parentsUntil(this.$element).add(t))),t.addClass("is-active").attr({"aria-hidden":!1}),this.options.submenuToggle?t.prev(".submenu-toggle").attr({"aria-expanded":!0}):t.parent(".is-accordion-submenu-parent").attr({"aria-expanded":!0}),t.slideDown(e.options.slideSpeed,function(){e.$element.trigger("down.zf.accordionMenu",[t])})}},{key:"up",value:function(t){var e=this;t.slideUp(e.options.slideSpeed,function(){e.$element.trigger("up.zf.accordionMenu",[t])});var i=t.find("[data-submenu]").slideUp(0).addBack().attr("aria-hidden",!0);this.options.submenuToggle?i.prev(".submenu-toggle").attr("aria-expanded",!1):i.parent(".is-accordion-submenu-parent").attr("aria-expanded",!1)}},{key:"_destroy",value:function(){this.$element.find("[data-submenu]").slideDown(0).css("display",""),this.$element.find("a").off("click.zf.accordionMenu"),this.options.submenuToggle&&(this.$element.find(".has-submenu-toggle").removeClass("has-submenu-toggle"),this.$element.find(".submenu-toggle").remove()),u.a.Burn(this.$element,"accordion")}}]),e}(h.a);f.defaults={slideSpeed:250,submenuToggle:!1,submenuToggleText:"Toggle menu",multiOpen:!0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return p});var a=i(0),r=i.n(a),l=i(4),u=i(9),c=i(1),h=i(7),d=i(2),f=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),f(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Drilldown",this._init(),l.a.register("Drilldown",{ENTER:"open",SPACE:"open",ARROW_RIGHT:"next",ARROW_UP:"up",ARROW_DOWN:"down",ARROW_LEFT:"previous",ESCAPE:"close",TAB:"down",SHIFT_TAB:"up"})}},{key:"_init",value:function(){u.a.Feather(this.$element,"drilldown"),this.options.autoApplyClass&&this.$element.addClass("drilldown"),this.$element.attr({role:"tree","aria-multiselectable":!1}),this.$submenuAnchors=this.$element.find("li.is-drilldown-submenu-parent").children("a"),this.$submenus=this.$submenuAnchors.parent("li").children("[data-submenu]").attr("role","group"),this.$menuItems=this.$element.find("li").not(".js-drilldown-back").attr("role","treeitem").find("a"),this.$element.attr("data-mutate",this.$element.attr("data-drilldown")||i.i(c.a)(6,"drilldown")),this._prepareMenu(),this._registerEvents(),this._keyboardEvents()}},{key:"_prepareMenu",value:function(){var t=this;this.$submenuAnchors.each(function(){var e=r()(this),i=e.parent();t.options.parentLink&&e.clone().prependTo(i.children("[data-submenu]")).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menuitem"></li>'),e.data("savedHref",e.attr("href")).removeAttr("href").attr("tabindex",0),e.children("[data-submenu]").attr({"aria-hidden":!0,tabindex:0,role:"group"}),t._events(e)}),this.$submenus.each(function(){var e=r()(this),i=e.find(".js-drilldown-back");if(!i.length)switch(t.options.backButtonPosition){case"bottom":e.append(t.options.backButton);break;case"top":e.prepend(t.options.backButton);break;default:console.error("Unsupported backButtonPosition value '"+t.options.backButtonPosition+"'")}t._back(e)}),this.$submenus.addClass("invisible"),this.options.autoHeight||this.$submenus.addClass("drilldown-submenu-cover-previous"),this.$element.parent().hasClass("is-drilldown")||(this.$wrapper=r()(this.options.wrapper).addClass("is-drilldown"),this.options.animateHeight&&this.$wrapper.addClass("animate-height"),this.$element.wrap(this.$wrapper)),this.$wrapper=this.$element.parent(),this.$wrapper.css(this._getMaxDims())}},{key:"_resize",value:function(){this.$wrapper.css({"max-width":"none","min-height":"none"}),this.$wrapper.css(this._getMaxDims())}},{key:"_events",value:function(t){var e=this;t.off("click.zf.drilldown").on("click.zf.drilldown",function(i){if(r()(i.target).parentsUntil("ul","li").hasClass("is-drilldown-submenu-parent")&&(i.stopImmediatePropagation(),i.preventDefault()),e._show(t.parent("li")),e.options.closeOnClick){var n=r()("body");n.off(".zf.drilldown").on("click.zf.drilldown",function(t){t.target===e.$element[0]||r.a.contains(e.$element[0],t.target)||(t.preventDefault(),e._hideAll(),n.off(".zf.drilldown"))})}})}},{key:"_registerEvents",value:function(){this.options.scrollTop&&(this._bindHandler=this._scrollTop.bind(this),this.$element.on("open.zf.drilldown hide.zf.drilldown closed.zf.drilldown",this._bindHandler)),this.$element.on("mutateme.zf.trigger",this._resize.bind(this))}},{key:"_scrollTop",value:function(){var t=this,e=""!=t.options.scrollTopElement?r()(t.options.scrollTopElement):t.$element,i=parseInt(e.offset().top+t.options.scrollTopOffset,10);r()("html, body").stop(!0).animate({scrollTop:i},t.options.animationDuration,t.options.animationEasing,function(){
this===r()("html")[0]&&t.$element.trigger("scrollme.zf.drilldown")})}},{key:"_keyboardEvents",value:function(){var t=this;this.$menuItems.add(this.$element.find(".js-drilldown-back > a, .is-submenu-parent-item > a")).on("keydown.zf.drilldown",function(e){var n,o,s=r()(this),a=s.parent("li").parent("ul").children("li").children("a");a.each(function(t){if(r()(this).is(s))return n=a.eq(Math.max(0,t-1)),void(o=a.eq(Math.min(t+1,a.length-1)))}),l.a.handleKey(e,"Drilldown",{next:function(){if(s.is(t.$submenuAnchors))return t._show(s.parent("li")),s.parent("li").one(i.i(c.b)(s),function(){s.parent("li").find("ul li a").filter(t.$menuItems).first().focus()}),!0},previous:function(){return t._hide(s.parent("li").parent("ul")),s.parent("li").parent("ul").one(i.i(c.b)(s),function(){setTimeout(function(){s.parent("li").parent("ul").parent("li").children("a").first().focus()},1)}),!0},up:function(){return n.focus(),!s.is(t.$element.find("> li:first-child > a"))},down:function(){return o.focus(),!s.is(t.$element.find("> li:last-child > a"))},close:function(){s.is(t.$element.find("> li > a"))||(t._hide(s.parent().parent()),s.parent().parent().siblings("a").focus())},open:function(){return s.is(t.$menuItems)?s.is(t.$submenuAnchors)?(t._show(s.parent("li")),s.parent("li").one(i.i(c.b)(s),function(){s.parent("li").find("ul li a").filter(t.$menuItems).first().focus()}),!0):void 0:(t._hide(s.parent("li").parent("ul")),s.parent("li").parent("ul").one(i.i(c.b)(s),function(){setTimeout(function(){s.parent("li").parent("ul").parent("li").children("a").first().focus()},1)}),!0)},handled:function(t){t&&e.preventDefault(),e.stopImmediatePropagation()}})})}},{key:"_hideAll",value:function(){var t=this.$element.find(".is-drilldown-submenu.is-active").addClass("is-closing");this.options.autoHeight&&this.$wrapper.css({height:t.parent().closest("ul").data("calcHeight")}),t.one(i.i(c.b)(t),function(e){t.removeClass("is-active is-closing")}),this.$element.trigger("closed.zf.drilldown")}},{key:"_back",value:function(t){var e=this;t.off("click.zf.drilldown"),t.children(".js-drilldown-back").on("click.zf.drilldown",function(i){i.stopImmediatePropagation(),e._hide(t);var n=t.parent("li").parent("ul").parent("li");n.length&&e._show(n)})}},{key:"_menuLinkEvents",value:function(){var t=this;this.$menuItems.not(".is-drilldown-submenu-parent").off("click.zf.drilldown").on("click.zf.drilldown",function(e){setTimeout(function(){t._hideAll()},0)})}},{key:"_show",value:function(t){this.options.autoHeight&&this.$wrapper.css({height:t.children("[data-submenu]").data("calcHeight")}),t.attr("aria-expanded",!0),t.children("[data-submenu]").addClass("is-active").removeClass("invisible").attr("aria-hidden",!1),this.$element.trigger("open.zf.drilldown",[t])}},{key:"_hide",value:function(t){this.options.autoHeight&&this.$wrapper.css({height:t.parent().closest("ul").data("calcHeight")});t.parent("li").attr("aria-expanded",!1),t.attr("aria-hidden",!0).addClass("is-closing"),t.addClass("is-closing").one(i.i(c.b)(t),function(){t.removeClass("is-active is-closing"),t.blur().addClass("invisible")}),t.trigger("hide.zf.drilldown",[t])}},{key:"_getMaxDims",value:function(){var t=0,e={},i=this;return this.$submenus.add(this.$element).each(function(){var n=(r()(this).children("li").length,h.a.GetDimensions(this).height);t=n>t?n:t,i.options.autoHeight&&(r()(this).data("calcHeight",n),r()(this).hasClass("is-drilldown-submenu")||(e.height=n))}),this.options.autoHeight||(e["min-height"]=t+"px"),e["max-width"]=this.$element[0].getBoundingClientRect().width+"px",e}},{key:"_destroy",value:function(){this.options.scrollTop&&this.$element.off(".zf.drilldown",this._bindHandler),this._hideAll(),this.$element.off("mutateme.zf.trigger"),u.a.Burn(this.$element,"drilldown"),this.$element.unwrap().find(".js-drilldown-back, .is-submenu-parent-item").remove().end().find(".is-active, .is-closing, .is-drilldown-submenu").removeClass("is-active is-closing is-drilldown-submenu").end().find("[data-submenu]").removeAttr("aria-hidden tabindex role"),this.$submenuAnchors.each(function(){r()(this).off(".zf.drilldown")}),this.$submenus.removeClass("drilldown-submenu-cover-previous invisible"),this.$element.find("a").each(function(){var t=r()(this);t.removeAttr("tabindex"),t.data("savedHref")&&t.attr("href",t.data("savedHref")).removeData("savedHref")})}}]),e}(d.a);p.defaults={autoApplyClass:!0,backButton:'<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',backButtonPosition:"top",wrapper:"<div></div>",parentLink:!1,closeOnClick:!1,autoHeight:!1,animateHeight:!1,scrollTop:!1,scrollTopElement:"",scrollTopOffset:0,animationDuration:500,animationEasing:"swing"}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return p});var a=i(0),r=i.n(a),l=i(4),u=i(9),c=i(7),h=i(1),d=i(2),f=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),f(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="DropdownMenu",this._init(),l.a.register("DropdownMenu",{ENTER:"open",SPACE:"open",ARROW_RIGHT:"next",ARROW_UP:"up",ARROW_DOWN:"down",ARROW_LEFT:"previous",ESCAPE:"close"})}},{key:"_init",value:function(){u.a.Feather(this.$element,"dropdown");var t=this.$element.find("li.is-dropdown-submenu-parent");this.$element.children(".is-dropdown-submenu-parent").children(".is-dropdown-submenu").addClass("first-sub"),this.$menuItems=this.$element.find('[role="menuitem"]'),this.$tabs=this.$element.children('[role="menuitem"]'),this.$tabs.find("ul.is-dropdown-submenu").addClass(this.options.verticalClass),"auto"===this.options.alignment?this.$element.hasClass(this.options.rightClass)||i.i(h.c)()||this.$element.parents(".top-bar-right").is("*")?(this.options.alignment="right",t.addClass("opens-left")):(this.options.alignment="left",t.addClass("opens-right")):"right"===this.options.alignment?t.addClass("opens-left"):t.addClass("opens-right"),this.changed=!1,this._events()}},{key:"_isVertical",value:function(){return"block"===this.$tabs.css("display")||"column"===this.$element.css("flex-direction")}},{key:"_isRtl",value:function(){return this.$element.hasClass("align-right")||i.i(h.c)()&&!this.$element.hasClass("align-left")}},{key:"_events",value:function(){var t=this,e="ontouchstart"in window||"undefined"!=typeof window.ontouchstart,i="is-dropdown-submenu-parent",n=function(n){var o=r()(n.target).parentsUntil("ul","."+i),s=o.hasClass(i),a="true"===o.attr("data-is-click"),l=o.children(".is-dropdown-submenu");if(s)if(a){if(!t.options.closeOnClick||!t.options.clickOpen&&!e||t.options.forceFollow&&e)return;n.stopImmediatePropagation(),n.preventDefault(),t._hide(o)}else n.preventDefault(),n.stopImmediatePropagation(),t._show(l),o.add(o.parentsUntil(t.$element,"."+i)).attr("data-is-click",!0)};(this.options.clickOpen||e)&&this.$menuItems.on("click.zf.dropdownmenu touchstart.zf.dropdownmenu",n),t.options.closeOnClickInside&&this.$menuItems.on("click.zf.dropdownmenu",function(e){var n=r()(this),o=n.hasClass(i);o||t._hide()}),this.options.disableHover||this.$menuItems.on("mouseenter.zf.dropdownmenu",function(e){var n=r()(this),o=n.hasClass(i);o&&(clearTimeout(n.data("_delay")),n.data("_delay",setTimeout(function(){t._show(n.children(".is-dropdown-submenu"))},t.options.hoverDelay)))}).on("mouseleave.zf.dropdownmenu",function(e){var n=r()(this),o=n.hasClass(i);if(o&&t.options.autoclose){if("true"===n.attr("data-is-click")&&t.options.clickOpen)return!1;clearTimeout(n.data("_delay")),n.data("_delay",setTimeout(function(){t._hide(n)},t.options.closingTime))}}),this.$menuItems.on("keydown.zf.dropdownmenu",function(e){var i,n,o=r()(e.target).parentsUntil("ul",'[role="menuitem"]'),s=t.$tabs.index(o)>-1,a=s?t.$tabs:o.siblings("li").add(o);a.each(function(t){if(r()(this).is(o))return i=a.eq(t-1),void(n=a.eq(t+1))});var u=function(){n.children("a:first").focus(),e.preventDefault()},c=function(){i.children("a:first").focus(),e.preventDefault()},h=function(){var i=o.children("ul.is-dropdown-submenu");i.length&&(t._show(i),o.find("li > a:first").focus(),e.preventDefault())},d=function(){var i=o.parent("ul").parent("li");i.children("a:first").focus(),t._hide(i),e.preventDefault()},f={open:h,close:function(){t._hide(t.$element),t.$menuItems.eq(0).children("a").focus(),e.preventDefault()},handled:function(){e.stopImmediatePropagation()}};s?t._isVertical()?t._isRtl()?r.a.extend(f,{down:u,up:c,next:d,previous:h}):r.a.extend(f,{down:u,up:c,next:h,previous:d}):t._isRtl()?r.a.extend(f,{next:c,previous:u,down:h,up:d}):r.a.extend(f,{next:u,previous:c,down:h,up:d}):t._isRtl()?r.a.extend(f,{next:d,previous:h,down:u,up:c}):r.a.extend(f,{next:h,previous:d,down:u,up:c}),l.a.handleKey(e,"DropdownMenu",f)})}},{key:"_addBodyHandler",value:function(){var t=r()(document.body),e=this;t.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu").on("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu",function(i){var n=e.$element.find(i.target);n.length||(e._hide(),t.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu"))})}},{key:"_show",value:function(t){var e=this.$tabs.index(this.$tabs.filter(function(e,i){return r()(i).find(t).length>0})),i=t.parent("li.is-dropdown-submenu-parent").siblings("li.is-dropdown-submenu-parent");this._hide(i,e),t.css("visibility","hidden").addClass("js-dropdown-active").parent("li.is-dropdown-submenu-parent").addClass("is-active");var n=c.a.ImNotTouchingYou(t,null,!0);if(!n){var o="left"===this.options.alignment?"-right":"-left",s=t.parent(".is-dropdown-submenu-parent");s.removeClass("opens"+o).addClass("opens-"+this.options.alignment),n=c.a.ImNotTouchingYou(t,null,!0),n||s.removeClass("opens-"+this.options.alignment).addClass("opens-inner"),this.changed=!0}t.css("visibility",""),this.options.closeOnClick&&this._addBodyHandler(),this.$element.trigger("show.zf.dropdownmenu",[t])}},{key:"_hide",value:function(t,e){var i;i=t&&t.length?t:void 0!==e?this.$tabs.not(function(t,i){return t===e}):this.$element;var n=i.hasClass("is-active")||i.find(".is-active").length>0;if(n){if(i.find("li.is-active").add(i).attr({"data-is-click":!1}).removeClass("is-active"),i.find("ul.js-dropdown-active").removeClass("js-dropdown-active"),this.changed||i.find("opens-inner").length){var o="left"===this.options.alignment?"right":"left";i.find("li.is-dropdown-submenu-parent").add(i).removeClass("opens-inner opens-"+this.options.alignment).addClass("opens-"+o),this.changed=!1}this.$element.trigger("hide.zf.dropdownmenu",[i])}}},{key:"_destroy",value:function(){this.$menuItems.off(".zf.dropdownmenu").removeAttr("data-is-click").removeClass("is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner"),r()(document.body).off(".zf.dropdownmenu"),u.a.Burn(this.$element,"dropdown")}}]),e}(d.a);p.defaults={disableHover:!1,autoclose:!0,hoverDelay:50,clickOpen:!1,closingTime:500,alignment:"auto",closeOnClick:!0,closeOnClickInside:!0,verticalClass:"vertical",rightClass:"align-right",forceFollow:!0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return h});var a=i(0),r=i.n(a),l=i(1),u=i(2),c=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),h=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),c(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="SmoothScroll",this._init()}},{key:"_init",value:function(){var t=this.$element[0].id||i.i(l.a)(6,"smooth-scroll");this.$element.attr({id:t}),this._events()}},{key:"_events",value:function(){var t=this,i=function(i){if(!r()(this).is('a[href^="#"]'))return!1;var n=this.getAttribute("href");t._inTransition=!0,e.scrollToLoc(n,t.options,function(){t._inTransition=!1}),i.preventDefault()};this.$element.on("click.zf.smoothScroll",i),this.$element.on("click.zf.smoothScroll",'a[href^="#"]',i)}}],[{key:"scrollToLoc",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.defaults,n=arguments[2];if(!r()(t).length)return!1;var o=Math.round(r()(t).offset().top-i.threshold/2-i.offset);r()("html, body").stop(!0).animate({scrollTop:o},i.animationDuration,i.animationEasing,function(){n&&"function"==typeof n&&n()})}}]),e}(u.a);h.defaults={animationDuration:500,animationEasing:"linear",threshold:50,offset:0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(4),u=i(8),c=i(2),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Tabs",this._init(),l.a.register("Tabs",{ENTER:"open",SPACE:"open",ARROW_RIGHT:"next",ARROW_UP:"previous",ARROW_DOWN:"next",ARROW_LEFT:"previous"})}},{key:"_init",value:function(){var t=this,e=this;if(this.$element.attr({role:"tablist"}),this.$tabTitles=this.$element.find("."+this.options.linkClass),this.$tabContent=r()('[data-tabs-content="'+this.$element[0].id+'"]'),this.$tabTitles.each(function(){var t=r()(this),i=t.find("a"),n=t.hasClass(""+e.options.linkActiveClass),o=i.attr("data-tabs-target")||i[0].hash.slice(1),s=i[0].id?i[0].id:o+"-label",a=r()("#"+o);t.attr({role:"presentation"}),i.attr({role:"tab","aria-controls":o,"aria-selected":n,id:s,tabindex:n?"0":"-1"}),a.attr({role:"tabpanel","aria-labelledby":s}),n||a.attr("aria-hidden","true"),n&&e.options.autoFocus&&r()(window).load(function(){r()("html, body").animate({scrollTop:t.offset().top},e.options.deepLinkSmudgeDelay,function(){i.focus()})})}),this.options.matchHeight){var n=this.$tabContent.find("img");n.length?i.i(u.a)(n,this._setHeight.bind(this)):this._setHeight()}this._checkDeepLink=function(){var e=window.location.hash;if(e.length){var i=t.$element.find('[href$="'+e+'"]');if(i.length){if(t.selectTab(r()(e),!0),t.options.deepLinkSmudge){var n=t.$element.offset();r()("html, body").animate({scrollTop:n.top},t.options.deepLinkSmudgeDelay)}t.$element.trigger("deeplink.zf.tabs",[i,r()(e)])}}},this.options.deepLink&&this._checkDeepLink(),this._events()}},{key:"_events",value:function(){this._addKeyHandler(),this._addClickHandler(),this._setHeightMqHandler=null,this.options.matchHeight&&(this._setHeightMqHandler=this._setHeight.bind(this),r()(window).on("changed.zf.mediaquery",this._setHeightMqHandler)),this.options.deepLink&&r()(window).on("popstate",this._checkDeepLink)}},{key:"_addClickHandler",value:function(){var t=this;this.$element.off("click.zf.tabs").on("click.zf.tabs","."+this.options.linkClass,function(e){e.preventDefault(),e.stopPropagation(),t._handleTabChange(r()(this))})}},{key:"_addKeyHandler",value:function(){var t=this;this.$tabTitles.off("keydown.zf.tabs").on("keydown.zf.tabs",function(e){if(9!==e.which){var i,n,o=r()(this),s=o.parent("ul").children("li");s.each(function(e){if(r()(this).is(o))return void(t.options.wrapOnKeys?(i=0===e?s.last():s.eq(e-1),n=e===s.length-1?s.first():s.eq(e+1)):(i=s.eq(Math.max(0,e-1)),n=s.eq(Math.min(e+1,s.length-1))))}),l.a.handleKey(e,"Tabs",{open:function(){o.find('[role="tab"]').focus(),t._handleTabChange(o)},previous:function(){i.find('[role="tab"]').focus(),t._handleTabChange(i)},next:function(){n.find('[role="tab"]').focus(),t._handleTabChange(n)},handled:function(){e.stopPropagation(),e.preventDefault()}})}})}},{key:"_handleTabChange",value:function(t,e){if(t.hasClass(""+this.options.linkActiveClass))return void(this.options.activeCollapse&&(this._collapseTab(t),this.$element.trigger("collapse.zf.tabs",[t])));var i=this.$element.find("."+this.options.linkClass+"."+this.options.linkActiveClass),n=t.find('[role="tab"]'),o=n.attr("data-tabs-target")||n[0].hash.slice(1),s=this.$tabContent.find("#"+o);if(this._collapseTab(i),this._openTab(t),this.options.deepLink&&!e){var a=t.find("a").attr("href");this.options.updateHistory?history.pushState({},"",a):history.replaceState({},"",a)}this.$element.trigger("change.zf.tabs",[t,s]),s.find("[data-mutate]").trigger("mutateme.zf.trigger")}},{key:"_openTab",value:function(t){var e=t.find('[role="tab"]'),i=e.attr("data-tabs-target")||e[0].hash.slice(1),n=this.$tabContent.find("#"+i);t.addClass(""+this.options.linkActiveClass),e.attr({"aria-selected":"true",tabindex:"0"}),n.addClass(""+this.options.panelActiveClass).removeAttr("aria-hidden")}},{key:"_collapseTab",value:function(t){var e=t.removeClass(""+this.options.linkActiveClass).find('[role="tab"]').attr({"aria-selected":"false",tabindex:-1});r()("#"+e.attr("aria-controls")).removeClass(""+this.options.panelActiveClass).attr({"aria-hidden":"true"})}},{key:"selectTab",value:function(t,e){var i;i="object"==typeof t?t[0].id:t,i.indexOf("#")<0&&(i="#"+i);var n=this.$tabTitles.find('[href$="'+i+'"]').parent("."+this.options.linkClass);this._handleTabChange(n,e)}},{key:"_setHeight",value:function(){var t=0,e=this;this.$tabContent.find("."+this.options.panelClass).css("height","").each(function(){var i=r()(this),n=i.hasClass(""+e.options.panelActiveClass);n||i.css({visibility:"hidden",display:"block"});var o=this.getBoundingClientRect().height;n||i.css({visibility:"",display:""}),t=o>t?o:t}).css("height",t+"px")}},{key:"_destroy",value:function(){this.$element.find("."+this.options.linkClass).off(".zf.tabs").hide().end().find("."+this.options.panelClass).hide(),this.options.matchHeight&&null!=this._setHeightMqHandler&&r()(window).off("changed.zf.mediaquery",this._setHeightMqHandler),this.options.deepLink&&r()(window).off("popstate",this._checkDeepLink)}}]),e}(c.a);d.defaults={deepLink:!1,deepLinkSmudge:!1,deepLinkSmudgeDelay:300,updateHistory:!1,autoFocus:!1,wrapOnKeys:!0,matchHeight:!1,activeCollapse:!1,linkClass:"tabs-title",linkActiveClass:"is-active",panelClass:"tabs-panel",panelActiveClass:"is-active"}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var i=e.indexOf(t);return i===e.length-1?e[0]:e[i+1]}i.d(e,"a",function(){return m});var r=i(7),l=i(2),u=i(1),c=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),h=["left","right","top","bottom"],d=["top","bottom","center"],f=["left","right","center"],p={left:d,right:d,top:f,bottom:f},m=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),c(e,[{key:"_init",value:function(){this.triedPositions={},this.position="auto"===this.options.position?this._getDefaultPosition():this.options.position,this.alignment="auto"===this.options.alignment?this._getDefaultAlignment():this.options.alignment}},{key:"_getDefaultPosition",value:function(){return"bottom"}},{key:"_getDefaultAlignment",value:function(){switch(this.position){case"bottom":case"top":return i.i(u.c)()?"right":"left";case"left":case"right":return"bottom"}}},{key:"_reposition",value:function(){this._alignmentsExhausted(this.position)?(this.position=a(this.position,h),this.alignment=p[this.position][0]):this._realign()}},{key:"_realign",value:function(){this._addTriedPosition(this.position,this.alignment),this.alignment=a(this.alignment,p[this.position])}},{key:"_addTriedPosition",value:function(t,e){this.triedPositions[t]=this.triedPositions[t]||[],this.triedPositions[t].push(e)}},{key:"_positionsExhausted",value:function(){for(var t=!0,e=0;e<h.length;e++)t=t&&this._alignmentsExhausted(h[e]);return t}},{key:"_alignmentsExhausted",value:function(t){return this.triedPositions[t]&&this.triedPositions[t].length==p[t].length}},{key:"_getVOffset",value:function(){return this.options.vOffset}},{key:"_getHOffset",value:function(){return this.options.hOffset}},{key:"_setPosition",value:function(t,e,i){if("false"===t.attr("aria-expanded"))return!1;r.a.GetDimensions(e),r.a.GetDimensions(t);if(e.offset(r.a.GetExplicitOffsets(e,t,this.position,this.alignment,this._getVOffset(),this._getHOffset())),!this.options.allowOverlap){for(var n=1e8,o={position:this.position,alignment:this.alignment};!this._positionsExhausted();){var s=r.a.OverlapArea(e,i,!1,!1,this.options.allowBottomOverlap);if(0===s)return;s<n&&(n=s,o={position:this.position,alignment:this.alignment}),this._reposition(),e.offset(r.a.GetExplicitOffsets(e,t,this.position,this.alignment,this._getVOffset(),this._getHOffset()))}this.position=o.position,this.alignment=o.alignment,e.offset(r.a.GetExplicitOffsets(e,t,this.position,this.alignment,this._getVOffset(),this._getHOffset()))}}}]),e}(l.a);m.defaults={position:"auto",alignment:"auto",allowOverlap:!1,allowBottomOverlap:!0,vOffset:0,hOffset:0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(){this.removeEventListener("touchmove",s),this.removeEventListener("touchend",o),g=!1}function s(t){if(f.a.spotSwipe.preventDefault&&t.preventDefault(),g){var e,i=t.touches[0].pageX,n=(t.touches[0].pageY,l-i);h=(new Date).getTime()-c,Math.abs(n)>=f.a.spotSwipe.moveThreshold&&h<=f.a.spotSwipe.timeThreshold&&(e=n>0?"left":"right"),e&&(t.preventDefault(),o.call(this),f()(this).trigger("swipe",e).trigger("swipe"+e))}}function a(t){1==t.touches.length&&(l=t.touches[0].pageX,u=t.touches[0].pageY,g=!0,c=(new Date).getTime(),this.addEventListener("touchmove",s,!1),this.addEventListener("touchend",o,!1))}function r(){this.addEventListener&&this.addEventListener("touchstart",a,!1)}i.d(e,"a",function(){return m});var l,u,c,h,d=i(0),f=i.n(d),p=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),m={},g=!1,v=function(){function t(e){n(this,t),this.version="1.0.0",this.enabled="ontouchstart"in document.documentElement,this.preventDefault=!1,this.moveThreshold=75,this.timeThreshold=200,this.$=e,this._init()}return p(t,[{key:"_init",value:function(){var t=this.$;t.event.special.swipe={setup:r},t.each(["left","up","down","right"],function(){t.event.special["swipe"+this]={setup:function(){t(this).on("swipe",t.noop)}}})}}]),t}();m.setupSpotSwipe=function(t){t.spotSwipe=new v(t)},m.setupTouchHandler=function(t){t.fn.addTouch=function(){this.each(function(i,n){t(n).bind("touchstart touchmove touchend touchcancel",function(){e(event)})});var e=function(t){var e,i=t.changedTouches,n=i[0],o={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup"},s=o[t.type];"MouseEvent"in window&&"function"==typeof window.MouseEvent?e=new window.MouseEvent(s,{bubbles:!0,cancelable:!0,screenX:n.screenX,screenY:n.screenY,clientX:n.clientX,clientY:n.clientY}):(e=document.createEvent("MouseEvent"),e.initMouseEvent(s,!0,!0,window,1,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null)),n.target.dispatchEvent(e)}}},m.init=function(t){"undefined"==typeof t.spotSwipe&&(m.setupSpotSwipe(t),m.setupTouchHandler(t))}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return c});var a=i(0),r=i.n(a),l=i(2),u=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),c=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),u(e,[{key:"_setup",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.$element=t,this.options=r.a.extend(!0,{},e.defaults,this.$element.data(),i),this.className="Abide",this._init()}},{key:"_init",value:function(){this.$inputs=this.$element.find("input, textarea, select"),this._events()}},{key:"_events",value:function(){var t=this;this.$element.off(".abide").on("reset.zf.abide",function(){t.resetForm()}).on("submit.zf.abide",function(){return t.validateForm()}),"fieldChange"===this.options.validateOn&&this.$inputs.off("change.zf.abide").on("change.zf.abide",function(e){t.validateInput(r()(e.target))}),this.options.liveValidate&&this.$inputs.off("input.zf.abide").on("input.zf.abide",function(e){t.validateInput(r()(e.target))}),this.options.validateOnBlur&&this.$inputs.off("blur.zf.abide").on("blur.zf.abide",function(e){t.validateInput(r()(e.target))})}},{key:"_reflow",value:function(){this._init()}},{key:"requiredCheck",value:function(t){if(!t.attr("required"))return!0;var e=!0;switch(t[0].type){case"checkbox":e=t[0].checked;break;case"select":case"select-one":case"select-multiple":var i=t.find("option:selected");i.length&&i.val()||(e=!1);break;default:t.val()&&t.val().length||(e=!1)}return e}},{key:"findFormError",value:function(t){var e=t[0].id,i=t.siblings(this.options.formErrorSelector);return i.length||(i=t.parent().find(this.options.formErrorSelector)),i=i.add(this.$element.find('[data-form-error-for="'+e+'"]'))}},{key:"findLabel",value:function(t){var e=t[0].id,i=this.$element.find('label[for="'+e+'"]');return i.length?i:t.closest("label")}},{key:"findRadioLabels",value:function(t){var e=this,i=t.map(function(t,i){var n=i.id,o=e.$element.find('label[for="'+n+'"]');return o.length||(o=r()(i).closest("label")),o[0]});return r()(i)}},{key:"addErrorClasses",value:function(t){var e=this.findLabel(t),i=this.findFormError(t);e.length&&e.addClass(this.options.labelErrorClass),i.length&&i.addClass(this.options.formErrorClass),t.addClass(this.options.inputErrorClass).attr("data-invalid","")}},{key:"removeRadioErrorClasses",value:function(t){var e=this.$element.find(':radio[name="'+t+'"]'),i=this.findRadioLabels(e),n=this.findFormError(e);i.length&&i.removeClass(this.options.labelErrorClass),n.length&&n.removeClass(this.options.formErrorClass),e.removeClass(this.options.inputErrorClass).removeAttr("data-invalid")}},{key:"removeErrorClasses",value:function(t){if("radio"==t[0].type)return this.removeRadioErrorClasses(t.attr("name"));var e=this.findLabel(t),i=this.findFormError(t);e.length&&e.removeClass(this.options.labelErrorClass),i.length&&i.removeClass(this.options.formErrorClass),t.removeClass(this.options.inputErrorClass).removeAttr("data-invalid")}},{key:"validateInput",value:function(t){var e=this,i=this.requiredCheck(t),n=!1,o=!0,s=t.attr("data-validator"),a=!0;if(t.is("[data-abide-ignore]")||t.is('[type="hidden"]')||t.is("[disabled]"))return!0;switch(t[0].type){case"radio":n=this.validateRadio(t.attr("name"));break;case"checkbox":n=i;break;case"select":case"select-one":case"select-multiple":n=i;break;default:n=this.validateText(t)}s&&(o=this.matchValidation(t,s,t.attr("required"))),t.attr("data-equalto")&&(a=this.options.validators.equalTo(t));var l=[i,n,o,a].indexOf(!1)===-1,u=(l?"valid":"invalid")+".zf.abide";if(l){var c=this.$element.find('[data-equalto="'+t.attr("id")+'"]');c.length&&!function(){var t=e;c.each(function(){r()(this).val()&&t.validateInput(r()(this))})}()}return this[l?"removeErrorClasses":"addErrorClasses"](t),t.trigger(u,[t]),l}},{key:"validateForm",value:function(){var t=[],e=this;this.$inputs.each(function(){t.push(e.validateInput(r()(this)))});var i=t.indexOf(!1)===-1;return this.$element.find("[data-abide-error]").css("display",i?"none":"block"),this.$element.trigger((i?"formvalid":"forminvalid")+".zf.abide",[this.$element]),i}},{key:"validateText",value:function(t,e){e=e||t.attr("pattern")||t.attr("type");var i=t.val(),n=!1;return i.length?n=this.options.patterns.hasOwnProperty(e)?this.options.patterns[e].test(i):e===t.attr("type")||new RegExp(e).test(i):t.prop("required")||(n=!0),n}},{key:"validateRadio",value:function(t){var e=this.$element.find(':radio[name="'+t+'"]'),i=!1,n=!1;return e.each(function(t,e){r()(e).attr("required")&&(n=!0)}),n||(i=!0),i||e.each(function(t,e){r()(e).prop("checked")&&(i=!0)}),i}},{key:"matchValidation",value:function(t,e,i){var n=this;i=!!i;var o=e.split(" ").map(function(e){return n.options.validators[e](t,i,t.parent())});return o.indexOf(!1)===-1}},{key:"resetForm",value:function(){var t=this.$element,e=this.options;r()("."+e.labelErrorClass,t).not("small").removeClass(e.labelErrorClass),r()("."+e.inputErrorClass,t).not("small").removeClass(e.inputErrorClass),r()(e.formErrorSelector+"."+e.formErrorClass).removeClass(e.formErrorClass),t.find("[data-abide-error]").css("display","none"),r()(":input",t).not(":button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]").val("").removeAttr("data-invalid"),r()(":input:radio",t).not("[data-abide-ignore]").prop("checked",!1).removeAttr("data-invalid"),
r()(":input:checkbox",t).not("[data-abide-ignore]").prop("checked",!1).removeAttr("data-invalid"),t.trigger("formreset.zf.abide",[t])}},{key:"_destroy",value:function(){var t=this;this.$element.off(".abide").find("[data-abide-error]").css("display","none"),this.$inputs.off(".abide").each(function(){t.removeErrorClasses(r()(this))})}}]),e}(l.a);c.defaults={validateOn:"fieldChange",labelErrorClass:"is-invalid-label",inputErrorClass:"is-invalid-input",formErrorSelector:".form-error",formErrorClass:"is-visible",liveValidate:!1,validateOnBlur:!1,patterns:{alpha:/^[a-zA-Z]+$/,alpha_numeric:/^[a-zA-Z0-9]+$/,integer:/^[-+]?\d+$/,number:/^[-+]?\d*(?:[\.\,]\d+)?$/,card:/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,cvv:/^([0-9]){3,4}$/,email:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,url:/^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,domain:/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,datetime:/^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,date:/(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,time:/^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,dateISO:/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,month_day_year:/^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,day_month_year:/^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,color:/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,website:{test:function(t){return c.defaults.patterns.domain.test(t)||c.defaults.patterns.url.test(t)}}},validators:{equalTo:function(t,e,i){return r()("#"+t.attr("data-equalto")).val()===t.val()}}}},function(t,e,i){"use strict";function n(t){if(void 0===Function.prototype.name){var e=/function\s([^(]{1,})\(/,i=e.exec(t.toString());return i&&i.length>1?i[1].trim():""}return void 0===t.prototype?t.constructor.name:t.prototype.constructor.name}function o(t){return"true"===t||"false"!==t&&(isNaN(1*t)?t:parseFloat(t))}function s(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}i.d(e,"a",function(){return h});var a=i(0),r=i.n(a),l=i(1),u=i(3),c="6.4.2",h={version:c,_plugins:{},_uuids:[],plugin:function(t,e){var i=e||n(t),o=s(i);this._plugins[o]=this[i]=t},registerPlugin:function(t,e){var o=e?s(e):n(t.constructor).toLowerCase();t.uuid=i.i(l.a)(6,o),t.$element.attr("data-"+o)||t.$element.attr("data-"+o,t.uuid),t.$element.data("zfPlugin")||t.$element.data("zfPlugin",t),t.$element.trigger("init.zf."+o),this._uuids.push(t.uuid)},unregisterPlugin:function(t){var e=s(n(t.$element.data("zfPlugin").constructor));this._uuids.splice(this._uuids.indexOf(t.uuid),1),t.$element.removeAttr("data-"+e).removeData("zfPlugin").trigger("destroyed.zf."+e);for(var i in t)t[i]=null},reInit:function(t){var e=t instanceof r.a;try{if(e)t.each(function(){r()(this).data("zfPlugin")._init()});else{var i=typeof t,n=this,o={object:function(t){t.forEach(function(t){t=s(t),r()("[data-"+t+"]").foundation("_init")})},string:function(){t=s(t),r()("[data-"+t+"]").foundation("_init")},undefined:function(){this.object(Object.keys(n._plugins))}};o[i](t)}}catch(a){console.error(a)}finally{return t}},reflow:function(t,e){"undefined"==typeof e?e=Object.keys(this._plugins):"string"==typeof e&&(e=[e]);var i=this;r.a.each(e,function(e,n){var s=i._plugins[n],a=r()(t).find("[data-"+n+"]").addBack("[data-"+n+"]");a.each(function(){var t=r()(this),e={};if(t.data("zfPlugin"))return void console.warn("Tried to initialize "+n+" on an element that already has a Foundation plugin.");if(t.attr("data-options")){t.attr("data-options").split(";").forEach(function(t,i){var n=t.split(":").map(function(t){return t.trim()});n[0]&&(e[n[0]]=o(n[1]))})}try{t.data("zfPlugin",new s(r()(this),e))}catch(i){console.error(i)}finally{return}})})},getFnName:n,addToJquery:function(t){var e=function(e){var i=typeof e,o=t(".no-js");if(o.length&&o.removeClass("no-js"),"undefined"===i)u.a._init(),h.reflow(this);else{if("string"!==i)throw new TypeError("We're sorry, "+i+" is not a valid parameter. You must use a string representing the method you wish to invoke.");var s=Array.prototype.slice.call(arguments,1),a=this.data("zfPlugin");if(void 0===a||void 0===a[e])throw new ReferenceError("We're sorry, '"+e+"' is not an available method for "+(a?n(a):"this element")+".");1===this.length?a[e].apply(a,s):this.each(function(i,n){a[e].apply(t(n).data("zfPlugin"),s)})}return this};return t.fn.foundation=e,t}};h.util={throttle:function(t,e){var i=null;return function(){var n=this,o=arguments;null===i&&(i=setTimeout(function(){t.apply(n,o),i=null},e))}}},window.Foundation=h,function(){Date.now&&window.Date.now||(window.Date.now=Date.now=function(){return(new Date).getTime()});for(var t=["webkit","moz"],e=0;e<t.length&&!window.requestAnimationFrame;++e){var i=t[e];window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var n=0;window.requestAnimationFrame=function(t){var e=Date.now(),i=Math.max(n+16,e);return setTimeout(function(){t(n=i)},i-e)},window.cancelAnimationFrame=clearTimeout}window.performance&&window.performance.now||(window.performance={start:Date.now(),now:function(){return Date.now()-this.start}})}(),Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),i=this,n=function(){},o=function(){return i.apply(this instanceof n?this:t,e.concat(Array.prototype.slice.call(arguments)))};return this.prototype&&(n.prototype=this.prototype),o.prototype=new n,o})},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return p});var a=i(0),r=i.n(a),l=i(4),u=i(1),c=i(16),h=i(5),d=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),f=function m(t,e,i){null===t&&(t=Function.prototype);var n=Object.getOwnPropertyDescriptor(t,e);if(void 0===n){var o=Object.getPrototypeOf(t);return null===o?void 0:m(o,e,i)}if("value"in n)return n.value;var s=n.get;if(void 0!==s)return s.call(i)},p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),d(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Dropdown",h.a.init(r.a),this._init(),l.a.register("Dropdown",{ENTER:"open",SPACE:"open",ESCAPE:"close"})}},{key:"_init",value:function(){var t=this.$element.attr("id");this.$anchors=r()('[data-toggle="'+t+'"]').length?r()('[data-toggle="'+t+'"]'):r()('[data-open="'+t+'"]'),this.$anchors.attr({"aria-controls":t,"data-is-focus":!1,"data-yeti-box":t,"aria-haspopup":!0,"aria-expanded":!1}),this._setCurrentAnchor(this.$anchors.first()),this.options.parentClass?this.$parent=this.$element.parents("."+this.options.parentClass):this.$parent=null,this.$element.attr({"aria-hidden":"true","data-yeti-box":t,"data-resize":t,"aria-labelledby":this.$currentAnchor.id||i.i(u.a)(6,"dd-anchor")}),f(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"_init",this).call(this),this._events()}},{key:"_getDefaultPosition",value:function(){var t=this.$element[0].className.match(/(top|left|right|bottom)/g);return t?t[0]:"bottom"}},{key:"_getDefaultAlignment",value:function(){var t=/float-(\S+)/.exec(this.$currentAnchor.className);return t?t[1]:f(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"_getDefaultAlignment",this).call(this)}},{key:"_setPosition",value:function(){f(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"_setPosition",this).call(this,this.$currentAnchor,this.$element,this.$parent)}},{key:"_setCurrentAnchor",value:function(t){this.$currentAnchor=r()(t)}},{key:"_events",value:function(){var t=this;this.$element.on({"open.zf.trigger":this.open.bind(this),"close.zf.trigger":this.close.bind(this),"toggle.zf.trigger":this.toggle.bind(this),"resizeme.zf.trigger":this._setPosition.bind(this)}),this.$anchors.off("click.zf.trigger").on("click.zf.trigger",function(){t._setCurrentAnchor(this)}),this.options.hover&&(this.$anchors.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown",function(){t._setCurrentAnchor(this);var e=r()("body").data();"undefined"!=typeof e.whatinput&&"mouse"!==e.whatinput||(clearTimeout(t.timeout),t.timeout=setTimeout(function(){t.open(),t.$anchors.data("hover",!0)},t.options.hoverDelay))}).on("mouseleave.zf.dropdown",function(){clearTimeout(t.timeout),t.timeout=setTimeout(function(){t.close(),t.$anchors.data("hover",!1)},t.options.hoverDelay)}),this.options.hoverPane&&this.$element.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown",function(){clearTimeout(t.timeout)}).on("mouseleave.zf.dropdown",function(){clearTimeout(t.timeout),t.timeout=setTimeout(function(){t.close(),t.$anchors.data("hover",!1)},t.options.hoverDelay)})),this.$anchors.add(this.$element).on("keydown.zf.dropdown",function(e){var i=r()(this);l.a.findFocusable(t.$element);l.a.handleKey(e,"Dropdown",{open:function(){i.is(t.$anchors)&&(t.open(),t.$element.attr("tabindex",-1).focus(),e.preventDefault())},close:function(){t.close(),t.$anchors.focus()}})})}},{key:"_addBodyHandler",value:function(){var t=r()(document.body).not(this.$element),e=this;t.off("click.zf.dropdown").on("click.zf.dropdown",function(i){e.$anchors.is(i.target)||e.$anchors.find(i.target).length||e.$element.find(i.target).length||(e.close(),t.off("click.zf.dropdown"))})}},{key:"open",value:function(){if(this.$element.trigger("closeme.zf.dropdown",this.$element.attr("id")),this.$anchors.addClass("hover").attr({"aria-expanded":!0}),this.$element.addClass("is-opening"),this._setPosition(),this.$element.removeClass("is-opening").addClass("is-open").attr({"aria-hidden":!1}),this.options.autoFocus){var t=l.a.findFocusable(this.$element);t.length&&t.eq(0).focus()}this.options.closeOnClick&&this._addBodyHandler(),this.options.trapFocus&&l.a.trapFocus(this.$element),this.$element.trigger("show.zf.dropdown",[this.$element])}},{key:"close",value:function(){return!!this.$element.hasClass("is-open")&&(this.$element.removeClass("is-open").attr({"aria-hidden":!0}),this.$anchors.removeClass("hover").attr("aria-expanded",!1),this.$element.trigger("hide.zf.dropdown",[this.$element]),void(this.options.trapFocus&&l.a.releaseFocus(this.$element)))}},{key:"toggle",value:function(){if(this.$element.hasClass("is-open")){if(this.$anchors.data("hover"))return;this.close()}else this.open()}},{key:"_destroy",value:function(){this.$element.off(".zf.trigger").hide(),this.$anchors.off(".zf.dropdown"),r()(document.body).off("click.zf.dropdown")}}]),e}(c.a);p.defaults={parentClass:null,hoverDelay:250,hover:!1,hoverPane:!1,vOffset:0,hOffset:0,positionClass:"",position:"auto",alignment:"auto",allowOverlap:!1,allowBottomOverlap:!0,trapFocus:!1,autoFocus:!1,closeOnClick:!1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return f});var a=i(0),r=i.n(a),l=i(3),u=i(8),c=i(1),h=i(2),d=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),f=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),d(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Equalizer",this._init()}},{key:"_init",value:function(){var t=this.$element.attr("data-equalizer")||"",e=this.$element.find('[data-equalizer-watch="'+t+'"]');l.a._init(),this.$watched=e.length?e:this.$element.find("[data-equalizer-watch]"),this.$element.attr("data-resize",t||i.i(c.a)(6,"eq")),this.$element.attr("data-mutate",t||i.i(c.a)(6,"eq")),this.hasNested=this.$element.find("[data-equalizer]").length>0,this.isNested=this.$element.parentsUntil(document.body,"[data-equalizer]").length>0,this.isOn=!1,this._bindHandler={onResizeMeBound:this._onResizeMe.bind(this),onPostEqualizedBound:this._onPostEqualized.bind(this)};var n,o=this.$element.find("img");this.options.equalizeOn?(n=this._checkMQ(),r()(window).on("changed.zf.mediaquery",this._checkMQ.bind(this))):this._events(),(void 0!==n&&n===!1||void 0===n)&&(o.length?i.i(u.a)(o,this._reflow.bind(this)):this._reflow())}},{key:"_pauseEvents",value:function(){this.isOn=!1,this.$element.off({".zf.equalizer":this._bindHandler.onPostEqualizedBound,"resizeme.zf.trigger":this._bindHandler.onResizeMeBound,"mutateme.zf.trigger":this._bindHandler.onResizeMeBound})}},{key:"_onResizeMe",value:function(t){this._reflow()}},{key:"_onPostEqualized",value:function(t){t.target!==this.$element[0]&&this._reflow()}},{key:"_events",value:function(){this._pauseEvents(),this.hasNested?this.$element.on("postequalized.zf.equalizer",this._bindHandler.onPostEqualizedBound):(this.$element.on("resizeme.zf.trigger",this._bindHandler.onResizeMeBound),this.$element.on("mutateme.zf.trigger",this._bindHandler.onResizeMeBound)),this.isOn=!0}},{key:"_checkMQ",value:function(){var t=!l.a.is(this.options.equalizeOn);return t?this.isOn&&(this._pauseEvents(),this.$watched.css("height","auto")):this.isOn||this._events(),t}},{key:"_killswitch",value:function(){}},{key:"_reflow",value:function(){return!this.options.equalizeOnStack&&this._isStacked()?(this.$watched.css("height","auto"),!1):void(this.options.equalizeByRow?this.getHeightsByRow(this.applyHeightByRow.bind(this)):this.getHeights(this.applyHeight.bind(this)))}},{key:"_isStacked",value:function(){return!this.$watched[0]||!this.$watched[1]||this.$watched[0].getBoundingClientRect().top!==this.$watched[1].getBoundingClientRect().top}},{key:"getHeights",value:function(t){for(var e=[],i=0,n=this.$watched.length;i<n;i++)this.$watched[i].style.height="auto",e.push(this.$watched[i].offsetHeight);t(e)}},{key:"getHeightsByRow",value:function(t){var e=this.$watched.length?this.$watched.first().offset().top:0,i=[],n=0;i[n]=[];for(var o=0,s=this.$watched.length;o<s;o++){this.$watched[o].style.height="auto";var a=r()(this.$watched[o]).offset().top;a!=e&&(n++,i[n]=[],e=a),i[n].push([this.$watched[o],this.$watched[o].offsetHeight])}for(var l=0,u=i.length;l<u;l++){var c=r()(i[l]).map(function(){return this[1]}).get(),h=Math.max.apply(null,c);i[l].push(h)}t(i)}},{key:"applyHeight",value:function(t){var e=Math.max.apply(null,t);this.$element.trigger("preequalized.zf.equalizer"),this.$watched.css("height",e),this.$element.trigger("postequalized.zf.equalizer")}},{key:"applyHeightByRow",value:function(t){this.$element.trigger("preequalized.zf.equalizer");for(var e=0,i=t.length;e<i;e++){var n=t[e].length,o=t[e][n-1];if(n<=2)r()(t[e][0][0]).css({height:"auto"});else{this.$element.trigger("preequalizedrow.zf.equalizer");for(var s=0,a=n-1;s<a;s++)r()(t[e][s][0]).css({height:o});this.$element.trigger("postequalizedrow.zf.equalizer")}}this.$element.trigger("postequalized.zf.equalizer")}},{key:"_destroy",value:function(){this._pauseEvents(),this.$watched.css("height","auto")}}]),e}(h.a);f.defaults={equalizeOnStack:!1,equalizeByRow:!1,equalizeOn:""}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(3),u=i(2),c=i(1),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,i),this.rules=[],this.currentPath="",this.className="Interchange",this._init(),this._events()}},{key:"_init",value:function(){l.a._init();var t=this.$element[0].id||i.i(c.a)(6,"interchange");this.$element.attr({"data-resize":t,id:t}),this._addBreakpoints(),this._generateRules(),this._reflow()}},{key:"_events",value:function(){var t=this;this.$element.off("resizeme.zf.trigger").on("resizeme.zf.trigger",function(){return t._reflow()})}},{key:"_reflow",value:function(){var t;for(var e in this.rules)if(this.rules.hasOwnProperty(e)){var i=this.rules[e];window.matchMedia(i.query).matches&&(t=i)}t&&this.replace(t.path)}},{key:"_addBreakpoints",value:function(){for(var t in l.a.queries)if(l.a.queries.hasOwnProperty(t)){var i=l.a.queries[t];e.SPECIAL_QUERIES[i.name]=i.value}}},{key:"_generateRules",value:function(t){var i,n=[];i=this.options.rules?this.options.rules:this.$element.data("interchange"),i="string"==typeof i?i.match(/\[.*?\]/g):i;for(var o in i)if(i.hasOwnProperty(o)){var s=i[o].slice(1,-1).split(", "),a=s.slice(0,-1).join(""),r=s[s.length-1];e.SPECIAL_QUERIES[r]&&(r=e.SPECIAL_QUERIES[r]),n.push({path:a,query:r})}this.rules=n}},{key:"replace",value:function(t){if(this.currentPath!==t){var e=this,i="replaced.zf.interchange";"IMG"===this.$element[0].nodeName?this.$element.attr("src",t).on("load",function(){e.currentPath=t}).trigger(i):t.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)?(t=t.replace(/\(/g,"%28").replace(/\)/g,"%29"),this.$element.css({"background-image":"url("+t+")"}).trigger(i)):r.a.get(t,function(n){e.$element.html(n).trigger(i),r()(n).foundation(),e.currentPath=t})}}},{key:"_destroy",value:function(){this.$element.off("resizeme.zf.trigger")}}]),e}(u.a);d.defaults={rules:null},d.SPECIAL_QUERIES={landscape:"screen and (orientation: landscape)",portrait:"screen and (orientation: portrait)",retina:"only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)"}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(1),u=i(2),c=i(14),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Magellan",this._init(),this.calcPoints()}},{key:"_init",value:function(){var t=this.$element[0].id||i.i(l.a)(6,"magellan");this.$targets=r()("[data-magellan-target]"),this.$links=this.$element.find("a"),this.$element.attr({"data-resize":t,"data-scroll":t,id:t}),this.$active=r()(),this.scrollPos=parseInt(window.pageYOffset,10),this._events()}},{key:"calcPoints",value:function(){var t=this,e=document.body,i=document.documentElement;this.points=[],this.winHeight=Math.round(Math.max(window.innerHeight,i.clientHeight)),this.docHeight=Math.round(Math.max(e.scrollHeight,e.offsetHeight,i.clientHeight,i.scrollHeight,i.offsetHeight)),this.$targets.each(function(){var e=r()(this),i=Math.round(e.offset().top-t.options.threshold);e.targetPoint=i,t.points.push(i)})}},{key:"_events",value:function(){var t=this;r()("html, body"),{duration:t.options.animationDuration,easing:t.options.animationEasing};r()(window).one("load",function(){t.options.deepLinking&&location.hash&&t.scrollToLoc(location.hash),t.calcPoints(),t._updateActive()}),this.$element.on({"resizeme.zf.trigger":this.reflow.bind(this),"scrollme.zf.trigger":this._updateActive.bind(this)}).on("click.zf.magellan",'a[href^="#"]',function(e){e.preventDefault();var i=this.getAttribute("href");t.scrollToLoc(i)}),this._deepLinkScroll=function(e){t.options.deepLinking&&t.scrollToLoc(window.location.hash)},r()(window).on("popstate",this._deepLinkScroll)}},{key:"scrollToLoc",value:function(t){this._inTransition=!0;var e=this,i={animationEasing:this.options.animationEasing,animationDuration:this.options.animationDuration,threshold:this.options.threshold,offset:this.options.offset};c.a.scrollToLoc(t,i,function(){e._inTransition=!1,e._updateActive()})}},{key:"reflow",value:function(){this.calcPoints(),this._updateActive()}},{key:"_updateActive",value:function(){if(!this._inTransition){var t,e=parseInt(window.pageYOffset,10);if(e+this.winHeight===this.docHeight)t=this.points.length-1;else if(e<this.points[0])t=void 0;else{var i=this.scrollPos<e,n=this,o=this.points.filter(function(t,o){return i?t-n.options.offset<=e:t-n.options.offset-n.options.threshold<=e});t=o.length?o.length-1:0}if(this.$active.removeClass(this.options.activeClass),this.$active=this.$links.filter('[href="#'+this.$targets.eq(t).data("magellan-target")+'"]').addClass(this.options.activeClass),this.options.deepLinking){var s="";void 0!=t&&(s=this.$active[0].getAttribute("href")),s!==window.location.hash&&(window.history.pushState?window.history.pushState(null,null,s):window.location.hash=s)}this.scrollPos=e,this.$element.trigger("update.zf.magellan",[this.$active])}}},{key:"_destroy",value:function(){if(this.$element.off(".zf.trigger .zf.magellan").find("."+this.options.activeClass).removeClass(this.options.activeClass),this.options.deepLinking){var t=this.$active[0].getAttribute("href");window.location.hash.replace(t,"")}r()(window).off("popstate",this._deepLinkScroll)}}]),e}(u.a);d.defaults={animationDuration:500,animationEasing:"linear",threshold:50,activeClass:"is-active",deepLinking:!1,offset:0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return p});var a=i(0),r=i.n(a),l=i(4),u=i(3),c=i(1),h=i(2),d=i(5),f=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),f(e,[{key:"_setup",value:function(t,i){var n=this;this.className="OffCanvas",this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.contentClasses={base:[],reveal:[]},this.$lastTrigger=r()(),this.$triggers=r()(),this.position="left",this.$content=r()(),this.nested=!!this.options.nested,r()(["push","overlap"]).each(function(t,e){n.contentClasses.base.push("has-transition-"+e)}),r()(["left","right","top","bottom"]).each(function(t,e){n.contentClasses.base.push("has-position-"+e),n.contentClasses.reveal.push("has-reveal-"+e)}),d.a.init(r.a),u.a._init(),this._init(),this._events(),l.a.register("OffCanvas",{ESCAPE:"close"})}},{key:"_init",value:function(){var t=this.$element.attr("id");if(this.$element.attr("aria-hidden","true"),this.options.contentId?this.$content=r()("#"+this.options.contentId):this.$element.siblings("[data-off-canvas-content]").length?this.$content=this.$element.siblings("[data-off-canvas-content]").first():this.$content=this.$element.closest("[data-off-canvas-content]").first(),this.options.contentId?this.options.contentId&&null===this.options.nested&&console.warn("Remember to use the nested option if using the content ID option!"):this.nested=0===this.$element.siblings("[data-off-canvas-content]").length,this.nested===!0&&(this.options.transition="overlap",this.$element.removeClass("is-transition-push")),this.$element.addClass("is-transition-"+this.options.transition+" is-closed"),this.$triggers=r()(document).find('[data-open="'+t+'"], [data-close="'+t+'"], [data-toggle="'+t+'"]').attr("aria-expanded","false").attr("aria-controls",t),this.position=this.$element.is(".position-left, .position-top, .position-right, .position-bottom")?this.$element.attr("class").match(/position\-(left|top|right|bottom)/)[1]:this.position,this.options.contentOverlay===!0){var e=document.createElement("div"),i="fixed"===r()(this.$element).css("position")?"is-overlay-fixed":"is-overlay-absolute";e.setAttribute("class","js-off-canvas-overlay "+i),this.$overlay=r()(e),"is-overlay-fixed"===i?r()(this.$overlay).insertAfter(this.$element):this.$content.append(this.$overlay)}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,"g").test(this.$element[0].className),this.options.isRevealed===!0&&(this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split("-")[2],this._setMQChecker()),this.options.transitionTime&&this.$element.css("transition-duration",this.options.transitionTime),this._removeContentClasses()}},{key:"_events",value:function(){if(this.$element.off(".zf.trigger .zf.offcanvas").on({"open.zf.trigger":this.open.bind(this),"close.zf.trigger":this.close.bind(this),"toggle.zf.trigger":this.toggle.bind(this),"keydown.zf.offcanvas":this._handleKeyboard.bind(this)}),this.options.closeOnClick===!0){var t=this.options.contentOverlay?this.$overlay:this.$content;t.on({"click.zf.offcanvas":this.close.bind(this)})}}},{key:"_setMQChecker",value:function(){var t=this;r()(window).on("changed.zf.mediaquery",function(){u.a.atLeast(t.options.revealOn)?t.reveal(!0):t.reveal(!1)}).one("load.zf.offcanvas",function(){u.a.atLeast(t.options.revealOn)&&t.reveal(!0)})}},{key:"_removeContentClasses",value:function(t){"boolean"!=typeof t?this.$content.removeClass(this.contentClasses.base.join(" ")):t===!1&&this.$content.removeClass("has-reveal-"+this.position)}},{key:"_addContentClasses",value:function(t){this._removeContentClasses(t),"boolean"!=typeof t?this.$content.addClass("has-transition-"+this.options.transition+" has-position-"+this.position):t===!0&&this.$content.addClass("has-reveal-"+this.position)}},{key:"reveal",value:function(t){t?(this.close(),this.isRevealed=!0,this.$element.attr("aria-hidden","false"),this.$element.off("open.zf.trigger toggle.zf.trigger"),this.$element.removeClass("is-closed")):(this.isRevealed=!1,this.$element.attr("aria-hidden","true"),this.$element.off("open.zf.trigger toggle.zf.trigger").on({"open.zf.trigger":this.open.bind(this),"toggle.zf.trigger":this.toggle.bind(this)}),this.$element.addClass("is-closed")),this._addContentClasses(t)}},{key:"_stopScrolling",value:function(t){return!1}},{key:"_recordScrollable",value:function(t){var e=this;e.scrollHeight!==e.clientHeight&&(0===e.scrollTop&&(e.scrollTop=1),e.scrollTop===e.scrollHeight-e.clientHeight&&(e.scrollTop=e.scrollHeight-e.clientHeight-1)),e.allowUp=e.scrollTop>0,e.allowDown=e.scrollTop<e.scrollHeight-e.clientHeight,e.lastY=t.originalEvent.pageY}},{key:"_stopScrollPropagation",value:function(t){var e=this,i=t.pageY<e.lastY,n=!i;e.lastY=t.pageY,i&&e.allowUp||n&&e.allowDown?t.stopPropagation():t.preventDefault()}},{key:"open",value:function(t,e){if(!this.$element.hasClass("is-open")&&!this.isRevealed){var n=this;e&&(this.$lastTrigger=e),"top"===this.options.forceTo?window.scrollTo(0,0):"bottom"===this.options.forceTo&&window.scrollTo(0,document.body.scrollHeight),this.options.transitionTime&&"overlap"!==this.options.transition?this.$element.siblings("[data-off-canvas-content]").css("transition-duration",this.options.transitionTime):this.$element.siblings("[data-off-canvas-content]").css("transition-duration",""),this.$element.addClass("is-open").removeClass("is-closed"),this.$triggers.attr("aria-expanded","true"),this.$element.attr("aria-hidden","false").trigger("opened.zf.offcanvas"),
this.$content.addClass("is-open-"+this.position),this.options.contentScroll===!1&&(r()("body").addClass("is-off-canvas-open").on("touchmove",this._stopScrolling),this.$element.on("touchstart",this._recordScrollable),this.$element.on("touchmove",this._stopScrollPropagation)),this.options.contentOverlay===!0&&this.$overlay.addClass("is-visible"),this.options.closeOnClick===!0&&this.options.contentOverlay===!0&&this.$overlay.addClass("is-closable"),this.options.autoFocus===!0&&this.$element.one(i.i(c.b)(this.$element),function(){if(n.$element.hasClass("is-open")){var t=n.$element.find("[data-autofocus]");t.length?t.eq(0).focus():n.$element.find("a, button").eq(0).focus()}}),this.options.trapFocus===!0&&(this.$content.attr("tabindex","-1"),l.a.trapFocus(this.$element)),this._addContentClasses()}}},{key:"close",value:function(t){if(this.$element.hasClass("is-open")&&!this.isRevealed){var e=this;this.$element.removeClass("is-open"),this.$element.attr("aria-hidden","true").trigger("closed.zf.offcanvas"),this.$content.removeClass("is-open-left is-open-top is-open-right is-open-bottom"),this.options.contentScroll===!1&&(r()("body").removeClass("is-off-canvas-open").off("touchmove",this._stopScrolling),this.$element.off("touchstart",this._recordScrollable),this.$element.off("touchmove",this._stopScrollPropagation)),this.options.contentOverlay===!0&&this.$overlay.removeClass("is-visible"),this.options.closeOnClick===!0&&this.options.contentOverlay===!0&&this.$overlay.removeClass("is-closable"),this.$triggers.attr("aria-expanded","false"),this.options.trapFocus===!0&&(this.$content.removeAttr("tabindex"),l.a.releaseFocus(this.$element)),this.$element.one(i.i(c.b)(this.$element),function(t){e.$element.addClass("is-closed"),e._removeContentClasses()})}}},{key:"toggle",value:function(t,e){this.$element.hasClass("is-open")?this.close(t,e):this.open(t,e)}},{key:"_handleKeyboard",value:function(t){var e=this;l.a.handleKey(t,"OffCanvas",{close:function(){return e.close(),e.$lastTrigger.focus(),!0},handled:function(){t.stopPropagation(),t.preventDefault()}})}},{key:"_destroy",value:function(){this.close(),this.$element.off(".zf.trigger .zf.offcanvas"),this.$overlay.off(".zf.offcanvas")}}]),e}(h.a);p.defaults={closeOnClick:!0,contentOverlay:!0,contentId:null,nested:null,contentScroll:!0,transitionTime:null,transition:"push",forceTo:null,isRevealed:!1,revealOn:null,autoFocus:!0,revealClass:"reveal-for-",trapFocus:!1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return g});var a=i(0),r=i.n(a),l=i(4),u=i(6),c=i(34),h=i(8),d=i(1),f=i(2),p=i(17),m=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),g=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),m(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Orbit",p.a.init(r.a),this._init(),l.a.register("Orbit",{ltr:{ARROW_RIGHT:"next",ARROW_LEFT:"previous"},rtl:{ARROW_LEFT:"next",ARROW_RIGHT:"previous"}})}},{key:"_init",value:function(){this._reset(),this.$wrapper=this.$element.find("."+this.options.containerClass),this.$slides=this.$element.find("."+this.options.slideClass);var t=this.$element.find("img"),e=this.$slides.filter(".is-active"),n=this.$element[0].id||i.i(d.a)(6,"orbit");this.$element.attr({"data-resize":n,id:n}),e.length||this.$slides.eq(0).addClass("is-active"),this.options.useMUI||this.$slides.addClass("no-motionui"),t.length?i.i(h.a)(t,this._prepareForOrbit.bind(this)):this._prepareForOrbit(),this.options.bullets&&this._loadBullets(),this._events(),this.options.autoPlay&&this.$slides.length>1&&this.geoSync(),this.options.accessible&&this.$wrapper.attr("tabindex",0)}},{key:"_loadBullets",value:function(){this.$bullets=this.$element.find("."+this.options.boxOfBullets).find("button")}},{key:"geoSync",value:function(){var t=this;this.timer=new c.a(this.$element,{duration:this.options.timerDelay,infinite:!1},function(){t.changeSlide(!0)}),this.timer.start()}},{key:"_prepareForOrbit",value:function(){this._setWrapperHeight()}},{key:"_setWrapperHeight",value:function(t){var e,i=0,n=0,o=this;this.$slides.each(function(){e=this.getBoundingClientRect().height,r()(this).attr("data-slide",n),/mui/g.test(r()(this)[0].className)||o.$slides.filter(".is-active")[0]===o.$slides.eq(n)[0]||r()(this).css({position:"relative",display:"none"}),i=e>i?e:i,n++}),n===this.$slides.length&&(this.$wrapper.css({height:i}),t&&t(i))}},{key:"_setSlideHeight",value:function(t){this.$slides.each(function(){r()(this).css("max-height",t)})}},{key:"_events",value:function(){var t=this;if(this.$element.off(".resizeme.zf.trigger").on({"resizeme.zf.trigger":this._prepareForOrbit.bind(this)}),this.$slides.length>1){if(this.options.swipe&&this.$slides.off("swipeleft.zf.orbit swiperight.zf.orbit").on("swipeleft.zf.orbit",function(e){e.preventDefault(),t.changeSlide(!0)}).on("swiperight.zf.orbit",function(e){e.preventDefault(),t.changeSlide(!1)}),this.options.autoPlay&&(this.$slides.on("click.zf.orbit",function(){t.$element.data("clickedOn",!t.$element.data("clickedOn")),t.timer[t.$element.data("clickedOn")?"pause":"start"]()}),this.options.pauseOnHover&&this.$element.on("mouseenter.zf.orbit",function(){t.timer.pause()}).on("mouseleave.zf.orbit",function(){t.$element.data("clickedOn")||t.timer.start()})),this.options.navButtons){var e=this.$element.find("."+this.options.nextClass+", ."+this.options.prevClass);e.attr("tabindex",0).on("click.zf.orbit touchend.zf.orbit",function(e){e.preventDefault(),t.changeSlide(r()(this).hasClass(t.options.nextClass))})}this.options.bullets&&this.$bullets.on("click.zf.orbit touchend.zf.orbit",function(){if(/is-active/g.test(this.className))return!1;var e=r()(this).data("slide"),i=e>t.$slides.filter(".is-active").data("slide"),n=t.$slides.eq(e);t.changeSlide(i,n,e)}),this.options.accessible&&this.$wrapper.add(this.$bullets).on("keydown.zf.orbit",function(e){l.a.handleKey(e,"Orbit",{next:function(){t.changeSlide(!0)},previous:function(){t.changeSlide(!1)},handled:function(){r()(e.target).is(t.$bullets)&&t.$bullets.filter(".is-active").focus()}})})}}},{key:"_reset",value:function(){"undefined"!=typeof this.$slides&&this.$slides.length>1&&(this.$element.off(".zf.orbit").find("*").off(".zf.orbit"),this.options.autoPlay&&this.timer.restart(),this.$slides.each(function(t){r()(t).removeClass("is-active is-active is-in").removeAttr("aria-live").hide()}),this.$slides.first().addClass("is-active").show(),this.$element.trigger("slidechange.zf.orbit",[this.$slides.first()]),this.options.bullets&&this._updateBullets(0))}},{key:"changeSlide",value:function(t,e,i){if(this.$slides){var n=this.$slides.filter(".is-active").eq(0);if(/mui/g.test(n[0].className))return!1;var o,s=this.$slides.first(),a=this.$slides.last(),r=t?"Right":"Left",l=t?"Left":"Right",c=this;o=e?e:t?this.options.infiniteWrap?n.next("."+this.options.slideClass).length?n.next("."+this.options.slideClass):s:n.next("."+this.options.slideClass):this.options.infiniteWrap?n.prev("."+this.options.slideClass).length?n.prev("."+this.options.slideClass):a:n.prev("."+this.options.slideClass),o.length&&(this.$element.trigger("beforeslidechange.zf.orbit",[n,o]),this.options.bullets&&(i=i||this.$slides.index(o),this._updateBullets(i)),this.options.useMUI&&!this.$element.is(":hidden")?(u.a.animateIn(o.addClass("is-active").css({position:"absolute",top:0}),this.options["animInFrom"+r],function(){o.css({position:"relative",display:"block"}).attr("aria-live","polite")}),u.a.animateOut(n.removeClass("is-active"),this.options["animOutTo"+l],function(){n.removeAttr("aria-live"),c.options.autoPlay&&!c.timer.isPaused&&c.timer.restart()})):(n.removeClass("is-active is-in").removeAttr("aria-live").hide(),o.addClass("is-active is-in").attr("aria-live","polite").show(),this.options.autoPlay&&!this.timer.isPaused&&this.timer.restart()),this.$element.trigger("slidechange.zf.orbit",[o]))}}},{key:"_updateBullets",value:function(t){var e=this.$element.find("."+this.options.boxOfBullets).find(".is-active").removeClass("is-active").blur(),i=e.find("span:last").detach();this.$bullets.eq(t).addClass("is-active").append(i)}},{key:"_destroy",value:function(){this.$element.off(".zf.orbit").find("*").off(".zf.orbit").end().hide()}}]),e}(f.a);g.defaults={bullets:!0,navButtons:!0,animInFromRight:"slide-in-right",animOutToRight:"slide-out-right",animInFromLeft:"slide-in-left",animOutToLeft:"slide-out-left",autoPlay:!0,timerDelay:5e3,infiniteWrap:!0,swipe:!0,pauseOnHover:!0,accessible:!0,containerClass:"orbit-container",slideClass:"orbit-slide",boxOfBullets:"orbit-bullets",nextClass:"orbit-next",prevClass:"orbit-previous",useMUI:!0}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return m});var a=i(0),r=i.n(a),l=i(3),u=i(1),c=i(2),h=i(10),d=i(15),f=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p={tabs:{cssClass:"tabs",plugin:d.a},accordion:{cssClass:"accordion",plugin:h.a}},m=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),f(e,[{key:"_setup",value:function(t,e){this.$element=r()(t),this.options=r.a.extend({},this.$element.data(),e),this.rules=this.$element.data("responsive-accordion-tabs"),this.currentMq=null,this.currentPlugin=null,this.className="ResponsiveAccordionTabs",this.$element.attr("id")||this.$element.attr("id",i.i(u.a)(6,"responsiveaccordiontabs")),this._init(),this._events()}},{key:"_init",value:function(){if(l.a._init(),"string"==typeof this.rules){for(var t={},e=this.rules.split(" "),i=0;i<e.length;i++){var n=e[i].split("-"),o=n.length>1?n[0]:"small",s=n.length>1?n[1]:n[0];null!==p[s]&&(t[o]=p[s])}this.rules=t}this._getAllOptions(),r.a.isEmptyObject(this.rules)||this._checkMediaQueries()}},{key:"_getAllOptions",value:function(){var t=this;t.allOptions={};for(var e in p)if(p.hasOwnProperty(e)){var i=p[e];try{var n=r()("<ul></ul>"),o=new i.plugin(n,t.options);for(var s in o.options)if(o.options.hasOwnProperty(s)&&"zfPlugin"!==s){var a=o.options[s];t.allOptions[s]=a}o.destroy()}catch(l){}}}},{key:"_events",value:function(){var t=this;r()(window).on("changed.zf.mediaquery",function(){t._checkMediaQueries()})}},{key:"_checkMediaQueries",value:function(){var t,e=this;r.a.each(this.rules,function(e){l.a.atLeast(e)&&(t=e)}),t&&(this.currentPlugin instanceof this.rules[t].plugin||(r.a.each(p,function(t,i){e.$element.removeClass(i.cssClass)}),this.$element.addClass(this.rules[t].cssClass),this.currentPlugin&&(!this.currentPlugin.$element.data("zfPlugin")&&this.storezfData&&this.currentPlugin.$element.data("zfPlugin",this.storezfData),this.currentPlugin.destroy()),this._handleMarkup(this.rules[t].cssClass),this.currentPlugin=new this.rules[t].plugin(this.$element,{}),this.storezfData=this.currentPlugin.$element.data("zfPlugin")))}},{key:"_handleMarkup",value:function(t){var e=this,n="accordion",o=r()("[data-tabs-content="+this.$element.attr("id")+"]");if(o.length&&(n="tabs"),n!==t){var s=e.allOptions.linkClass?e.allOptions.linkClass:"tabs-title",a=e.allOptions.panelClass?e.allOptions.panelClass:"tabs-panel";this.$element.removeAttr("role");var l=this.$element.children("."+s+",[data-accordion-item]").removeClass(s).removeClass("accordion-item").removeAttr("data-accordion-item"),c=l.children("a").removeClass("accordion-title");if("tabs"===n?(o=o.children("."+a).removeClass(a).removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby"),o.children("a").removeAttr("role").removeAttr("aria-controls").removeAttr("aria-selected")):o=l.children("[data-tab-content]").removeClass("accordion-content"),o.css({display:"",visibility:""}),l.css({display:"",visibility:""}),"accordion"===t)o.each(function(t,i){r()(i).appendTo(l.get(t)).addClass("accordion-content").attr("data-tab-content","").removeClass("is-active").css({height:""}),r()("[data-tabs-content="+e.$element.attr("id")+"]").after('<div id="tabs-placeholder-'+e.$element.attr("id")+'"></div>').detach(),l.addClass("accordion-item").attr("data-accordion-item",""),c.addClass("accordion-title")});else if("tabs"===t){var h=r()("[data-tabs-content="+e.$element.attr("id")+"]"),d=r()("#tabs-placeholder-"+e.$element.attr("id"));d.length?(h=r()('<div class="tabs-content"></div>').insertAfter(d).attr("data-tabs-content",e.$element.attr("id")),d.remove()):h=r()('<div class="tabs-content"></div>').insertAfter(e.$element).attr("data-tabs-content",e.$element.attr("id")),o.each(function(t,e){var n=r()(e).appendTo(h).addClass(a),o=c.get(t).hash.slice(1),s=r()(e).attr("id")||i.i(u.a)(6,"accordion");o!==s&&(""!==o?r()(e).attr("id",o):(o=s,r()(e).attr("id",o),r()(c.get(t)).attr("href",r()(c.get(t)).attr("href").replace("#","")+"#"+o)));var d=r()(l.get(t)).hasClass("is-active");d&&n.addClass("is-active")}),l.addClass(s)}}}},{key:"_destroy",value:function(){this.currentPlugin&&this.currentPlugin.destroy(),r()(window).off(".zf.ResponsiveAccordionTabs")}}]),e}(c.a);m.defaults={}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return g});var a=i(0),r=i.n(a),l=i(3),u=i(1),c=i(2),h=i(13),d=i(12),f=i(11),p=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),m={dropdown:{cssClass:"dropdown",plugin:h.a},drilldown:{cssClass:"drilldown",plugin:d.a},accordion:{cssClass:"accordion-menu",plugin:f.a}},g=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),p(e,[{key:"_setup",value:function(t,e){this.$element=r()(t),this.rules=this.$element.data("responsive-menu"),this.currentMq=null,this.currentPlugin=null,this.className="ResponsiveMenu",this._init(),this._events()}},{key:"_init",value:function(){if(l.a._init(),"string"==typeof this.rules){for(var t={},e=this.rules.split(" "),n=0;n<e.length;n++){var o=e[n].split("-"),s=o.length>1?o[0]:"small",a=o.length>1?o[1]:o[0];null!==m[a]&&(t[s]=m[a])}this.rules=t}r.a.isEmptyObject(this.rules)||this._checkMediaQueries(),this.$element.attr("data-mutate",this.$element.attr("data-mutate")||i.i(u.a)(6,"responsive-menu"))}},{key:"_events",value:function(){var t=this;r()(window).on("changed.zf.mediaquery",function(){t._checkMediaQueries()})}},{key:"_checkMediaQueries",value:function(){var t,e=this;r.a.each(this.rules,function(e){l.a.atLeast(e)&&(t=e)}),t&&(this.currentPlugin instanceof this.rules[t].plugin||(r.a.each(m,function(t,i){e.$element.removeClass(i.cssClass)}),this.$element.addClass(this.rules[t].cssClass),this.currentPlugin&&this.currentPlugin.destroy(),this.currentPlugin=new this.rules[t].plugin(this.$element,{})))}},{key:"_destroy",value:function(){this.currentPlugin.destroy(),r()(window).off(".zf.ResponsiveMenu")}}]),e}(c.a);g.defaults={}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(3),u=i(6),c=i(2),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=r()(t),this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="ResponsiveToggle",this._init(),this._events()}},{key:"_init",value:function(){l.a._init();var t=this.$element.data("responsive-toggle");if(t||console.error("Your tab bar needs an ID of a Menu as the value of data-tab-bar."),this.$targetMenu=r()("#"+t),this.$toggler=this.$element.find("[data-toggle]").filter(function(){var e=r()(this).data("toggle");return e===t||""===e}),this.options=r.a.extend({},this.options,this.$targetMenu.data()),this.options.animate){var e=this.options.animate.split(" ");this.animationIn=e[0],this.animationOut=e[1]||null}this._update()}},{key:"_events",value:function(){this._updateMqHandler=this._update.bind(this),r()(window).on("changed.zf.mediaquery",this._updateMqHandler),this.$toggler.on("click.zf.responsiveToggle",this.toggleMenu.bind(this))}},{key:"_update",value:function(){l.a.atLeast(this.options.hideFor)?(this.$element.hide(),this.$targetMenu.show()):(this.$element.show(),this.$targetMenu.hide())}},{key:"toggleMenu",value:function(){var t=this;l.a.atLeast(this.options.hideFor)||(this.options.animate?this.$targetMenu.is(":hidden")?u.a.animateIn(this.$targetMenu,this.animationIn,function(){t.$element.trigger("toggled.zf.responsiveToggle"),t.$targetMenu.find("[data-mutate]").triggerHandler("mutateme.zf.trigger")}):u.a.animateOut(this.$targetMenu,this.animationOut,function(){t.$element.trigger("toggled.zf.responsiveToggle")}):(this.$targetMenu.toggle(0),this.$targetMenu.find("[data-mutate]").trigger("mutateme.zf.trigger"),this.$element.trigger("toggled.zf.responsiveToggle")))}},{key:"_destroy",value:function(){this.$element.off(".zf.responsiveToggle"),this.$toggler.off(".zf.responsiveToggle"),r()(window).off("changed.zf.mediaquery",this._updateMqHandler)}}]),e}(c.a);d.defaults={hideFor:"medium",animate:!1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(){return/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)}function r(){return/Android/.test(window.navigator.userAgent)}function l(){return a()||r()}i.d(e,"a",function(){return v});var u=i(0),c=i.n(u),h=i(4),d=i(3),f=i(6),p=i(2),m=i(5),g=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),v=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),g(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=c.a.extend({},e.defaults,this.$element.data(),i),this.className="Reveal",this._init(),m.a.init(c.a),h.a.register("Reveal",{ESCAPE:"close"})}},{key:"_init",value:function(){d.a._init(),this.id=this.$element.attr("id"),this.isActive=!1,this.cached={mq:d.a.current},this.isMobile=l(),this.$anchor=c()('[data-open="'+this.id+'"]').length?c()('[data-open="'+this.id+'"]'):c()('[data-toggle="'+this.id+'"]'),this.$anchor.attr({"aria-controls":this.id,"aria-haspopup":!0,tabindex:0}),(this.options.fullScreen||this.$element.hasClass("full"))&&(this.options.fullScreen=!0,this.options.overlay=!1),this.options.overlay&&!this.$overlay&&(this.$overlay=this._makeOverlay(this.id)),this.$element.attr({role:"dialog","aria-hidden":!0,"data-yeti-box":this.id,"data-resize":this.id}),this.$overlay?this.$element.detach().appendTo(this.$overlay):(this.$element.detach().appendTo(c()(this.options.appendTo)),this.$element.addClass("without-overlay")),this._events(),this.options.deepLink&&window.location.hash==="#"+this.id&&c()(window).one("load.zf.reveal",this.open.bind(this))}},{key:"_makeOverlay",value:function(){var t="";return this.options.additionalOverlayClasses&&(t=" "+this.options.additionalOverlayClasses),c()("<div></div>").addClass("reveal-overlay"+t).appendTo(this.options.appendTo)}},{key:"_updatePosition",value:function(){var t,e,i=this.$element.outerWidth(),n=c()(window).width(),o=this.$element.outerHeight(),s=c()(window).height();t="auto"===this.options.hOffset?parseInt((n-i)/2,10):parseInt(this.options.hOffset,10),e="auto"===this.options.vOffset?o>s?parseInt(Math.min(100,s/10),10):parseInt((s-o)/4,10):parseInt(this.options.vOffset,10),this.$element.css({top:e+"px"}),this.$overlay&&"auto"===this.options.hOffset||(this.$element.css({left:t+"px"}),this.$element.css({margin:"0px"}))}},{key:"_events",value:function(){var t=this,e=this;this.$element.on({"open.zf.trigger":this.open.bind(this),"close.zf.trigger":function(i,n){if(i.target===e.$element[0]||c()(i.target).parents("[data-closable]")[0]===n)return t.close.apply(t)},"toggle.zf.trigger":this.toggle.bind(this),"resizeme.zf.trigger":function(){e._updatePosition()}}),this.options.closeOnClick&&this.options.overlay&&this.$overlay.off(".zf.reveal").on("click.zf.reveal",function(t){t.target!==e.$element[0]&&!c.a.contains(e.$element[0],t.target)&&c.a.contains(document,t.target)&&e.close()}),this.options.deepLink&&c()(window).on("popstate.zf.reveal:"+this.id,this._handleState.bind(this))}},{key:"_handleState",value:function(t){window.location.hash!=="#"+this.id||this.isActive?this.close():this.open()}},{key:"open",value:function(){function t(){n.isMobile?(n.originalScrollPos||(n.originalScrollPos=window.pageYOffset),c()("html, body").addClass("is-reveal-open")):c()("body").addClass("is-reveal-open")}var e=this;if(this.options.deepLink){var i="#"+this.id;window.history.pushState?this.options.updateHistory?window.history.pushState({},"",i):window.history.replaceState({},"",i):window.location.hash=i}this.isActive=!0,this.$element.css({visibility:"hidden"}).show().scrollTop(0),this.options.overlay&&this.$overlay.css({visibility:"hidden"}).show(),this._updatePosition(),this.$element.hide().css({visibility:""}),this.$overlay&&(this.$overlay.css({visibility:""}).hide(),this.$element.hasClass("fast")?this.$overlay.addClass("fast"):this.$element.hasClass("slow")&&this.$overlay.addClass("slow")),this.options.multipleOpened||this.$element.trigger("closeme.zf.reveal",this.id);var n=this;this.options.animationIn?!function(){var i=function(){n.$element.attr({"aria-hidden":!1,tabindex:-1}).focus(),t(),h.a.trapFocus(n.$element)};e.options.overlay&&f.a.animateIn(e.$overlay,"fade-in"),f.a.animateIn(e.$element,e.options.animationIn,function(){e.$element&&(e.focusableElements=h.a.findFocusable(e.$element),i())})}():(this.options.overlay&&this.$overlay.show(0),this.$element.show(this.options.showDelay)),this.$element.attr({"aria-hidden":!1,tabindex:-1}).focus(),h.a.trapFocus(this.$element),t(),this._extraHandlers(),this.$element.trigger("open.zf.reveal")}},{key:"_extraHandlers",value:function(){var t=this;this.$element&&(this.focusableElements=h.a.findFocusable(this.$element),this.options.overlay||!this.options.closeOnClick||this.options.fullScreen||c()("body").on("click.zf.reveal",function(e){e.target!==t.$element[0]&&!c.a.contains(t.$element[0],e.target)&&c.a.contains(document,e.target)&&t.close()}),this.options.closeOnEsc&&c()(window).on("keydown.zf.reveal",function(e){h.a.handleKey(e,"Reveal",{close:function(){t.options.closeOnEsc&&t.close()}})}))}},{key:"close",value:function(){function t(){e.isMobile?(0===c()(".reveal:visible").length&&c()("html, body").removeClass("is-reveal-open"),e.originalScrollPos&&(c()("body").scrollTop(e.originalScrollPos),e.originalScrollPos=null)):0===c()(".reveal:visible").length&&c()("body").removeClass("is-reveal-open"),h.a.releaseFocus(e.$element),e.$element.attr("aria-hidden",!0),e.$element.trigger("closed.zf.reveal")}if(!this.isActive||!this.$element.is(":visible"))return!1;var e=this;this.options.animationOut?(this.options.overlay&&f.a.animateOut(this.$overlay,"fade-out"),f.a.animateOut(this.$element,this.options.animationOut,t)):(this.$element.hide(this.options.hideDelay),this.options.overlay?this.$overlay.hide(0,t):t()),this.options.closeOnEsc&&c()(window).off("keydown.zf.reveal"),!this.options.overlay&&this.options.closeOnClick&&c()("body").off("click.zf.reveal"),this.$element.off("keydown.zf.reveal"),this.options.resetOnClose&&this.$element.html(this.$element.html()),this.isActive=!1,e.options.deepLink&&(window.history.replaceState?window.history.replaceState("",document.title,window.location.href.replace("#"+this.id,"")):window.location.hash=""),this.$anchor.focus()}},{key:"toggle",value:function(){this.isActive?this.close():this.open()}},{key:"_destroy",value:function(){this.options.overlay&&(this.$element.appendTo(c()(this.options.appendTo)),this.$overlay.hide().off().remove()),this.$element.hide().off(),this.$anchor.off(".zf"),c()(window).off(".zf.reveal:"+this.id)}}]),e}(p.a);v.defaults={animationIn:"",animationOut:"",showDelay:0,hideDelay:0,closeOnClick:!0,closeOnEsc:!0,multipleOpened:!1,vOffset:"auto",hOffset:"auto",fullScreen:!1,btmOffsetPct:10,overlay:!0,resetOnClose:!1,deepLink:!1,updateHistory:!1,appendTo:"body",additionalOverlayClasses:""}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){return t/e}function r(t,e,i,n){return Math.abs(t.position()[e]+t[n]()/2-i)}function l(t,e){return Math.log(e)/Math.log(t)}i.d(e,"a",function(){return y});var u=i(0),c=i.n(u),h=i(4),d=i(6),f=i(1),p=i(2),m=i(17),g=i(5),v=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),y=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),v(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=c.a.extend({},e.defaults,this.$element.data(),i),this.className="Slider",m.a.init(c.a),g.a.init(c.a),this._init(),h.a.register("Slider",{ltr:{ARROW_RIGHT:"increase",ARROW_UP:"increase",ARROW_DOWN:"decrease",ARROW_LEFT:"decrease",SHIFT_ARROW_RIGHT:"increase_fast",SHIFT_ARROW_UP:"increase_fast",SHIFT_ARROW_DOWN:"decrease_fast",SHIFT_ARROW_LEFT:"decrease_fast",HOME:"min",END:"max"},rtl:{ARROW_LEFT:"increase",ARROW_RIGHT:"decrease",SHIFT_ARROW_LEFT:"increase_fast",SHIFT_ARROW_RIGHT:"decrease_fast"}})}},{key:"_init",value:function(){this.inputs=this.$element.find("input"),this.handles=this.$element.find("[data-slider-handle]"),this.$handle=this.handles.eq(0),this.$input=this.inputs.length?this.inputs.eq(0):c()("#"+this.$handle.attr("aria-controls")),this.$fill=this.$element.find("[data-slider-fill]").css(this.options.vertical?"height":"width",0);var t=!1;(this.options.disabled||this.$element.hasClass(this.options.disabledClass))&&(this.options.disabled=!0,this.$element.addClass(this.options.disabledClass)),this.inputs.length||(this.inputs=c()().add(this.$input),this.options.binding=!0),this._setInitAttr(0),this.handles[1]&&(this.options.doubleSided=!0,this.$handle2=this.handles.eq(1),this.$input2=this.inputs.length>1?this.inputs.eq(1):c()("#"+this.$handle2.attr("aria-controls")),this.inputs[1]||(this.inputs=this.inputs.add(this.$input2)),t=!0,this._setInitAttr(1)),this.setHandles(),this._events()}},{key:"setHandles",value:function(){var t=this;this.handles[1]?this._setHandlePos(this.$handle,this.inputs.eq(0).val(),!0,function(){t._setHandlePos(t.$handle2,t.inputs.eq(1).val(),!0)}):this._setHandlePos(this.$handle,this.inputs.eq(0).val(),!0)}},{key:"_reflow",value:function(){this.setHandles()}},{key:"_pctOfBar",value:function(t){var e=a(t-this.options.start,this.options.end-this.options.start);switch(this.options.positionValueFunction){case"pow":e=this._logTransform(e);break;case"log":e=this._powTransform(e)}return e.toFixed(2)}},{key:"_value",value:function(t){switch(this.options.positionValueFunction){case"pow":t=this._powTransform(t);break;case"log":t=this._logTransform(t)}var e=(this.options.end-this.options.start)*t+this.options.start;return e}},{key:"_logTransform",value:function(t){return l(this.options.nonLinearBase,t*(this.options.nonLinearBase-1)+1)}},{key:"_powTransform",value:function(t){return(Math.pow(this.options.nonLinearBase,t)-1)/(this.options.nonLinearBase-1)}},{key:"_setHandlePos",value:function(t,e,n,o){if(!this.$element.hasClass(this.options.disabledClass)){e=parseFloat(e),e<this.options.start?e=this.options.start:e>this.options.end&&(e=this.options.end);var s=this.options.doubleSided;if(this.options.vertical&&!n&&(e=this.options.end-e),s)if(0===this.handles.index(t)){var r=parseFloat(this.$handle2.attr("aria-valuenow"));e=e>=r?r-this.options.step:e}else{var l=parseFloat(this.$handle.attr("aria-valuenow"));e=e<=l?l+this.options.step:e}var u=this,c=this.options.vertical,h=c?"height":"width",f=c?"top":"left",p=t[0].getBoundingClientRect()[h],m=this.$element[0].getBoundingClientRect()[h],g=this._pctOfBar(e),v=(m-p)*g,y=(100*a(v,m)).toFixed(this.options.decimal);e=parseFloat(e.toFixed(this.options.decimal));var b={};if(this._setValues(t,e),s){var w,_=0===this.handles.index(t),$=~~(100*a(p,m));
if(_)b[f]=y+"%",w=parseFloat(this.$handle2[0].style[f])-y+$,o&&"function"==typeof o&&o();else{var k=parseFloat(this.$handle[0].style[f]);w=y-(isNaN(k)?(this.options.initialStart-this.options.start)/((this.options.end-this.options.start)/100):k)+$}b["min-"+h]=w+"%"}this.$element.one("finished.zf.animate",function(){u.$element.trigger("moved.zf.slider",[t])});var C=this.$element.data("dragging")?1e3/60:this.options.moveTime;i.i(d.b)(C,t,function(){isNaN(y)?t.css(f,100*g+"%"):t.css(f,y+"%"),u.options.doubleSided?u.$fill.css(b):u.$fill.css(h,100*g+"%")}),clearTimeout(u.timeout),u.timeout=setTimeout(function(){u.$element.trigger("changed.zf.slider",[t])},u.options.changedDelay)}}},{key:"_setInitAttr",value:function(t){var e=0===t?this.options.initialStart:this.options.initialEnd,n=this.inputs.eq(t).attr("id")||i.i(f.a)(6,"slider");this.inputs.eq(t).attr({id:n,max:this.options.end,min:this.options.start,step:this.options.step}),this.inputs.eq(t).val(e),this.handles.eq(t).attr({role:"slider","aria-controls":n,"aria-valuemax":this.options.end,"aria-valuemin":this.options.start,"aria-valuenow":e,"aria-orientation":this.options.vertical?"vertical":"horizontal",tabindex:0})}},{key:"_setValues",value:function(t,e){var i=this.options.doubleSided?this.handles.index(t):0;this.inputs.eq(i).val(e),t.attr("aria-valuenow",e)}},{key:"_handleEvent",value:function(t,e,n){var o,s;if(n)o=this._adjustValue(null,n),s=!0;else{t.preventDefault();var l=this,u=this.options.vertical,h=u?"height":"width",d=u?"top":"left",p=u?t.pageY:t.pageX,m=(this.$handle[0].getBoundingClientRect()[h]/2,this.$element[0].getBoundingClientRect()[h]),g=u?c()(window).scrollTop():c()(window).scrollLeft(),v=this.$element.offset()[d];t.clientY===t.pageY&&(p+=g);var y,b=p-v;y=b<0?0:b>m?m:b;var w=a(y,m);if(o=this._value(w),i.i(f.c)()&&!this.options.vertical&&(o=this.options.end-o),o=l._adjustValue(null,o),s=!1,!e){var _=r(this.$handle,d,y,h),$=r(this.$handle2,d,y,h);e=_<=$?this.$handle:this.$handle2}}this._setHandlePos(e,o,s)}},{key:"_adjustValue",value:function(t,e){var i,n,o,s,a=this.options.step,r=parseFloat(a/2);return i=t?parseFloat(t.attr("aria-valuenow")):e,n=i%a,o=i-n,s=o+a,0===n?i:i=i>=o+r?s:o}},{key:"_events",value:function(){this._eventsForHandle(this.$handle),this.handles[1]&&this._eventsForHandle(this.$handle2)}},{key:"_eventsForHandle",value:function(t){var e,i=this;if(this.inputs.off("change.zf.slider").on("change.zf.slider",function(t){var e=i.inputs.index(c()(this));i._handleEvent(t,i.handles.eq(e),c()(this).val())}),this.options.clickSelect&&this.$element.off("click.zf.slider").on("click.zf.slider",function(t){return!i.$element.data("dragging")&&void(c()(t.target).is("[data-slider-handle]")||(i.options.doubleSided?i._handleEvent(t):i._handleEvent(t,i.$handle)))}),this.options.draggable){this.handles.addTouch();var n=c()("body");t.off("mousedown.zf.slider").on("mousedown.zf.slider",function(o){t.addClass("is-dragging"),i.$fill.addClass("is-dragging"),i.$element.data("dragging",!0),e=c()(o.currentTarget),n.on("mousemove.zf.slider",function(t){t.preventDefault(),i._handleEvent(t,e)}).on("mouseup.zf.slider",function(o){i._handleEvent(o,e),t.removeClass("is-dragging"),i.$fill.removeClass("is-dragging"),i.$element.data("dragging",!1),n.off("mousemove.zf.slider mouseup.zf.slider")})}).on("selectstart.zf.slider touchmove.zf.slider",function(t){t.preventDefault()})}t.off("keydown.zf.slider").on("keydown.zf.slider",function(t){var e,n=c()(this),o=i.options.doubleSided?i.handles.index(n):0,s=parseFloat(i.inputs.eq(o).val());h.a.handleKey(t,"Slider",{decrease:function(){e=s-i.options.step},increase:function(){e=s+i.options.step},decrease_fast:function(){e=s-10*i.options.step},increase_fast:function(){e=s+10*i.options.step},min:function(){e=i.options.start},max:function(){e=i.options.end},handled:function(){t.preventDefault(),i._setHandlePos(n,e,!0)}})})}},{key:"_destroy",value:function(){this.handles.off(".zf.slider"),this.inputs.off(".zf.slider"),this.$element.off(".zf.slider"),clearTimeout(this.timeout)}}]),e}(p.a);y.defaults={start:0,end:100,step:1,initialStart:0,initialEnd:100,binding:!1,clickSelect:!0,vertical:!1,draggable:!0,disabled:!1,doubleSided:!1,decimal:2,moveTime:200,disabledClass:"disabled",invertVertical:!1,changedDelay:500,nonLinearBase:5,positionValueFunction:"linear"}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return parseInt(window.getComputedStyle(document.body,null).fontSize,10)*t}i.d(e,"a",function(){return p});var r=i(0),l=i.n(r),u=i(1),c=i(3),h=i(2),d=i(5),f=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),f(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=l.a.extend({},e.defaults,this.$element.data(),i),this.className="Sticky",d.a.init(l.a),this._init()}},{key:"_init",value:function(){c.a._init();var t=this.$element.parent("[data-sticky-container]"),e=this.$element[0].id||i.i(u.a)(6,"sticky"),n=this;t.length?this.$container=t:(this.wasWrapped=!0,this.$element.wrap(this.options.container),this.$container=this.$element.parent()),this.$container.addClass(this.options.containerClass),this.$element.addClass(this.options.stickyClass).attr({"data-resize":e,"data-mutate":e}),""!==this.options.anchor&&l()("#"+n.options.anchor).attr({"data-mutate":e}),this.scrollCount=this.options.checkEvery,this.isStuck=!1,l()(window).one("load.zf.sticky",function(){n.containerHeight="none"==n.$element.css("display")?0:n.$element[0].getBoundingClientRect().height,n.$container.css("height",n.containerHeight),n.elemHeight=n.containerHeight,""!==n.options.anchor?n.$anchor=l()("#"+n.options.anchor):n._parsePoints(),n._setSizes(function(){var t=window.pageYOffset;n._calc(!1,t),n.isStuck||n._removeSticky(!(t>=n.topPoint))}),n._events(e.split("-").reverse().join("-"))})}},{key:"_parsePoints",value:function(){for(var t=""==this.options.topAnchor?1:this.options.topAnchor,e=""==this.options.btmAnchor?document.documentElement.scrollHeight:this.options.btmAnchor,i=[t,e],n={},o=0,s=i.length;o<s&&i[o];o++){var a;if("number"==typeof i[o])a=i[o];else{var r=i[o].split(":"),u=l()("#"+r[0]);a=u.offset().top,r[1]&&"bottom"===r[1].toLowerCase()&&(a+=u[0].getBoundingClientRect().height)}n[o]=a}this.points=n}},{key:"_events",value:function(t){var e=this,i=this.scrollListener="scroll.zf."+t;this.isOn||(this.canStick&&(this.isOn=!0,l()(window).off(i).on(i,function(t){0===e.scrollCount?(e.scrollCount=e.options.checkEvery,e._setSizes(function(){e._calc(!1,window.pageYOffset)})):(e.scrollCount--,e._calc(!1,window.pageYOffset))})),this.$element.off("resizeme.zf.trigger").on("resizeme.zf.trigger",function(i,n){e._eventsHandler(t)}),this.$element.on("mutateme.zf.trigger",function(i,n){e._eventsHandler(t)}),this.$anchor&&this.$anchor.on("mutateme.zf.trigger",function(i,n){e._eventsHandler(t)}))}},{key:"_eventsHandler",value:function(t){var e=this,i=this.scrollListener="scroll.zf."+t;e._setSizes(function(){e._calc(!1),e.canStick?e.isOn||e._events(t):e.isOn&&e._pauseListeners(i)})}},{key:"_pauseListeners",value:function(t){this.isOn=!1,l()(window).off(t),this.$element.trigger("pause.zf.sticky")}},{key:"_calc",value:function(t,e){return t&&this._setSizes(),this.canStick?(e||(e=window.pageYOffset),void(e>=this.topPoint?e<=this.bottomPoint?this.isStuck||this._setSticky():this.isStuck&&this._removeSticky(!1):this.isStuck&&this._removeSticky(!0))):(this.isStuck&&this._removeSticky(!0),!1)}},{key:"_setSticky",value:function(){var t=this,e=this.options.stickTo,i="top"===e?"marginTop":"marginBottom",n="top"===e?"bottom":"top",o={};o[i]=this.options[i]+"em",o[e]=0,o[n]="auto",this.isStuck=!0,this.$element.removeClass("is-anchored is-at-"+n).addClass("is-stuck is-at-"+e).css(o).trigger("sticky.zf.stuckto:"+e),this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",function(){t._setSizes()})}},{key:"_removeSticky",value:function(t){var e=this.options.stickTo,i="top"===e,n={},o=(this.points?this.points[1]-this.points[0]:this.anchorHeight)-this.elemHeight,s=i?"marginTop":"marginBottom",a=t?"top":"bottom";n[s]=0,n.bottom="auto",t?n.top=0:n.top=o,this.isStuck=!1,this.$element.removeClass("is-stuck is-at-"+e).addClass("is-anchored is-at-"+a).css(n).trigger("sticky.zf.unstuckfrom:"+a)}},{key:"_setSizes",value:function(t){this.canStick=c.a.is(this.options.stickyOn),this.canStick||t&&"function"==typeof t&&t();var e=this.$container[0].getBoundingClientRect().width,i=window.getComputedStyle(this.$container[0]),n=parseInt(i["padding-left"],10),o=parseInt(i["padding-right"],10);this.$anchor&&this.$anchor.length?this.anchorHeight=this.$anchor[0].getBoundingClientRect().height:this._parsePoints(),this.$element.css({"max-width":e-n-o+"px"});var s=this.$element[0].getBoundingClientRect().height||this.containerHeight;if("none"==this.$element.css("display")&&(s=0),this.containerHeight=s,this.$container.css({height:s}),this.elemHeight=s,!this.isStuck&&this.$element.hasClass("is-at-bottom")){var a=(this.points?this.points[1]-this.$container.offset().top:this.anchorHeight)-this.elemHeight;this.$element.css("top",a)}this._setBreakPoints(s,function(){t&&"function"==typeof t&&t()})}},{key:"_setBreakPoints",value:function(t,e){if(!this.canStick){if(!e||"function"!=typeof e)return!1;e()}var i=a(this.options.marginTop),n=a(this.options.marginBottom),o=this.points?this.points[0]:this.$anchor.offset().top,s=this.points?this.points[1]:o+this.anchorHeight,r=window.innerHeight;"top"===this.options.stickTo?(o-=i,s-=t+i):"bottom"===this.options.stickTo&&(o-=r-(t+n),s-=r-n),this.topPoint=o,this.bottomPoint=s,e&&"function"==typeof e&&e()}},{key:"_destroy",value:function(){this._removeSticky(!0),this.$element.removeClass(this.options.stickyClass+" is-anchored is-at-top").css({height:"",top:"",bottom:"","max-width":""}).off("resizeme.zf.trigger").off("mutateme.zf.trigger"),this.$anchor&&this.$anchor.length&&this.$anchor.off("change.zf.sticky"),l()(window).off(this.scrollListener),this.wasWrapped?this.$element.unwrap():this.$container.removeClass(this.options.containerClass).css({height:""})}}]),e}(h.a);p.defaults={container:"<div data-sticky-container></div>",stickTo:"top",anchor:"",topAnchor:"",btmAnchor:"",marginTop:1,marginBottom:1,stickyOn:"medium",stickyClass:"sticky",containerClass:"sticky-container",checkEvery:-1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return d});var a=i(0),r=i.n(a),l=i(6),u=i(2),c=i(5),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),h(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,t.data(),i),this.className="",this.className="Toggler",c.a.init(r.a),this._init(),this._events()}},{key:"_init",value:function(){var t;this.options.animate?(t=this.options.animate.split(" "),this.animationIn=t[0],this.animationOut=t[1]||null):(t=this.$element.data("toggler"),this.className="."===t[0]?t.slice(1):t);var e=this.$element[0].id;r()('[data-open="'+e+'"], [data-close="'+e+'"], [data-toggle="'+e+'"]').attr("aria-controls",e),this.$element.attr("aria-expanded",!this.$element.is(":hidden"))}},{key:"_events",value:function(){this.$element.off("toggle.zf.trigger").on("toggle.zf.trigger",this.toggle.bind(this))}},{key:"toggle",value:function(){this[this.options.animate?"_toggleAnimate":"_toggleClass"]()}},{key:"_toggleClass",value:function(){this.$element.toggleClass(this.className);var t=this.$element.hasClass(this.className);t?this.$element.trigger("on.zf.toggler"):this.$element.trigger("off.zf.toggler"),this._updateARIA(t),this.$element.find("[data-mutate]").trigger("mutateme.zf.trigger")}},{key:"_toggleAnimate",value:function(){var t=this;this.$element.is(":hidden")?l.a.animateIn(this.$element,this.animationIn,function(){t._updateARIA(!0),this.trigger("on.zf.toggler"),this.find("[data-mutate]").trigger("mutateme.zf.trigger")}):l.a.animateOut(this.$element,this.animationOut,function(){t._updateARIA(!1),this.trigger("off.zf.toggler"),this.find("[data-mutate]").trigger("mutateme.zf.trigger")})}},{key:"_updateARIA",value:function(t){this.$element.attr("aria-expanded",!!t)}},{key:"_destroy",value:function(){this.$element.off(".zf.toggler")}}]),e}(u.a);d.defaults={animate:!1}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}i.d(e,"a",function(){return p});var a=i(0),r=i.n(a),l=i(1),u=i(3),c=i(5),h=i(16),d=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),f=function m(t,e,i){null===t&&(t=Function.prototype);var n=Object.getOwnPropertyDescriptor(t,e);if(void 0===n){var o=Object.getPrototypeOf(t);return null===o?void 0:m(o,e,i)}if("value"in n)return n.value;var s=n.get;if(void 0!==s)return s.call(i)},p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return s(e,t),d(e,[{key:"_setup",value:function(t,i){this.$element=t,this.options=r.a.extend({},e.defaults,this.$element.data(),i),this.className="Tooltip",this.isActive=!1,this.isClick=!1,c.a.init(r.a),this._init()}},{key:"_init",value:function(){u.a._init();var t=this.$element.attr("aria-describedby")||i.i(l.a)(6,"tooltip");this.options.tipText=this.options.tipText||this.$element.attr("title"),this.template=this.options.template?r()(this.options.template):this._buildTemplate(t),this.options.allowHtml?this.template.appendTo(document.body).html(this.options.tipText).hide():this.template.appendTo(document.body).text(this.options.tipText).hide(),this.$element.attr({title:"","aria-describedby":t,"data-yeti-box":t,"data-toggle":t,"data-resize":t}).addClass(this.options.triggerClass),f(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"_init",this).call(this),this._events()}},{key:"_getDefaultPosition",value:function(){var t=this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);return t?t[0]:"top"}},{key:"_getDefaultAlignment",value:function(){return"center"}},{key:"_getHOffset",value:function(){return"left"===this.position||"right"===this.position?this.options.hOffset+this.options.tooltipWidth:this.options.hOffset}},{key:"_getVOffset",value:function(){return"top"===this.position||"bottom"===this.position?this.options.vOffset+this.options.tooltipHeight:this.options.vOffset}},{key:"_buildTemplate",value:function(t){var e=(this.options.tooltipClass+" "+this.options.positionClass+" "+this.options.templateClasses).trim(),i=r()("<div></div>").addClass(e).attr({role:"tooltip","aria-hidden":!0,"data-is-active":!1,"data-is-focus":!1,id:t});return i}},{key:"_setPosition",value:function(){f(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"_setPosition",this).call(this,this.$element,this.template)}},{key:"show",value:function(){if("all"!==this.options.showOn&&!u.a.is(this.options.showOn))return!1;var t=this;this.template.css("visibility","hidden").show(),this._setPosition(),this.template.removeClass("top bottom left right").addClass(this.position),this.template.removeClass("align-top align-bottom align-left align-right align-center").addClass("align-"+this.alignment),this.$element.trigger("closeme.zf.tooltip",this.template.attr("id")),this.template.attr({"data-is-active":!0,"aria-hidden":!1}),t.isActive=!0,this.template.stop().hide().css("visibility","").fadeIn(this.options.fadeInDuration,function(){}),this.$element.trigger("show.zf.tooltip")}},{key:"hide",value:function(){var t=this;this.template.stop().attr({"aria-hidden":!0,"data-is-active":!1}).fadeOut(this.options.fadeOutDuration,function(){t.isActive=!1,t.isClick=!1}),this.$element.trigger("hide.zf.tooltip")}},{key:"_events",value:function(){var t=this,e=(this.template,!1);this.options.disableHover||this.$element.on("mouseenter.zf.tooltip",function(e){t.isActive||(t.timeout=setTimeout(function(){t.show()},t.options.hoverDelay))}).on("mouseleave.zf.tooltip",function(i){clearTimeout(t.timeout),(!e||t.isClick&&!t.options.clickOpen)&&t.hide()}),this.options.clickOpen?this.$element.on("mousedown.zf.tooltip",function(e){e.stopImmediatePropagation(),t.isClick||(t.isClick=!0,!t.options.disableHover&&t.$element.attr("tabindex")||t.isActive||t.show())}):this.$element.on("mousedown.zf.tooltip",function(e){e.stopImmediatePropagation(),t.isClick=!0}),this.options.disableForTouch||this.$element.on("tap.zf.tooltip touchend.zf.tooltip",function(e){t.isActive?t.hide():t.show()}),this.$element.on({"close.zf.trigger":this.hide.bind(this)}),this.$element.on("focus.zf.tooltip",function(i){return e=!0,t.isClick?(t.options.clickOpen||(e=!1),!1):void t.show()}).on("focusout.zf.tooltip",function(i){e=!1,t.isClick=!1,t.hide()}).on("resizeme.zf.trigger",function(){t.isActive&&t._setPosition()})}},{key:"toggle",value:function(){this.isActive?this.hide():this.show()}},{key:"_destroy",value:function(){this.$element.attr("title",this.template.text()).off(".zf.trigger .zf.tooltip").removeClass("has-tip top right left").removeAttr("aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box"),this.template.remove()}}]),e}(h.a);p.defaults={disableForTouch:!1,hoverDelay:200,fadeInDuration:150,fadeOutDuration:150,disableHover:!1,templateClasses:"",tooltipClass:"tooltip",triggerClass:"has-tip",showOn:"small",template:"",tipText:"",touchCloseText:"Tap to close.",clickOpen:!0,positionClass:"",position:"auto",alignment:"auto",allowOverlap:!1,allowBottomOverlap:!1,vOffset:0,hOffset:0,tooltipHeight:14,tooltipWidth:12,allowHtml:!1}},function(t,e,i){"use strict";function n(t,e,i){var n,o,s=this,a=e.duration,r=Object.keys(t.data())[0]||"timer",l=-1;this.isPaused=!1,this.restart=function(){l=-1,clearTimeout(o),this.start()},this.start=function(){this.isPaused=!1,clearTimeout(o),l=l<=0?a:l,t.data("paused",!1),n=Date.now(),o=setTimeout(function(){e.infinite&&s.restart(),i&&"function"==typeof i&&i()},l),t.trigger("timerstart.zf."+r)},this.pause=function(){this.isPaused=!0,clearTimeout(o),t.data("paused",!0);var e=Date.now();l-=e-n,t.trigger("timerpaused.zf."+r)}}i.d(e,"a",function(){return n});var o=i(0);i.n(o)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(0),o=i.n(n),s=i(19),a=i(3),r=i(5),l=i(30),u=i(12),c=i(11),h=i(13),d=i(23),f=i(27),p=i(10),m=i(20),g=i(24),v=i(15),y=i(29),b=i(26),w=i(33),_=i(25),$=i(31),k=i(22),C=i(28),O=i(32),z=i(18),T=i(21),E=i(14);s.a.addToJquery(o.a),s.a.MediaQuery=a.a,r.a.init(o.a,s.a),s.a.plugin(l.a,"Slider"),s.a.plugin(u.a,"Drilldown"),s.a.plugin(c.a,"AccordionMenu"),s.a.plugin(h.a,"DropdownMenu"),s.a.plugin(d.a,"Magellan"),s.a.plugin(f.a,"ResponsiveMenu"),s.a.plugin(p.a,"Accordion"),s.a.plugin(m.a,"Dropdown"),s.a.plugin(g.a,"OffCanvas"),s.a.plugin(v.a,"Tabs"),s.a.plugin(y.a,"Reveal"),s.a.plugin(b.a,"ResponsiveAccordionTabs"),s.a.plugin(w.a,"Tooltip"),s.a.plugin(_.a,"Orbit"),s.a.plugin($.a,"Sticky"),s.a.plugin(k.a,"Interchange"),s.a.plugin(C.a,"ResponsiveToggle"),s.a.plugin(O.a,"Toggler"),s.a.plugin(z.a,"Abide"),s.a.plugin(T.a,"Equalizer"),s.a.plugin(E.a,"SmoothScroll")}]),function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("whatInput",[],e):"object"==typeof exports?exports.whatInput=e():t.whatInput=e()}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e){"use strict";t.exports=function(){var t="initial",e=null,i=document.documentElement,n=["input","select","textarea"],o=[],s=[16,17,18,91,93],a=[9],r={keydown:"keyboard",mousedown:"mouse",mousemove:"mouse",MSPointerDown:"pointer",MSPointerMove:"pointer",pointerdown:"pointer",pointermove:"pointer",touchstart:"touch"},l=[],u=!1,c=!1,h={x:null,y:null},d={2:"touch",3:"touch",4:"mouse"},f=!1;try{var p=Object.defineProperty({},"passive",{get:function(){f=!0}});window.addEventListener("test",null,p)}catch(m){}var g=function(){r[C()]="mouse",v(),b()},v=function(){window.PointerEvent?(i.addEventListener("pointerdown",y),i.addEventListener("pointermove",w)):window.MSPointerEvent?(i.addEventListener("MSPointerDown",y),i.addEventListener("MSPointerMove",w)):(i.addEventListener("mousedown",y),i.addEventListener("mousemove",w),"ontouchstart"in window&&(i.addEventListener("touchstart",_),i.addEventListener("touchend",_))),i.addEventListener(C(),w,!!f&&{passive:!0}),i.addEventListener("keydown",y)},y=function(i){if(!u){var o=i.which,l=r[i.type];if("pointer"===l&&(l=k(i)),t!==l||e!==l){var c=document.activeElement,h=!1,d=c&&c.nodeName&&n.indexOf(c.nodeName.toLowerCase())===-1;(d||a.indexOf(o)!==-1)&&(h=!0),("touch"===l||"mouse"===l||"keyboard"===l&&o&&h&&s.indexOf(o)===-1)&&(t=e=l,b())}}},b=function(){i.setAttribute("data-whatinput",t),i.setAttribute("data-whatintent",t),l.indexOf(t)===-1&&(l.push(t),i.className+=" whatinput-types-"+t),$("input")},w=function(t){if(h.x!==t.screenX||h.y!==t.screenY?(c=!1,h.x=t.screenX,h.y=t.screenY):c=!0,!u&&!c){var n=r[t.type];"pointer"===n&&(n=k(t)),e!==n&&(e=n,i.setAttribute("data-whatintent",e),$("intent"))}},_=function(t){"touchstart"===t.type?(u=!1,y(t)):u=!0},$=function(t){for(var i=0,n=o.length;i<n;i++)o[i].type===t&&o[i]["function"].call(void 0,e)},k=function(t){return"number"==typeof t.pointerType?d[t.pointerType]:"pen"===t.pointerType?"touch":t.pointerType},C=function(){var t=void 0;return t="onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll"};return"addEventListener"in window&&Array.prototype.indexOf&&g(),{ask:function(i){return"loose"===i?e:t},types:function(){return l},ignoreKeys:function(t){s=t},onChange:function(t,e){o.push({"function":t,type:e})}}}()}])}),$(document).foundation(),$(document).ready(function(){var t=function(t){for(var e=0,i=0;i<t.length;i++)e+=parseInt(t[i]);return $(".tally-input").attr("placeholder",e),$(".tally-input").blur().val(""),e};localforage.keys().then(function(e){"tally"==e&&localforage.getItem("tally").then(function(e){t(e),console.log(e)})})["catch"](function(t){console.log(t)}),$(".tally-add").on("click",function(e){if($(".tally-input").val()){var i=$(".tally-input").val();localforage.keys().then(function(e){"tally"==e?(console.log("tally exsist"),localforage.getItem("tally").then(function(e){e.push(i),t(e),localforage.setItem("tally",e).then(function(t){console.log(t)})["catch"](function(t){console.log(t)})})["catch"](function(t){console.log(t)})):localforage.setItem("tally",[i]).then(function(e){console.log(e),t(e),console.log("tally did not exsist")})["catch"](function(t){console.log(t)})})["catch"](function(t){console.log(t)})}else console.log("tally-input was empty")}),$(".tally-clear-list").on("click",function(t){localforage.clear().then(function(){console.log("db clear"),$(".tally-input").blur().val("").attr("placeholder","0")})["catch"](function(t){console.log(t)})}),$(".tally-last").on("click",function(e){swal({title:"remove last entry?",type:"warning",showCancelButton:!0,confirmButtonText:"yes!"}).then(function(e){e.value&&localforage.getItem("tally").then(function(e){e.pop(),localforage.setItem("tally",e).then(function(){localforage.getItem("tally").then(function(e){t(e)})["catch"](function(t){console.log(t)})})["catch"](function(t){console.log(er)})})["catch"](function(t){console.log(t)})})})}),$(window).on("load",function(){var t=function(){if($(".loader").is(":visible")){console.log("loader detected <br/>");var t=new TimelineMax({onComplete:function(){console.log("loader removerd <br/>")}});t.add(TweenMax.to(".loader",.5,{autoAlpha:0}))}};t()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpdGUuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiJCIsImhhc0NsYXNzIiwiZm9ybV9zdWNjZXNzIiwid2luZG93Iiwib25sb2FkIiwic3dhbCIsInRpdGxlIiwidGV4dCIsInN1Y2Nlc3NfbWVzc2FnZSIsInR5cGUiLCJjb25maXJtQnV0dG9uVGV4dCIsImVycm9yX21lc3NhZ2UiLCJmb3JtcyIsInJlc2V0IiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwialF1ZXJ5IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInJ0bCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0IiwiYXR0ciIsIkdldFlvRGlnaXRzIiwibGVuZ3RoIiwibmFtZXNwYWNlIiwiTWF0aCIsInJvdW5kIiwicG93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInRyYW5zaXRpb25lbmQiLCIkZWxlbSIsImVuZCIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJlbGVtIiwiY3JlYXRlRWxlbWVudCIsInQiLCJzdHlsZSIsInNldFRpbWVvdXQiLCJ0cmlnZ2VySGFuZGxlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJoeXBoZW5hdGUiLCJzdHIiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJnZXRQbHVnaW5OYW1lIiwib2JqIiwiY29uc3RydWN0b3IiLCJjbGFzc05hbWUiLCJQbHVnaW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJlbGVtZW50Iiwib3B0aW9ucyIsInRoaXMiLCJfc2V0dXAiLCJwbHVnaW5OYW1lIiwidXVpZCIsIiRlbGVtZW50IiwiZGF0YSIsInRyaWdnZXIiLCJfZGVzdHJveSIsInJlbW92ZUF0dHIiLCJyZW1vdmVEYXRhIiwicHJvcCIsInBhcnNlU3R5bGVUb09iamVjdCIsInN0eWxlT2JqZWN0IiwidHJpbSIsInNwbGl0IiwicmVkdWNlIiwicmV0IiwicGFyYW0iLCJwYXJ0cyIsInZhbCIsImRlY29kZVVSSUNvbXBvbmVudCIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJNZWRpYVF1ZXJ5IiwibWF0Y2hNZWRpYSIsInN0eWxlTWVkaWEiLCJtZWRpYSIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5mbyIsImlkIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJtYXRjaE1lZGl1bSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJ3aWR0aCIsIm1hdGNoZXMiLCJxdWVyaWVzIiwiY3VycmVudCIsIl9pbml0Iiwic2VsZiIsIiRtZXRhIiwiYXBwZW5kVG8iLCJoZWFkIiwibmFtZWRRdWVyaWVzIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJhdExlYXN0Iiwic2l6ZSIsInF1ZXJ5IiwiaXMiLCJtYXRjaGVkIiwiX3RoaXMiLCJvZmYiLCJvbiIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsImZpbmRGb2N1c2FibGUiLCJmaW5kIiwiZmlsdGVyIiwicGFyc2VLZXkiLCJldmVudCIsImtleUNvZGVzIiwid2hpY2giLCJrZXlDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJnZXRLZXlDb2RlcyIsImtjcyIsImsiLCJrYyIsIktleWJvYXJkIiwiOSIsIjEzIiwiMjciLCIzMiIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsImNvbW1hbmRzIiwia2V5cyIsImhhbmRsZUtleSIsImNvbXBvbmVudCIsImZ1bmN0aW9ucyIsImNtZHMiLCJjb21tYW5kIiwiZm4iLCJjb21tYW5kTGlzdCIsImNvbnNvbGUiLCJ3YXJuIiwibHRyIiwiYSIsImV4dGVuZCIsInJldHVyblZhbHVlIiwiYXBwbHkiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwicmVnaXN0ZXIiLCJjb21wb25lbnROYW1lIiwidHJhcEZvY3VzIiwiJGZvY3VzYWJsZSIsIiRmaXJzdEZvY3VzYWJsZSIsImVxIiwiJGxhc3RGb2N1c2FibGUiLCJwcmV2ZW50RGVmYXVsdCIsImZvY3VzIiwicmVsZWFzZUZvY3VzIiwiZGVib3VuY2VHbG9iYWxMaXN0ZW5lciIsImRlYm91bmNlIiwibGlzdGVuZXIiLCJ0aW1lciIsImFyZ3MiLCJhcmd1bWVudHMiLCJlIiwiY2xlYXJUaW1lb3V0IiwiVHJpZ2dlcnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJwcmVmaXhlcyIsInRyaWdnZXJzIiwiZWwiLCJmb3JFYWNoIiwiTGlzdGVuZXJzIiwiQmFzaWMiLCJHbG9iYWwiLCJJbml0aWFsaXplcnMiLCJvcGVuTGlzdGVuZXIiLCJjbG9zZUxpc3RlbmVyIiwidG9nZ2xlTGlzdGVuZXIiLCJjbG9zZWFibGVMaXN0ZW5lciIsInN0b3BQcm9wYWdhdGlvbiIsImFuaW1hdGlvbiIsImFuaW1hdGVPdXQiLCJmYWRlT3V0IiwidG9nZ2xlRm9jdXNMaXN0ZW5lciIsImFkZE9wZW5MaXN0ZW5lciIsImFkZENsb3NlTGlzdGVuZXIiLCJhZGRUb2dnbGVMaXN0ZW5lciIsImFkZENsb3NlYWJsZUxpc3RlbmVyIiwiYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwiJG5vZGVzIiwiZWFjaCIsInNjcm9sbExpc3RlbmVyIiwiY2xvc2VNZUxpc3RlbmVyIiwicGx1Z2luSWQiLCJwbHVnaW4iLCJwbHVnaW5zIiwibm90IiwiYWRkQ2xvc2VtZUxpc3RlbmVyIiwieWV0aUJveGVzIiwicGx1Z05hbWVzIiwiY29uY2F0IiwiZXJyb3IiLCJsaXN0ZW5lcnMiLCJtYXAiLCJqb2luIiwiYWRkUmVzaXplTGlzdGVuZXIiLCJhZGRTY3JvbGxMaXN0ZW5lciIsImFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIiLCJsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uIiwibXV0YXRpb25SZWNvcmRzTGlzdCIsIiR0YXJnZXQiLCJhdHRyaWJ1dGVOYW1lIiwicGFnZVlPZmZzZXQiLCJjbG9zZXN0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsImFkZFNpbXBsZUxpc3RlbmVycyIsIiRkb2N1bWVudCIsImFkZEdsb2JhbExpc3RlbmVycyIsImluaXQiLCJGb3VuZGF0aW9uIiwidHJpZ2dlcnNJbml0aWFsaXplZCIsInJlYWR5U3RhdGUiLCJJSGVhcllvdSIsIk1vdmUiLCJkdXJhdGlvbiIsIm1vdmUiLCJ0cyIsInN0YXJ0IiwicHJvZyIsImFuaW0iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImFuaW1hdGUiLCJpc0luIiwiY2IiLCJmaW5pc2giLCJoaWRlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicmVtb3ZlQ2xhc3MiLCJpbml0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsImFkZENsYXNzIiwic2hvdyIsIm9mZnNldFdpZHRoIiwib25lIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiSW1Ob3RUb3VjaGluZ1lvdSIsInBhcmVudCIsImxyT25seSIsInRiT25seSIsImlnbm9yZUJvdHRvbSIsIk92ZXJsYXBBcmVhIiwidG9wT3ZlciIsImJvdHRvbU92ZXIiLCJsZWZ0T3ZlciIsInJpZ2h0T3ZlciIsImVsZURpbXMiLCJHZXREaW1lbnNpb25zIiwicGFyRGltcyIsImhlaWdodCIsIm9mZnNldCIsInRvcCIsImxlZnQiLCJ3aW5kb3dEaW1zIiwibWluIiwic3FydCIsIkVycm9yIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhclJlY3QiLCJ3aW5SZWN0IiwiYm9keSIsIndpblkiLCJ3aW5YIiwicGFnZVhPZmZzZXQiLCJwYXJlbnREaW1zIiwiR2V0T2Zmc2V0cyIsImFuY2hvciIsInBvc2l0aW9uIiwidk9mZnNldCIsImhPZmZzZXQiLCJpc092ZXJmbG93IiwibG9nIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fIiwiR2V0RXhwbGljaXRPZmZzZXRzIiwiJGVsZURpbXMiLCIkYW5jaG9yRGltcyIsImFsaWdubWVudCIsInRvcFZhbCIsImxlZnRWYWwiLCJCb3giLCJvbkltYWdlc0xvYWRlZCIsImltYWdlcyIsImNhbGxiYWNrIiwic2luZ2xlSW1hZ2VMb2FkZWQiLCJ1bmxvYWRlZCIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwiaW1hZ2UiLCJJbWFnZSIsImV2ZW50cyIsIm1lIiwic3JjIiwiTmVzdCIsIkZlYXRoZXIiLCJtZW51IiwiaXRlbXMiLCJyb2xlIiwic3ViTWVudUNsYXNzIiwic3ViSXRlbUNsYXNzIiwiaGFzU3ViQ2xhc3MiLCJhcHBseUFyaWEiLCIkaXRlbSIsIiRzdWIiLCJjaGlsZHJlbiIsImRhdGEtc3VibWVudSIsImFyaWEtaGFzcG9wdXAiLCJhcmlhLWxhYmVsIiwiYXJpYS1leHBhbmRlZCIsImFyaWEtaGlkZGVuIiwiQnVybiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFjY29yZGlvbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18iLCJfUGx1Z2luIiwiZ2V0UHJvdG90eXBlT2YiLCJkZWZhdWx0cyIsIkVOVEVSIiwiU1BBQ0UiLCJBUlJPV19ET1dOIiwiQVJST1dfVVAiLCJfdGhpczMiLCIkdGFicyIsImlkeCIsIiRlbCIsIiRjb250ZW50IiwibGlua0lkIiwiYXJpYS1jb250cm9scyIsImFyaWEtc2VsZWN0ZWQiLCJhcmlhLWxhYmVsbGVkYnkiLCIkaW5pdEFjdGl2ZSIsImZpcnN0VGltZUluaXQiLCJkb3duIiwiX2NoZWNrRGVlcExpbmsiLCJsb2NhdGlvbiIsImhhc2giLCIkbGluayIsIiRhbmNob3IiLCJkZWVwTGlua1NtdWRnZSIsImxvYWQiLCJzY3JvbGxUb3AiLCJkZWVwTGlua1NtdWRnZURlbGF5IiwiZGVlcExpbmsiLCJfZXZlbnRzIiwiJHRhYkNvbnRlbnQiLCJ0b2dnbGUiLCJuZXh0IiwiJGEiLCJtdWx0aUV4cGFuZCIsInByZXZpb3VzIiwicHJldiIsInVwIiwidXBkYXRlSGlzdG9yeSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJmaXJzdFRpbWUiLCJfdGhpczQiLCJhZGRCYWNrIiwiJGN1cnJlbnRBY3RpdmUiLCJzbGlkZURvd24iLCJzbGlkZVNwZWVkIiwiJGF1bnRzIiwic2libGluZ3MiLCJhbGxvd0FsbENsb3NlZCIsInNsaWRlVXAiLCJzdG9wIiwiQWNjb3JkaW9uTWVudSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyIsIkFSUk9XX1JJR0hUIiwiQVJST1dfTEVGVCIsIkVTQ0FQRSIsImFyaWEtbXVsdGlzZWxlY3RhYmxlIiwibXVsdGlPcGVuIiwiJG1lbnVMaW5rcyIsInN1YklkIiwiaXNBY3RpdmUiLCJzdWJtZW51VG9nZ2xlIiwiYWZ0ZXIiLCJzdWJtZW51VG9nZ2xlVGV4dCIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwiJGVsZW1lbnRzIiwibWF4IiwiZmlyc3QiLCJwYXJlbnRzIiwib3BlbiIsImNsb3NlIiwiY2xvc2VBbGwiLCJoaWRlQWxsIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicGFyZW50c1VudGlsIiwiYWRkIiwiJG1lbnVzIiwiRHJpbGxkb3duIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfYm94X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX18iLCJUQUIiLCJTSElGVF9UQUIiLCJhdXRvQXBwbHlDbGFzcyIsIiRzdWJtZW51QW5jaG9ycyIsIiRzdWJtZW51cyIsIiRtZW51SXRlbXMiLCJfcHJlcGFyZU1lbnUiLCJfcmVnaXN0ZXJFdmVudHMiLCJfa2V5Ym9hcmRFdmVudHMiLCJwYXJlbnRMaW5rIiwiY2xvbmUiLCJwcmVwZW5kVG8iLCJ3cmFwIiwidGFiaW5kZXgiLCIkbWVudSIsIiRiYWNrIiwiYmFja0J1dHRvblBvc2l0aW9uIiwiYXBwZW5kIiwiYmFja0J1dHRvbiIsInByZXBlbmQiLCJfYmFjayIsImF1dG9IZWlnaHQiLCIkd3JhcHBlciIsIndyYXBwZXIiLCJhbmltYXRlSGVpZ2h0IiwiX2dldE1heERpbXMiLCJtYXgtd2lkdGgiLCJtaW4taGVpZ2h0IiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2siLCIkYm9keSIsImNvbnRhaW5zIiwiX2hpZGVBbGwiLCJfYmluZEhhbmRsZXIiLCJfc2Nyb2xsVG9wIiwiYmluZCIsIl9yZXNpemUiLCIkc2Nyb2xsVG9wRWxlbWVudCIsInNjcm9sbFRvcEVsZW1lbnQiLCJzY3JvbGxQb3MiLCJwYXJzZUludCIsInNjcm9sbFRvcE9mZnNldCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRWFzaW5nIiwiX2hpZGUiLCJwYXJlbnRTdWJNZW51IiwiYmx1ciIsIm1heEhlaWdodCIsInJlc3VsdCIsInVud3JhcCIsIkRyb3Bkb3duTWVudSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfY29yZV9fIiwic3VicyIsInZlcnRpY2FsQ2xhc3MiLCJyaWdodENsYXNzIiwiY2hhbmdlZCIsImhhc1RvdWNoIiwib250b3VjaHN0YXJ0IiwicGFyQ2xhc3MiLCJoYW5kbGVDbGlja0ZuIiwiaGFzU3ViIiwiaGFzQ2xpY2tlZCIsImNsaWNrT3BlbiIsImZvcmNlRm9sbG93IiwiY2xvc2VPbkNsaWNrSW5zaWRlIiwiZGlzYWJsZUhvdmVyIiwiaG92ZXJEZWxheSIsImF1dG9jbG9zZSIsImNsb3NpbmdUaW1lIiwiaXNUYWIiLCJpbmRleCIsIm5leHRTaWJsaW5nIiwicHJldlNpYmxpbmciLCJvcGVuU3ViIiwiY2xvc2VTdWIiLCJfaXNWZXJ0aWNhbCIsIl9pc1J0bCIsIiRzaWJzIiwiY2xlYXIiLCJvbGRDbGFzcyIsIiRwYXJlbnRMaSIsIl9hZGRCb2R5SGFuZGxlciIsIiR0b0Nsb3NlIiwic29tZXRoaW5nVG9DbG9zZSIsImRhdGEtaXMtY2xpY2siLCJTbW9vdGhTY3JvbGwiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18iLCJoYW5kbGVMaW5rQ2xpY2siLCJhcnJpdmFsIiwiZ2V0QXR0cmlidXRlIiwiX2luVHJhbnNpdGlvbiIsInNjcm9sbFRvTG9jIiwibG9jIiwidGhyZXNob2xkIiwiVGFicyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18iLCIkdGFiVGl0bGVzIiwibGlua0NsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwiYXV0b0ZvY3VzIiwibWF0Y2hIZWlnaHQiLCIkaW1hZ2VzIiwiX3NldEhlaWdodCIsInNlbGVjdFRhYiIsIl9hZGRLZXlIYW5kbGVyIiwiX2FkZENsaWNrSGFuZGxlciIsIl9zZXRIZWlnaHRNcUhhbmRsZXIiLCJfaGFuZGxlVGFiQ2hhbmdlIiwid3JhcE9uS2V5cyIsImxhc3QiLCJoaXN0b3J5SGFuZGxlZCIsImFjdGl2ZUNvbGxhcHNlIiwiX2NvbGxhcHNlVGFiIiwiJG9sZFRhYiIsIiR0YWJMaW5rIiwiJHRhcmdldENvbnRlbnQiLCJfb3BlblRhYiIsInBhbmVsQWN0aXZlQ2xhc3MiLCIkdGFyZ2V0X2FuY2hvciIsImlkU3RyIiwiaW5kZXhPZiIsInBhbmVsQ2xhc3MiLCJwYW5lbCIsInZpc2liaWxpdHkiLCJkaXNwbGF5IiwidGVtcCIsIm5leHRJdGVtIiwiaXRlbSIsImFycmF5IiwiY3VycmVudElkeCIsIlBvc2l0aW9uYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fIiwiUE9TSVRJT05TIiwiVkVSVElDQUxfQUxJR05NRU5UUyIsIkhPUklaT05UQUxfQUxJR05NRU5UUyIsIkFMSUdOTUVOVFMiLCJyaWdodCIsImJvdHRvbSIsInRyaWVkUG9zaXRpb25zIiwiX2dldERlZmF1bHRQb3NpdGlvbiIsIl9nZXREZWZhdWx0QWxpZ25tZW50IiwiX2FsaWdubWVudHNFeGhhdXN0ZWQiLCJfcmVhbGlnbiIsIl9hZGRUcmllZFBvc2l0aW9uIiwiaXNFeGhhdXN0ZWQiLCIkcGFyZW50IiwiX2dldFZPZmZzZXQiLCJfZ2V0SE9mZnNldCIsImFsbG93T3ZlcmxhcCIsIm1pbk92ZXJsYXAiLCJtaW5Db29yZGluYXRlcyIsIl9wb3NpdGlvbnNFeGhhdXN0ZWQiLCJvdmVybGFwIiwiYWxsb3dCb3R0b21PdmVybGFwIiwiX3JlcG9zaXRpb24iLCJvblRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uVG91Y2hNb3ZlIiwiaXNNb3ZpbmciLCJzcG90U3dpcGUiLCJkaXIiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwiZHgiLCJwYWdlWSIsInN0YXJ0UG9zWCIsImVsYXBzZWRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJzdGFydFRpbWUiLCJhYnMiLCJtb3ZlVGhyZXNob2xkIiwidGltZVRocmVzaG9sZCIsIm9uVG91Y2hTdGFydCIsInN0YXJ0UG9zWSIsImFkZEV2ZW50TGlzdGVuZXIiLCJUb3VjaCIsIlNwb3RTd2lwZSIsInZlcnNpb24iLCJlbmFibGVkIiwiZG9jdW1lbnRFbGVtZW50Iiwic3BlY2lhbCIsInN3aXBlIiwic2V0dXAiLCJub29wIiwic2V0dXBTcG90U3dpcGUiLCJzZXR1cFRvdWNoSGFuZGxlciIsImFkZFRvdWNoIiwiaGFuZGxlVG91Y2giLCJzaW11bGF0ZWRFdmVudCIsImNoYW5nZWRUb3VjaGVzIiwiZXZlbnRUeXBlcyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsIk1vdXNlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIkFiaWRlIiwiJGlucHV0cyIsInJlc2V0Rm9ybSIsInZhbGlkYXRlRm9ybSIsInZhbGlkYXRlT24iLCJ2YWxpZGF0ZUlucHV0IiwibGl2ZVZhbGlkYXRlIiwidmFsaWRhdGVPbkJsdXIiLCJpc0dvb2QiLCJjaGVja2VkIiwib3B0IiwiJGVycm9yIiwiZm9ybUVycm9yU2VsZWN0b3IiLCIkbGFiZWwiLCIkZWxzIiwibGFiZWxzIiwiZmluZExhYmVsIiwiJGZvcm1FcnJvciIsImZpbmRGb3JtRXJyb3IiLCJsYWJlbEVycm9yQ2xhc3MiLCJmb3JtRXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImdyb3VwTmFtZSIsIiRsYWJlbHMiLCJmaW5kUmFkaW9MYWJlbHMiLCIkZm9ybUVycm9ycyIsInJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzIiwiX3RoaXM1IiwiY2xlYXJSZXF1aXJlIiwicmVxdWlyZWRDaGVjayIsInZhbGlkYXRlZCIsImN1c3RvbVZhbGlkYXRvciIsInZhbGlkYXRvciIsImVxdWFsVG8iLCJ2YWxpZGF0ZVJhZGlvIiwidmFsaWRhdGVUZXh0IiwibWF0Y2hWYWxpZGF0aW9uIiwidmFsaWRhdG9ycyIsImdvb2RUb0dvIiwibWVzc2FnZSIsImRlcGVuZGVudEVsZW1lbnRzIiwiYWNjIiwibm9FcnJvciIsInBhdHRlcm4iLCJpbnB1dFRleHQiLCJ2YWxpZCIsInBhdHRlcm5zIiwidGVzdCIsIlJlZ0V4cCIsIiRncm91cCIsInJlcXVpcmVkIiwiX3RoaXM2IiwidiIsIiRmb3JtIiwib3B0cyIsInJlbW92ZUVycm9yQ2xhc3NlcyIsImFscGhhIiwiYWxwaGFfbnVtZXJpYyIsImludGVnZXIiLCJudW1iZXIiLCJjYXJkIiwiY3Z2IiwiZW1haWwiLCJ1cmwiLCJkb21haW4iLCJkYXRldGltZSIsImRhdGUiLCJ0aW1lIiwiZGF0ZUlTTyIsIm1vbnRoX2RheV95ZWFyIiwiZGF5X21vbnRoX3llYXIiLCJjb2xvciIsIndlYnNpdGUiLCJmdW5jdGlvbk5hbWUiLCJGdW5jdGlvbiIsImZ1bmNOYW1lUmVnZXgiLCJyZXN1bHRzIiwiZXhlYyIsInBhcnNlVmFsdWUiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18iLCJGT1VOREFUSU9OX1ZFUlNJT04iLCJfcGx1Z2lucyIsIl91dWlkcyIsImF0dHJOYW1lIiwicmVnaXN0ZXJQbHVnaW4iLCJ1bnJlZ2lzdGVyUGx1Z2luIiwic3BsaWNlIiwicmVJbml0IiwiaXNKUSIsImZucyIsInBsZ3MiLCJmb3VuZGF0aW9uIiwic3RyaW5nIiwiZXJyIiwicmVmbG93IiwiZXIiLCJnZXRGbk5hbWUiLCJhZGRUb0pxdWVyeSIsIm1ldGhvZCIsIiRub0pTIiwicGx1Z0NsYXNzIiwidXRpbCIsInRocm90dGxlIiwiZnVuYyIsImRlbGF5IiwiY29udGV4dCIsIm5vdyIsInZlbmRvcnMiLCJ2cCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwibmV4dFRpbWUiLCJwZXJmb3JtYW5jZSIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsIkRyb3Bkb3duIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3Bvc2l0aW9uYWJsZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyIsIl9nZXQiLCJyZWNlaXZlciIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfUG9zaXRpb25hYmxlIiwiJGlkIiwiJGFuY2hvcnMiLCJkYXRhLWlzLWZvY3VzIiwiZGF0YS15ZXRpLWJveCIsIl9zZXRDdXJyZW50QW5jaG9yIiwicGFyZW50Q2xhc3MiLCJkYXRhLXJlc2l6ZSIsIiRjdXJyZW50QW5jaG9yIiwibWF0Y2giLCJob3Jpem9udGFsUG9zaXRpb24iLCJvcGVuLnpmLnRyaWdnZXIiLCJjbG9zZS56Zi50cmlnZ2VyIiwidG9nZ2xlLnpmLnRyaWdnZXIiLCJyZXNpemVtZS56Zi50cmlnZ2VyIiwiX3NldFBvc2l0aW9uIiwiaG92ZXIiLCJib2R5RGF0YSIsIndoYXRpbnB1dCIsInRpbWVvdXQiLCJob3ZlclBhbmUiLCJwb3NpdGlvbkNsYXNzIiwiRXF1YWxpemVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fIiwiZXFJZCIsIiR3YXRjaGVkIiwiaGFzTmVzdGVkIiwiaXNOZXN0ZWQiLCJpc09uIiwib25SZXNpemVNZUJvdW5kIiwiX29uUmVzaXplTWUiLCJvblBvc3RFcXVhbGl6ZWRCb3VuZCIsIl9vblBvc3RFcXVhbGl6ZWQiLCJ0b29TbWFsbCIsImltZ3MiLCJlcXVhbGl6ZU9uIiwiX2NoZWNrTVEiLCJfcmVmbG93IiwiLnpmLmVxdWFsaXplciIsIm11dGF0ZW1lLnpmLnRyaWdnZXIiLCJfcGF1c2VFdmVudHMiLCJlcXVhbGl6ZU9uU3RhY2siLCJfaXNTdGFja2VkIiwiZXF1YWxpemVCeVJvdyIsImdldEhlaWdodHNCeVJvdyIsImFwcGx5SGVpZ2h0QnlSb3ciLCJnZXRIZWlnaHRzIiwiYXBwbHlIZWlnaHQiLCJoZWlnaHRzIiwibGVuIiwib2Zmc2V0SGVpZ2h0IiwibGFzdEVsVG9wT2Zmc2V0IiwiZ3JvdXBzIiwiZ3JvdXAiLCJlbE9mZnNldFRvcCIsImoiLCJsbiIsImdyb3Vwc0lMZW5ndGgiLCJsZW5KIiwiSW50ZXJjaGFuZ2UiLCJydWxlcyIsImN1cnJlbnRQYXRoIiwiX2FkZEJyZWFrcG9pbnRzIiwiX2dlbmVyYXRlUnVsZXMiLCJydWxlIiwicGF0aCIsIlNQRUNJQUxfUVVFUklFUyIsInJ1bGVzTGlzdCIsIm5vZGVOYW1lIiwiYmFja2dyb3VuZC1pbWFnZSIsInJlc3BvbnNlIiwiaHRtbCIsImxhbmRzY2FwZSIsInBvcnRyYWl0IiwicmV0aW5hIiwiTWFnZWxsYW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX18iLCJjYWxjUG9pbnRzIiwiJHRhcmdldHMiLCIkbGlua3MiLCJkYXRhLXNjcm9sbCIsIiRhY3RpdmUiLCJwb2ludHMiLCJ3aW5IZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsImRvY0hlaWdodCIsInNjcm9sbEhlaWdodCIsIiR0YXIiLCJwdCIsInRhcmdldFBvaW50IiwiZWFzaW5nIiwiZGVlcExpbmtpbmciLCJfdXBkYXRlQWN0aXZlIiwic2Nyb2xsbWUuemYudHJpZ2dlciIsIl9kZWVwTGlua1Njcm9sbCIsImN1cklkeCIsIndpblBvcyIsImlzRG93biIsImN1clZpc2libGUiLCJPZmZDYW52YXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fIiwiY29udGVudENsYXNzZXMiLCJiYXNlIiwicmV2ZWFsIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwibmVzdGVkIiwiY29udGVudElkIiwiY29udGVudE92ZXJsYXkiLCJvdmVybGF5Iiwib3ZlcmxheVBvc2l0aW9uIiwic2V0QXR0cmlidXRlIiwiJG92ZXJsYXkiLCJpbnNlcnRBZnRlciIsImlzUmV2ZWFsZWQiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX3JlbW92ZUNvbnRlbnRDbGFzc2VzIiwia2V5ZG93bi56Zi5vZmZjYW52YXMiLCJfaGFuZGxlS2V5Ym9hcmQiLCJjbGljay56Zi5vZmZjYW52YXMiLCJoYXNSZXZlYWwiLCJfYWRkQ29udGVudENsYXNzZXMiLCJhbGxvd1VwIiwiYWxsb3dEb3duIiwibGFzdFkiLCJvcmlnaW5hbEV2ZW50IiwiZm9yY2VUbyIsInNjcm9sbFRvIiwiY29udGVudFNjcm9sbCIsIl9zdG9wU2Nyb2xsaW5nIiwiX3JlY29yZFNjcm9sbGFibGUiLCJfc3RvcFNjcm9sbFByb3BhZ2F0aW9uIiwiY2FudmFzRm9jdXMiLCJPcmJpdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdGltZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2ZvdW5kYXRpb25fcGx1Z2luX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2ZvdW5kYXRpb25fdXRpbF90b3VjaF9fIiwiX3Jlc2V0IiwiY29udGFpbmVyQ2xhc3MiLCIkc2xpZGVzIiwic2xpZGVDbGFzcyIsImluaXRBY3RpdmUiLCJ1c2VNVUkiLCJfcHJlcGFyZUZvck9yYml0IiwiYnVsbGV0cyIsIl9sb2FkQnVsbGV0cyIsImF1dG9QbGF5IiwiZ2VvU3luYyIsImFjY2Vzc2libGUiLCIkYnVsbGV0cyIsImJveE9mQnVsbGV0cyIsInRpbWVyRGVsYXkiLCJpbmZpbml0ZSIsImNoYW5nZVNsaWRlIiwiX3NldFdyYXBwZXJIZWlnaHQiLCJjb3VudGVyIiwicGF1c2VPbkhvdmVyIiwicGF1c2UiLCJuYXZCdXR0b25zIiwiJGNvbnRyb2xzIiwibmV4dENsYXNzIiwicHJldkNsYXNzIiwiJHNsaWRlIiwicmVzdGFydCIsIl91cGRhdGVCdWxsZXRzIiwiaXNMVFIiLCJjaG9zZW5TbGlkZSIsIiRjdXJTbGlkZSIsIiRuZXdTbGlkZSIsIiRmaXJzdFNsaWRlIiwiJGxhc3RTbGlkZSIsImRpckluIiwiZGlyT3V0IiwiaW5maW5pdGVXcmFwIiwiaXNQYXVzZWQiLCIkb2xkQnVsbGV0Iiwic3BhbiIsImRldGFjaCIsImFuaW1JbkZyb21SaWdodCIsImFuaW1PdXRUb1JpZ2h0IiwiYW5pbUluRnJvbUxlZnQiLCJhbmltT3V0VG9MZWZ0IiwiUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fYWNjb3JkaW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdGFic19fIiwiTWVudVBsdWdpbnMiLCJ0YWJzIiwiY3NzQ2xhc3MiLCJhY2NvcmRpb24iLCJjdXJyZW50TXEiLCJjdXJyZW50UGx1Z2luIiwicnVsZXNUcmVlIiwicnVsZVNpemUiLCJydWxlUGx1Z2luIiwiX2dldEFsbE9wdGlvbnMiLCJpc0VtcHR5T2JqZWN0IiwiX2NoZWNrTWVkaWFRdWVyaWVzIiwiYWxsT3B0aW9ucyIsImR1bW15UGx1Z2luIiwidG1wUGx1Z2luIiwia2V5S2V5Iiwib2JqT2JqIiwiZGVzdHJveSIsIm1hdGNoZWRNcSIsInN0b3JlemZEYXRhIiwiX2hhbmRsZU1hcmt1cCIsInRvU2V0IiwiZnJvbVN0cmluZyIsIiRwYW5lbHMiLCJ0YWJzVGl0bGUiLCJ0YWJzUGFuZWwiLCIkbGlIZWFkcyIsIiRsaUhlYWRzQSIsIiR0YWJzQ29udGVudCIsIiRwbGFjZWhvbGRlciIsInRlbXBWYWx1ZSIsIlJlc3BvbnNpdmVNZW51IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX2FjY29yZGlvbk1lbnVfXyIsImRyb3Bkb3duIiwiZHJpbGxkb3duIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsImlucHV0IiwiYW5pbWF0aW9uSW4iLCJhbmltYXRpb25PdXQiLCJfdXBkYXRlIiwiX3VwZGF0ZU1xSGFuZGxlciIsInRvZ2dsZU1lbnUiLCJoaWRlRm9yIiwiaVBob25lU25pZmYiLCJhbmRyb2lkU25pZmYiLCJtb2JpbGVTbmlmZiIsIlJldmVhbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fIiwiY2FjaGVkIiwibXEiLCJpc01vYmlsZSIsImZ1bGxTY3JlZW4iLCJfbWFrZU92ZXJsYXkiLCJhZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXMiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJtYXJnaW4iLCJfdXBkYXRlUG9zaXRpb24iLCJfaGFuZGxlU3RhdGUiLCJhZGRSZXZlYWxPcGVuQ2xhc3NlcyIsIm9yaWdpbmFsU2Nyb2xsUG9zIiwibXVsdGlwbGVPcGVuZWQiLCJhZnRlckFuaW1hdGlvbiIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvd0RlbGF5IiwiX2V4dHJhSGFuZGxlcnMiLCJjbG9zZU9uRXNjIiwiZmluaXNoVXAiLCJoaWRlRGVsYXkiLCJyZXNldE9uQ2xvc2UiLCJocmVmIiwiYnRtT2Zmc2V0UGN0IiwicGVyY2VudCIsImZyYWMiLCJudW0iLCJhYnNQb3NpdGlvbiIsIiRoYW5kbGUiLCJjbGlja1BvcyIsImJhc2VMb2ciLCJTbGlkZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdXRpbF90b3VjaF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyIsIlNISUZUX0FSUk9XX1JJR0hUIiwiU0hJRlRfQVJST1dfVVAiLCJTSElGVF9BUlJPV19ET1dOIiwiU0hJRlRfQVJST1dfTEVGVCIsIkhPTUUiLCJFTkQiLCJpbnB1dHMiLCJoYW5kbGVzIiwiJGlucHV0IiwiJGZpbGwiLCJ2ZXJ0aWNhbCIsImlzRGJsIiwiZGlzYWJsZWQiLCJkaXNhYmxlZENsYXNzIiwiYmluZGluZyIsIl9zZXRJbml0QXR0ciIsImRvdWJsZVNpZGVkIiwiJGhhbmRsZTIiLCIkaW5wdXQyIiwic2V0SGFuZGxlcyIsIl9zZXRIYW5kbGVQb3MiLCJwY3RPZkJhciIsInBvc2l0aW9uVmFsdWVGdW5jdGlvbiIsIl9sb2dUcmFuc2Zvcm0iLCJfcG93VHJhbnNmb3JtIiwidG9GaXhlZCIsIm5vbkxpbmVhckJhc2UiLCIkaG5kbCIsIm5vSW52ZXJ0IiwiaDJWYWwiLCJzdGVwIiwiaDFWYWwiLCJ2ZXJ0IiwiaE9yVyIsImxPclQiLCJoYW5kbGVEaW0iLCJlbGVtRGltIiwiX3BjdE9mQmFyIiwicHhUb01vdmUiLCJtb3ZlbWVudCIsImRlY2ltYWwiLCJfc2V0VmFsdWVzIiwiZGltIiwiaXNMZWZ0SG5kbCIsImhhbmRsZVBjdCIsImhhbmRsZVBvcyIsImluaXRpYWxTdGFydCIsIm1vdmVUaW1lIiwiY2hhbmdlZERlbGF5IiwiaW5pdFZhbCIsImluaXRpYWxFbmQiLCJhcmlhLXZhbHVlbWF4IiwiYXJpYS12YWx1ZW1pbiIsImFyaWEtdmFsdWVub3ciLCJhcmlhLW9yaWVudGF0aW9uIiwiaGFzVmFsIiwiX2FkanVzdFZhbHVlIiwiZGlyZWN0aW9uIiwiZXZlbnRPZmZzZXQiLCJiYXJEaW0iLCJ3aW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwiZWxlbU9mZnNldCIsImJhclhZIiwiZXZlbnRGcm9tQmFyIiwib2Zmc2V0UGN0IiwiX3ZhbHVlIiwiZmlyc3RIbmRsUG9zIiwic2VjbmRIbmRsUG9zIiwicHJldl92YWwiLCJuZXh0X3ZhbCIsImRpdiIsIl9ldmVudHNGb3JIYW5kbGUiLCJjdXJIYW5kbGUiLCJfaGFuZGxlRXZlbnQiLCJjbGlja1NlbGVjdCIsImRyYWdnYWJsZSIsImN1cnJlbnRUYXJnZXQiLCJuZXdWYWx1ZSIsIl8kaGFuZGxlIiwib2xkVmFsdWUiLCJkZWNyZWFzZSIsImluY3JlYXNlIiwiZGVjcmVhc2VfZmFzdCIsImluY3JlYXNlX2Zhc3QiLCJpbnZlcnRWZXJ0aWNhbCIsImVtQ2FsYyIsImVtIiwiZm9udFNpemUiLCJTdGlja3kiLCIkY29udGFpbmVyIiwid2FzV3JhcHBlZCIsImNvbnRhaW5lciIsInN0aWNreUNsYXNzIiwiZGF0YS1tdXRhdGUiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIl9wYXJzZVBvaW50cyIsIl9zZXRTaXplcyIsInNjcm9sbCIsIl9jYWxjIiwiX3JlbW92ZVN0aWNreSIsInRvcFBvaW50IiwicmV2ZXJzZSIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInB0cyIsImJyZWFrcyIsInBsYWNlIiwiY2FuU3RpY2siLCJfZXZlbnRzSGFuZGxlciIsIl9wYXVzZUxpc3RlbmVycyIsImNoZWNrU2l6ZXMiLCJib3R0b21Qb2ludCIsIl9zZXRTdGlja3kiLCJzdGlja1RvIiwibXJnbiIsIm5vdFN0dWNrVG8iLCJpc1RvcCIsInN0aWNrVG9Ub3AiLCJhbmNob3JQdCIsImFuY2hvckhlaWdodCIsInRvcE9yQm90dG9tIiwic3RpY2t5T24iLCJuZXdFbGVtV2lkdGgiLCJjb21wIiwicGRuZ2wiLCJwZG5nciIsIm5ld0NvbnRhaW5lckhlaWdodCIsIl9zZXRCcmVha1BvaW50cyIsIm1Ub3AiLCJtYXJnaW5Ub3AiLCJtQnRtIiwibWFyZ2luQm90dG9tIiwiVG9nZ2xlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18iLCJ0b2dnbGVDbGFzcyIsIl91cGRhdGVBUklBIiwiVG9vbHRpcCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wb3NpdGlvbmFibGVfXyIsImlzQ2xpY2siLCJlbGVtSWQiLCJ0aXBUZXh0IiwidGVtcGxhdGUiLCJfYnVpbGRUZW1wbGF0ZSIsImFsbG93SHRtbCIsImFyaWEtZGVzY3JpYmVkYnkiLCJkYXRhLXRvZ2dsZSIsInRyaWdnZXJDbGFzcyIsInRvb2x0aXBXaWR0aCIsInRvb2x0aXBIZWlnaHQiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCJkYXRhLWlzLWFjdGl2ZSIsInNob3dPbiIsImZhZGVJbiIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwiaXNGb2N1cyIsImRpc2FibGVGb3JUb3VjaCIsInRvdWNoQ2xvc2VUZXh0IiwiVGltZXIiLCJuYW1lU3BhY2UiLCJyZW1haW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2NvcmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc2xpZGVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2RyaWxsZG93bl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9tYWdlbGxhbl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9yZXNwb25zaXZlTWVudV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fYWNjb3JkaW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9kcm9wZG93bl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fb2ZmY2FudmFzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl90YWJzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9yZXZlYWxfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl90b29sdGlwX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9vcmJpdF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc3RpY2t5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9pbnRlcmNoYW5nZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZVRvZ2dsZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fdG9nZ2xlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fYWJpZGVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2VxdWFsaXplcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX18iLCJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImxvYWRlZCIsImN1cnJlbnRJbnB1dCIsImN1cnJlbnRJbnRlbnQiLCJkb2MiLCJmb3JtSW5wdXRzIiwiZnVuY3Rpb25MaXN0IiwiaWdub3JlTWFwIiwiY2hhbmdlSW50ZW50TWFwIiwiaW5wdXRNYXAiLCJrZXlkb3duIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwiTVNQb2ludGVyRG93biIsIk1TUG9pbnRlck1vdmUiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwiaW5wdXRUeXBlcyIsImlzQnVmZmVyaW5nIiwiaXNTY3JvbGxpbmciLCJtb3VzZVBvcyIsInkiLCJwb2ludGVyTWFwIiwiMiIsIjMiLCI0Iiwic3VwcG9ydHNQYXNzaXZlIiwic2V0VXAiLCJkZXRlY3RXaGVlbCIsImFkZExpc3RlbmVycyIsInNldElucHV0IiwiUG9pbnRlckV2ZW50IiwidXBkYXRlSW5wdXQiLCJzZXRJbnRlbnQiLCJNU1BvaW50ZXJFdmVudCIsInRvdWNoQnVmZmVyIiwicGFzc2l2ZSIsImV2ZW50S2V5IiwicG9pbnRlclR5cGUiLCJhY3RpdmVFbGVtIiwiYWN0aXZlRWxlbWVudCIsImFjdGl2ZUlucHV0Iiwibm90Rm9ybUlucHV0IiwiZmlyZUZ1bmN0aW9ucyIsIndoZWVsVHlwZSIsIm9ubW91c2V3aGVlbCIsImFzayIsInR5cGVzIiwiaWdub3JlS2V5cyIsImFyciIsIm9uQ2hhbmdlIiwiZnVuY3QiLCJldmVudFR5cGUiLCJmdW5jdGlvbiIsInJlYWR5IiwiZ2V0VGFsbHkiLCJob2xkIiwibG9jYWxmb3JhZ2UiLCJ0aGVuIiwiZ2V0SXRlbSIsInRhbGx5IiwiaXYiLCJzZXRJdGVtIiwic2hvd0NhbmNlbEJ1dHRvbiIsInBvcCIsImxvYWRlckV4aXQiLCJUaW1lbGluZU1heCIsIm9uQ29tcGxldGUiLCJUd2Vlbk1heCIsInRvIiwiYXV0b0FscGhhIl0sIm1hcHBpbmdzIjoiQUFHQUEsU0FBU0MsY0FBYyxRQUFRQyxVQUFVQyxPQUFPLFNBSTdDQyxFQUFFLFFBQVFDLFNBQVMsYUFDRCxRQUFoQkMsYUFDRkMsT0FBT0MsT0FBU0MsTUFDZkMsTUFBTyxVQUNQQyxLQUFNQyxnQkFDTkMsS0FBTSxVQUNOQyxrQkFBbUIsV0FFSSxTQUFoQlIsYUFDUkMsT0FBT0MsT0FBU0MsTUFDZkMsTUFBTyxTQUNQQyxLQUFNSSxjQUNORixLQUFNLFFBQ05DLGtCQUFtQixPQUVJLFNBQWhCUixlQUNSQyxPQUFPQyxPQUFTQyxNQUNmQyxNQUFPLFFBQ1BDLEtBQU0sbUhBQ05FLEtBQU0sUUFDTkMsa0JBQW1CLFFBS3JCTixPQUFPLFdBQVdSLFNBQVNnQixNQUFtQixZQUFFQyxVQUV6QyxTQUFVQyxHQUtULFFBQVNDLEdBQW9CQyxHQUc1QixHQUFHQyxFQUFpQkQsR0FDbkIsTUFBT0MsR0FBaUJELEdBQVVFLE9BR25DLElBQUlDLEdBQVNGLEVBQWlCRCxJQUM3QkksRUFBR0osRUFDSEssR0FBRyxFQUNISCxXQVVELE9BTkFKLEdBQVFFLEdBQVVNLEtBQUtILEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNILEdBRy9ESSxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBdkJmLEdBQUlELEtBK0RKLE9BbkNBRixHQUFvQlEsRUFBSVQsRUFHeEJDLEVBQW9CUyxFQUFJUCxFQUd4QkYsRUFBb0JLLEVBQUksU0FBU0ssR0FBUyxNQUFPQSxJQUdqRFYsRUFBb0JXLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NiLEVBQW9CYyxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsR0FDOUJLLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxJQUFLTixLQU1SYixFQUFvQm9CLEVBQUksU0FBU2hCLEdB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LFlBQ1puVyxFQUFFLGdCQUFnQjJoQixPQUFPdmEsSUFBSSxJQUFJckUsS0FBSyxjQUFlLE9BRnZEa3lDLFNBR1MsU0FBU3JqQixHQUNoQnBsQixRQUFRMkosSUFBSXliLE9BUWhCNXhCLEVBQUUsZUFBZStKLEdBQUcsUUFBUyxTQUFTa0UsR0FDcEM1TixNQUNFQyxNQUFPLHFCQUNQRyxLQUFNLFVBQ044MEMsa0JBQWtCLEVBQ2xCNzBDLGtCQUFtQixTQUNsQncwQyxLQUFLLFNBQVNyekIsR0FDWkEsRUFBT3BnQixPQUNSd3pDLFlBQVlFLFFBQVEsU0FBU0QsS0FBSyxTQUFTRSxHQUN6Q0EsRUFBTUksTUFDTlAsWUFBWUssUUFBUSxRQUFTRixHQUFPRixLQUFLLFdBQ3ZDRCxZQUFZRSxRQUFRLFNBQVNELEtBQUssU0FBU0UsR0FDekNMLEVBQVNLLEtBRFhILFNBRVMsU0FBU3JqQixHQUNoQnBsQixRQUFRMkosSUFBSXliLE9BSmhCcWpCLFNBTVMsU0FBU3JqQixHQUNkcGxCLFFBQVEySixJQUFJMmIsUUFUbEJtakIsU0FXVyxTQUFTcmpCLEdBQ2hCcGxCLFFBQVEySixJQUFJeWIsV0FvQnRCNXhCLEVBQUVHLFFBQVE0SixHQUFHLE9BQVEsV0FJbkIsR0FBSTBuQyxHQUFTLFdBQ1gsR0FBR3p4QyxFQUFFLFdBQVcySixHQUFHLFlBQVksQ0FDN0I2QyxRQUFRMkosSUFBSSx3QkFFWixJQUFJcy9CLEdBQWEsR0FBSUMsY0FBYUMsV0FBWSxXQUFXbnBDLFFBQVEySixJQUFJLDJCQUNqRXMvQixHQUFXajNCLElBQUlvM0IsU0FBU0MsR0FBRyxVQUFXLElBQUtDLFVBQVUsTUFJN0RyRSIsImZpbGUiOiJzaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9BQUEgc2hvdWxkIGJlIGxvYWRlZCBmaXJzdCB3aGVuIGNvbmNhdGluYXRpbmcuXG5cbi8vcmVtb3ZlcyBjbGFzcyAnbm8tanMnIGZyb20gYm9keSBzbyB5b3Uga25vdyBqcyBpcyBlbmFibGVkLiAgRG8gd2hhdCB5b3Ugd2FudCB3aXRoIHRoaXMgaW5mb3JtYXRpb25cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5jbGFzc0xpc3QucmVtb3ZlKCduby1qcycpO1xuLy90aGVzZSBhcmUgdXNlZCBpZiB0aGVyZSBpcyBhIGZvcm0gb24gdGhlIHBhZ2UuIElmIHlvdSBkbyBub3Qgd2FudCBzd2VldGFsZXJ0IHRvIGhhbmRsZVxuLy9mZWVkYmFjayBmcm9tIGZvcm0gZW50cnkgd2lwZSB0aGlzIGFuZCB3cml0ZSB5b3VyIG93biBhbmQgZG9uJ3QgZm9yZ2V0IHRvIGFsdGVyIFxuLy90aGUgZm9ybXMvc3VibWl0LnBocCB0byBhY2NvbW1vZGF0ZSB5b3VyIG93biB3aGF0ZXZlciB5b3UgZG8uXG5pZigkKCdib2R5JykuaGFzQ2xhc3MoJ2hhc0Zvcm0nKSl7XG4gIGlmKGZvcm1fc3VjY2VzcyA9PSBcInRydWVcIil7XG4gIFx0d2luZG93Lm9ubG9hZCA9IHN3YWwoe1xuICBcdFx0dGl0bGU6ICdTdWNjZXNzJyxcbiAgXHRcdHRleHQ6IHN1Y2Nlc3NfbWVzc2FnZSxcbiAgXHRcdHR5cGU6ICdzdWNjZXNzJyxcbiAgXHRcdGNvbmZpcm1CdXR0b25UZXh0OiAnVGhhbmtzJ1xuICB9KTtcbiAgfWVsc2UgaWYoZm9ybV9zdWNjZXNzID09IFwiZmFsc2VcIil7XG4gIFx0d2luZG93Lm9ubG9hZCA9IHN3YWwoe1xuICBcdFx0dGl0bGU6ICdXaG9vcHMnLFxuICBcdFx0dGV4dDogZXJyb3JfbWVzc2FnZSxcbiAgXHRcdHR5cGU6ICdlcnJvcicsXG4gIFx0XHRjb25maXJtQnV0dG9uVGV4dDogJ09LJ1xuICB9KTtcbiAgfWVsc2UgaWYoZm9ybV9zdWNjZXNzID09IFwiZW1haWxcIil7XG4gIFx0d2luZG93Lm9ubG9hZCA9IHN3YWwoe1xuICBcdFx0dGl0bGU6ICdFcnJvcicsXG4gIFx0XHR0ZXh0OiAnSXQgc2VlbXMgdGhlcmUgd2FzIGFuIGVycm9yIHdpdGggeW91ciBlbWFpbCBlbnRyeSwgcGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBhIHZhbGlkIGVtYWlsIGFuZCB0cnkgdG8gc3VibWl0IGFnYWluLicsXG4gIFx0XHR0eXBlOiAnZXJyb3InLFxuICBcdFx0Y29uZmlybUJ1dHRvblRleHQ6ICdPSydcbiAgfSk7XG4gIH1cbiAgLy9yZXNldHMgZm9ybSBvbiBsb2FkLiBpZiB5b3UgYXJlIHVzaW5nIGZvcm1zIHlvdSBtYXkgd2FudCB0byBzZXQgdXAgc29tZSBzb3J0IG9mIHZhcmlhYmxlIGhlcmUgZm9yIHRoZSB0YXJnZXQgSURcbiAgLy9tYXliZSBzb21ldGhpbmcgaW4gdGhlIGNvbmZpZi5waHAgZmlsZSBmb3IgdGhlIHBhZ2VzIHRoYXQgY29udGFpbiBmb3Jtc1xuICBvbmxvYWQ9ZnVuY3Rpb24oKXtkb2N1bWVudC5mb3Jtc1tcImNvbnRhY3Rmb3JtXCJdLnJlc2V0KCl9O1xufVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzUpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBydGw7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHZXRZb0RpZ2l0czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRyYW5zaXRpb25lbmQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxuLy8gQ29yZSBGb3VuZGF0aW9uIFV0aWxpdGllcywgdXRpbGl6ZWQgaW4gYSBudW1iZXIgb2YgcGxhY2VzLlxuXG4vKipcbiAqIFJldHVybnMgYSBib29sZWFuIGZvciBSVEwgc3VwcG9ydFxuICovXG5mdW5jdGlvbiBydGwoKSB7XG4gIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xufVxuXG4vKipcbiAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gbnVtYmVyIG9mIHJhbmRvbSBiYXNlLTM2IGRpZ2l0cyBkZXNpcmVkLiBJbmNyZWFzZSBmb3IgbW9yZSByYW5kb20gc3RyaW5ncy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAqIEBkZWZhdWx0IHtTdHJpbmd9ICcnIC0gaWYgbm8gcGx1Z2luIG5hbWUgaXMgcHJvdmlkZWQsIG5vdGhpbmcgaXMgYXBwZW5kZWQgdG8gdGhlIHVpZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IC0gdW5pcXVlIGlkXG4gKi9cbmZ1bmN0aW9uIEdldFlvRGlnaXRzKGxlbmd0aCwgbmFtZXNwYWNlKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCB8fCA2O1xuICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyAnLScgKyBuYW1lc3BhY2UgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25lbmQoJGVsZW0pIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfTtcbiAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIGVuZDtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG4gIGlmIChlbmQpIHtcbiAgICByZXR1cm4gZW5kO1xuICB9IGVsc2Uge1xuICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICB9LCAxKTtcbiAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICB9XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBsdWdpbjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXG5cblxuLy8gQWJzdHJhY3QgY2xhc3MgZm9yIHByb3ZpZGluZyBsaWZlY3ljbGUgaG9va3MuIEV4cGVjdCBwbHVnaW5zIHRvIGRlZmluZSBBVCBMRUFTVFxuLy8ge2Z1bmN0aW9ufSBfc2V0dXAgKHJlcGxhY2VzIHByZXZpb3VzIGNvbnN0cnVjdG9yKSxcbi8vIHtmdW5jdGlvbn0gX2Rlc3Ryb3kgKHJlcGxhY2VzIHByZXZpb3VzIGRlc3Ryb3kpXG5cbnZhciBQbHVnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdWdpbik7XG5cbiAgICB0aGlzLl9zZXR1cChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGdldFBsdWdpbk5hbWUodGhpcyk7XG4gICAgdGhpcy51dWlkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsIHBsdWdpbk5hbWUpO1xuXG4gICAgaWYgKCF0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUsIHRoaXMudXVpZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgaW5pdGlhbGl6ZWQuXG4gICAgICogQGV2ZW50IFBsdWdpbiNpbml0XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbml0LnpmLicgKyBwbHVnaW5OYW1lKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQbHVnaW4sIFt7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9kZXN0cm95KCk7XG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IGdldFBsdWdpbk5hbWUodGhpcyk7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdkZXN0cm95ZWQuemYuJyArIHBsdWdpbk5hbWUpO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzKSB7XG4gICAgICAgIHRoaXNbcHJvcF0gPSBudWxsOyAvL2NsZWFuIHVwIHNjcmlwdCB0byBwcmVwIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsdWdpbjtcbn0oKTtcblxuLy8gQ29udmVydCBQYXNjYWxDYXNlIHRvIGtlYmFiLWNhc2Vcbi8vIFRoYW5rIHlvdTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODk1NTU4MFxuXG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRQbHVnaW5OYW1lKG9iaikge1xuICBpZiAodHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBoeXBoZW5hdGUob2JqLmNvbnN0cnVjdG9yLm5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoeXBoZW5hdGUob2JqLmNsYXNzTmFtZSk7XG4gIH1cbn1cblxuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWVkaWFRdWVyeTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuXG5cblxuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG52YXIgZGVmYXVsdFF1ZXJpZXMgPSB7XG4gICdkZWZhdWx0JzogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gIHBvcnRyYWl0OiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgcmV0aW5hOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgKyAnb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxudmFyIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYSB8fCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuXG4gIHZhciBzdHlsZU1lZGlhID0gd2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgICAgICBpbmZvID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIHN0eWxlLmlkID0gJ21hdGNobWVkaWFqcy10ZXN0JztcblxuICAgIHNjcmlwdCAmJiBzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIHNjcmlwdCk7XG5cbiAgICAvLyAnc3R5bGUuY3VycmVudFN0eWxlJyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICd3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZScgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgIGluZm8gPSAnZ2V0Q29tcHV0ZWRTdHlsZScgaW4gd2luZG93ICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW06IGZ1bmN0aW9uIChtZWRpYSkge1xuICAgICAgICB2YXIgdGV4dCA9ICdAbWVkaWEgJyArIG1lZGlhICsgJ3sgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9JztcblxuICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9O1xufSgpO1xuXG52YXIgTWVkaWFRdWVyeSA9IHtcbiAgcXVlcmllczogW10sXG5cbiAgY3VycmVudDogJycsXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtZWRpYSBxdWVyeSBoZWxwZXIsIGJ5IGV4dHJhY3RpbmcgdGhlIGJyZWFrcG9pbnQgbGlzdCBmcm9tIHRoZSBDU1MgYW5kIGFjdGl2YXRpbmcgdGhlIGJyZWFrcG9pbnQgd2F0Y2hlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgJG1ldGEgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdtZXRhLmZvdW5kYXRpb24tbXEnKTtcbiAgICBpZiAoISRtZXRhLmxlbmd0aCkge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnPG1ldGEgY2xhc3M9XCJmb3VuZGF0aW9uLW1xXCI+JykuYXBwZW5kVG8oZG9jdW1lbnQuaGVhZCk7XG4gICAgfVxuXG4gICAgdmFyIGV4dHJhY3RlZFN0eWxlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJy5mb3VuZGF0aW9uLW1xJykuY3NzKCdmb250LWZhbWlseScpO1xuICAgIHZhciBuYW1lZFF1ZXJpZXM7XG5cbiAgICBuYW1lZFF1ZXJpZXMgPSBwYXJzZVN0eWxlVG9PYmplY3QoZXh0cmFjdGVkU3R5bGVzKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBuYW1lZFF1ZXJpZXMpIHtcbiAgICAgIGlmIChuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiAnb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICcgKyBuYW1lZFF1ZXJpZXNba2V5XSArICcpJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpO1xuXG4gICAgdGhpcy5fd2F0Y2hlcigpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIGlzIGF0IGxlYXN0IGFzIHdpZGUgYXMgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQncyBzbWFsbGVyLlxuICAgKi9cbiAgYXRMZWFzdDogZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIG1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIG1hdGNoZXMgdG8gYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLCBlaXRoZXIgJ3NtYWxsIG9ubHknIG9yICdzbWFsbCcuIE9taXR0aW5nICdvbmx5JyBmYWxscyBiYWNrIHRvIHVzaW5nIGF0TGVhc3QoKSBtZXRob2QuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCBkb2VzIG5vdC5cbiAgICovXG4gIGlzOiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHNpemUgPSBzaXplLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgIGlmIChzaXplLmxlbmd0aCA+IDEgJiYgc2l6ZVsxXSA9PT0gJ29ubHknKSB7XG4gICAgICBpZiAoc2l6ZVswXSA9PT0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSkgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmF0TGVhc3Qoc2l6ZVswXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBtZWRpYSBxdWVyeSBvZiBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfG51bGx9IC0gVGhlIG1lZGlhIHF1ZXJ5IG9mIHRoZSBicmVha3BvaW50LCBvciBgbnVsbGAgaWYgdGhlIGJyZWFrcG9pbnQgZG9lc24ndCBleGlzdC5cbiAgICovXG4gIGdldDogZnVuY3Rpb24gKHNpemUpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucXVlcmllcykge1xuICAgICAgaWYgKHRoaXMucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbaV07XG4gICAgICAgIGlmIChzaXplID09PSBxdWVyeS5uYW1lKSByZXR1cm4gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgX2dldEN1cnJlbnRTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAobWF0Y2hNZWRpYShxdWVyeS52YWx1ZSkubWF0Y2hlcykge1xuICAgICAgICBtYXRjaGVkID0gcXVlcnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBtYXRjaGVkID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG1hdGNoZWQubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dhdGNoZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZigncmVzaXplLnpmLm1lZGlhcXVlcnknKS5vbigncmVzaXplLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmV3U2l6ZSA9IF90aGlzLl9nZXRDdXJyZW50U2l6ZSgpLFxuICAgICAgICAgIGN1cnJlbnRTaXplID0gX3RoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICBfdGhpcy5jdXJyZW50ID0gbmV3U2l6ZTtcblxuICAgICAgICAvLyBCcm9hZGNhc3QgdGhlIG1lZGlhIHF1ZXJ5IGNoYW5nZSBvbiB0aGUgd2luZG93XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLy8gVGhhbmsgeW91OiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZ1xuZnVuY3Rpb24gcGFyc2VTdHlsZVRvT2JqZWN0KHN0cikge1xuICB2YXIgc3R5bGVPYmplY3QgPSB7fTtcblxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHIgPSBzdHIudHJpbSgpLnNsaWNlKDEsIC0xKTsgLy8gYnJvd3NlcnMgcmUtcXVvdGUgc3RyaW5nIHN0eWxlIHZhbHVlc1xuXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICB9XG5cbiAgc3R5bGVPYmplY3QgPSBzdHIuc3BsaXQoJyYnKS5yZWR1Y2UoZnVuY3Rpb24gKHJldCwgcGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBwYXJ0c1swXTtcbiAgICB2YXIgdmFsID0gcGFydHNbMV07XG4gICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG5cbiAgICAvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuICAgIC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcbiAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcblxuICAgIGlmICghcmV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldFtrZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRba2V5XSkpIHtcbiAgICAgIHJldFtrZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0W2tleV0gPSBbcmV0W2tleV0sIHZhbF07XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gc3R5bGVPYmplY3Q7XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleWJvYXJkOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyB1dGlsIHdhcyBjcmVhdGVkIGJ5IE1hcml1cyBPbGJlcnR6ICpcbiAqIFBsZWFzZSB0aGFuayBNYXJpdXMgb24gR2l0SHViIC9vd2xiZXJ0eiAqXG4gKiBvciB0aGUgd2ViIGh0dHA6Ly93d3cubWFyaXVzb2xiZXJ0ei5kZS8gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuXG5cblxuXG52YXIga2V5Q29kZXMgPSB7XG4gIDk6ICdUQUInLFxuICAxMzogJ0VOVEVSJyxcbiAgMjc6ICdFU0NBUEUnLFxuICAzMjogJ1NQQUNFJyxcbiAgMzU6ICdFTkQnLFxuICAzNjogJ0hPTUUnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn07XG5cbnZhciBjb21tYW5kcyA9IHt9O1xuXG4vLyBGdW5jdGlvbnMgcHVsbGVkIG91dCB0byBiZSByZWZlcmVuY2VhYmxlIGZyb20gaW50ZXJuYWxzXG5mdW5jdGlvbiBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gIGlmICghJGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgIGlmICghX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5pcygnOnZpc2libGUnKSB8fCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmF0dHIoJ3RhYmluZGV4JykgPCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvL29ubHkgaGF2ZSB2aXNpYmxlIGVsZW1lbnRzIGFuZCB0aG9zZSB0aGF0IGhhdmUgYSB0YWJpbmRleCBncmVhdGVyIG9yIGVxdWFsIDBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlS2V5KGV2ZW50KSB7XG4gIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuXG4gIC8vIFJlbW92ZSB1bi1wcmludGFibGUgY2hhcmFjdGVycywgZS5nLiBmb3IgYGZyb21DaGFyQ29kZWAgY2FsbHMgZm9yIENUUkwgb25seSBldmVudHNcbiAga2V5ID0ga2V5LnJlcGxhY2UoL1xcVysvLCAnJyk7XG5cbiAgaWYgKGV2ZW50LnNoaWZ0S2V5KSBrZXkgPSAnU0hJRlRfJyArIGtleTtcbiAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9ICdDVFJMXycgKyBrZXk7XG4gIGlmIChldmVudC5hbHRLZXkpIGtleSA9ICdBTFRfJyArIGtleTtcblxuICAvLyBSZW1vdmUgdHJhaWxpbmcgdW5kZXJzY29yZSwgaW4gY2FzZSBvbmx5IG1vZGlmaWVycyB3ZXJlIHVzZWQgKGUuZy4gb25seSBgQ1RSTF9BTFRgKVxuICBrZXkgPSBrZXkucmVwbGFjZSgvXyQvLCAnJyk7XG5cbiAgcmV0dXJuIGtleTtcbn1cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleTogcGFyc2VLZXksXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXk6IGZ1bmN0aW9uIChldmVudCwgY29tcG9uZW50LCBmdW5jdGlvbnMpIHtcbiAgICB2YXIgY29tbWFuZExpc3QgPSBjb21tYW5kc1tjb21wb25lbnRdLFxuICAgICAgICBrZXlDb2RlID0gdGhpcy5wYXJzZUtleShldmVudCksXG4gICAgICAgIGNtZHMsXG4gICAgICAgIGNvbW1hbmQsXG4gICAgICAgIGZuO1xuXG4gICAgaWYgKCFjb21tYW5kTGlzdCkgcmV0dXJuIGNvbnNvbGUud2FybignQ29tcG9uZW50IG5vdCBkZWZpbmVkIScpO1xuXG4gICAgaWYgKHR5cGVvZiBjb21tYW5kTGlzdC5sdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyB0aGlzIGNvbXBvbmVudCBkb2VzIG5vdCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gbHRyIGFuZCBydGxcbiAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWVyZ2UgbHRyIGFuZCBydGw6IGlmIGRvY3VtZW50IGlzIHJ0bCwgcnRsIG92ZXJ3cml0ZXMgbHRyIGFuZCB2aWNlIHZlcnNhXG4gICAgICBpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImNcIiAvKiBydGwgKi9dKSgpKSBjbWRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtlbHNlIGNtZHMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGV4ZWN1dGUgZnVuY3Rpb24gIGlmIGV4aXN0c1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gZm4uYXBwbHkoKTtcbiAgICAgIGlmIChmdW5jdGlvbnMuaGFuZGxlZCB8fCB0eXBlb2YgZnVuY3Rpb25zLmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBoYW5kbGVkXG4gICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuXG4gIGZpbmRGb2N1c2FibGU6IGZpbmRGb2N1c2FibGUsXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3RlcjogZnVuY3Rpb24gKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH0sXG5cblxuICAvLyBUT0RPOTQzODogVGhlc2UgcmVmZXJlbmNlcyB0byBLZXlib2FyZCBuZWVkIHRvIG5vdCByZXF1aXJlIGdsb2JhbC4gV2lsbCAndGhpcycgd29yayBpbiB0aGlzIGNvbnRleHQ/XG4gIC8vXG4gIC8qKlxuICAgKiBUcmFwcyB0aGUgZm9jdXMgaW4gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSAge2pRdWVyeX0gJGVsZW1lbnQgIGpRdWVyeSBvYmplY3QgdG8gdHJhcCB0aGUgZm91Y3MgaW50by5cbiAgICovXG4gIHRyYXBGb2N1czogZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgdmFyICRmb2N1c2FibGUgPSBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSxcbiAgICAgICAgJGZpcnN0Rm9jdXNhYmxlID0gJGZvY3VzYWJsZS5lcSgwKSxcbiAgICAgICAgJGxhc3RGb2N1c2FibGUgPSAkZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgICRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnRyYXBmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGxhc3RGb2N1c2FibGVbMF0gJiYgcGFyc2VLZXkoZXZlbnQpID09PSAnVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkZmlyc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSAkZmlyc3RGb2N1c2FibGVbMF0gJiYgcGFyc2VLZXkoZXZlbnQpID09PSAnU0hJRlRfVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkbGFzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgdHJhcHBlZCBmb2N1cyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHJlbGVhc2UgdGhlIGZvY3VzIGZvci5cbiAgICovXG4gIHJlbGVhc2VGb2N1czogZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnRyYXBmb2N1cycpO1xuICB9XG59O1xuXG4vKlxuICogQ29uc3RhbnRzIGZvciBlYXNpZXIgY29tcGFyaW5nLlxuICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gKi9cbmZ1bmN0aW9uIGdldEtleUNvZGVzKGtjcykge1xuICB2YXIgayA9IHt9O1xuICBmb3IgKHZhciBrYyBpbiBrY3MpIHtcbiAgICBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgfXJldHVybiBrO1xufVxuXG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmlnZ2VyczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXG5cblxuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpO1xuXG52YXIgdHJpZ2dlcnMgPSBmdW5jdGlvbiAoZWwsIHR5cGUpIHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZClbdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKHR5cGUgKyAnLnpmLnRyaWdnZXInLCBbZWxdKTtcbiAgfSk7XG59O1xuXG52YXIgVHJpZ2dlcnMgPSB7XG4gIExpc3RlbmVyczoge1xuICAgIEJhc2ljOiB7fSxcbiAgICBHbG9iYWw6IHt9XG4gIH0sXG4gIEluaXRpYWxpemVyczoge31cbn07XG5cblRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYyA9IHtcbiAgb3Blbkxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ29wZW4nKTtcbiAgfSxcbiAgY2xvc2VMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdjbG9zZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICd0b2dnbGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCd0b2dnbGUuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgY2xvc2VhYmxlTGlzdGVuZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAhPT0gJycpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiYVwiIC8qIE1vdGlvbiAqL10uYW5pbWF0ZU91dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmZhZGVPdXQoKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUZvY3VzTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpXSk7XG4gIH1cbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2Nsb3NlLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZWFibGVdLCBbZGF0YS1jbG9zYWJsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGUtZm9jdXNdIHdpbGwgcmVzcG9uZCB0byBjb21pbmcgaW4gYW5kIG91dCBvZiBmb2N1c1xuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG59O1xuXG4vLyBNb3JlIEdsb2JhbC9jb21wbGV4IGxpc3RlbmVycyBhbmQgdHJpZ2dlcnNcblRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwgPSB7XG4gIHJlc2l6ZUxpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgcmVzaXplIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJyZXNpemVcIik7XG4gIH0sXG4gIHNjcm9sbExpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gIH0sXG4gIGNsb3NlTWVMaXN0ZW5lcjogZnVuY3Rpb24gKGUsIHBsdWdpbklkKSB7XG4gICAgdmFyIHBsdWdpbiA9IGUubmFtZXNwYWNlLnNwbGl0KCcuJylbMF07XG4gICAgdmFyIHBsdWdpbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcGx1Z2luICsgJ10nKS5ub3QoJ1tkYXRhLXlldGktYm94PVwiJyArIHBsdWdpbklkICsgJ1wiXScpO1xuXG4gICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBHbG9iYWwsIHBhcnNlcyB3aG9sZSBkb2N1bWVudC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIgPSBmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICBwbHVnTmFtZXMgPSBbJ2Ryb3Bkb3duJywgJ3Rvb2x0aXAnLCAncmV2ZWFsJ107XG5cbiAgaWYgKHBsdWdpbk5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnTmFtZXMucHVzaChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGx1Z2luTmFtZVswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHlldGlCb3hlcy5sZW5ndGgpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuICdjbG9zZW1lLnpmLicgKyBuYW1lO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuY2xvc2VNZUxpc3RlbmVyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgdHJpZ2dlciwgbGlzdGVuZXIpIHtcbiAgdmFyIHRpbWVyID0gdm9pZCAwLFxuICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYodHJpZ2dlcikub24odHJpZ2dlciwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCBkZWJvdW5jZSB8fCAxMCk7IC8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gIH0pO1xufVxuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAncmVzaXplLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnJlc2l6ZUxpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXNjcm9sbF0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAnc2Nyb2xsLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnNjcm9sbExpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyICRub2RlcyA9ICRlbGVtLmZpbmQoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbiAobXV0YXRpb25SZWNvcmRzTGlzdCkge1xuICAgIHZhciAkdGFyZ2V0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShtdXRhdGlvblJlY29yZHNMaXN0WzBdLnRhcmdldCk7XG5cbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJzY3JvbGxcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInJlc2l6ZVwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy9ub3RoaW5nXG4gICAgfVxuICB9O1xuXG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgLy9mb3IgZWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdG8gbGlzdGVuIGZvciByZXNpemluZywgc2Nyb2xsaW5nLCBvciBtdXRhdGlvbiBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSAkbm9kZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICB2YXIgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZSgkbm9kZXNbaV0sIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbXCJkYXRhLWV2ZW50c1wiLCBcInN0eWxlXCJdIH0pO1xuICAgIH1cbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuXG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lcigkZG9jdW1lbnQpO1xufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyKCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIoKTtcbn07XG5cblRyaWdnZXJzLmluaXQgPSBmdW5jdGlvbiAoJCwgRm91bmRhdGlvbikge1xuICBpZiAodHlwZW9mICQudHJpZ2dlcnNJbml0aWFsaXplZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpO1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkLnRyaWdnZXJzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKEZvdW5kYXRpb24pIHtcbiAgICBGb3VuZGF0aW9uLlRyaWdnZXJzID0gVHJpZ2dlcnM7XG4gICAgLy8gTGVnYWN5IGluY2x1ZGVkIHRvIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIGZvciBub3cuXG4gICAgRm91bmRhdGlvbi5JSGVhcllvdSA9IFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnM7XG4gIH1cbn07XG5cblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1vdmU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNb3Rpb247IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cblxuXG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG52YXIgaW5pdENsYXNzZXMgPSBbJ211aS1lbnRlcicsICdtdWktbGVhdmUnXTtcbnZhciBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxudmFyIE1vdGlvbiA9IHtcbiAgYW5pbWF0ZUluOiBmdW5jdGlvbiAoZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUodHJ1ZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH0sXG5cbiAgYW5pbWF0ZU91dDogZnVuY3Rpb24gKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gTW92ZShkdXJhdGlvbiwgZWxlbSwgZm4pIHtcbiAgdmFyIGFuaW0sXG4gICAgICBwcm9nLFxuICAgICAgc3RhcnQgPSBudWxsO1xuICAvLyBjb25zb2xlLmxvZygnY2FsbGVkJyk7XG5cbiAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG4gICAgZWxlbS50cmlnZ2VyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKS50cmlnZ2VySGFuZGxlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZSh0cykge1xuICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gdHM7XG4gICAgLy8gY29uc29sZS5sb2coc3RhcnQsIHRzKTtcbiAgICBwcm9nID0gdHMgLSBzdGFydDtcbiAgICBmbi5hcHBseShlbGVtKTtcblxuICAgIGlmIChwcm9nIDwgZHVyYXRpb24pIHtcbiAgICAgIGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUsIGVsZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnQuYWRkQ2xhc3MoYW5pbWF0aW9uKS5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24nLCAnJykuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUoX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImJcIiAvKiB0cmFuc2l0aW9uZW5kICovXSkoZWxlbWVudCksIGZpbmlzaCk7XG5cbiAgLy8gSGlkZXMgdGhlIGVsZW1lbnQgKGZvciBvdXQgYW5pbWF0aW9ucyksIHJlc2V0cyB0aGUgZWxlbWVudCwgYW5kIHJ1bnMgYSBjYWxsYmFja1xuICBmdW5jdGlvbiBmaW5pc2goKSB7XG4gICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICByZXNldCgpO1xuICAgIGlmIChjYikgY2IuYXBwbHkoZWxlbWVudCk7XG4gIH1cblxuICAvLyBSZXNldHMgdHJhbnNpdGlvbnMgYW5kIHJlbW92ZXMgbW90aW9uLXNwZWNpZmljIGNsYXNzZXNcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoaW5pdENsYXNzICsgJyAnICsgYWN0aXZlQ2xhc3MgKyAnICcgKyBhbmltYXRpb24pO1xuICB9XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEJveDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXG5cblxudmFyIEJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgT3ZlcmxhcEFyZWE6IE92ZXJsYXBBcmVhLFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzLFxuICBHZXRFeHBsaWNpdE9mZnNldHM6IEdldEV4cGxpY2l0T2Zmc2V0c1xufTtcblxuLyoqXG4gKiBDb21wYXJlcyB0aGUgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50IHRvIGEgY29udGFpbmVyIGFuZCBkZXRlcm1pbmVzIGNvbGxpc2lvbiBldmVudHMgd2l0aCBjb250YWluZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB0ZXN0IGZvciBjb2xsaXNpb25zLlxuICogQHBhcmFtIHtqUXVlcnl9IHBhcmVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIGJvdW5kaW5nIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbHJPbmx5IC0gc2V0IHRvIHRydWUgdG8gY2hlY2sgbGVmdCBhbmQgcmlnaHQgdmFsdWVzIG9ubHkuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRiT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIHRvcCBhbmQgYm90dG9tIHZhbHVlcyBvbmx5LlxuICogQGRlZmF1bHQgaWYgbm8gcGFyZW50IG9iamVjdCBwYXNzZWQsIGRldGVjdHMgY29sbGlzaW9ucyB3aXRoIGB3aW5kb3dgLlxuICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiBjb2xsaXNpb24gZnJlZSwgZmFsc2UgaWYgYSBjb2xsaXNpb24gaW4gYW55IGRpcmVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gSW1Ob3RUb3VjaGluZ1lvdShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgcmV0dXJuIE92ZXJsYXBBcmVhKGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHksIGlnbm9yZUJvdHRvbSkgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBPdmVybGFwQXJlYShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wT3ZlcixcbiAgICAgIGJvdHRvbU92ZXIsXG4gICAgICBsZWZ0T3ZlcixcbiAgICAgIHJpZ2h0T3ZlcjtcbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tT3ZlciA9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wIC0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0KTtcbiAgICB0b3BPdmVyID0gZWxlRGltcy5vZmZzZXQudG9wIC0gcGFyRGltcy5vZmZzZXQudG9wO1xuICAgIGxlZnRPdmVyID0gZWxlRGltcy5vZmZzZXQubGVmdCAtIHBhckRpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gcGFyRGltcy53aWR0aCArIHBhckRpbXMub2Zmc2V0LmxlZnQgLSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGgpO1xuICB9IGVsc2Uge1xuICAgIGJvdHRvbU92ZXIgPSBlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0ICsgZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgLSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQpO1xuICAgIHRvcE92ZXIgPSBlbGVEaW1zLm9mZnNldC50b3AgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcDtcbiAgICBsZWZ0T3ZlciA9IGVsZURpbXMub2Zmc2V0LmxlZnQgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoKTtcbiAgfVxuXG4gIGJvdHRvbU92ZXIgPSBpZ25vcmVCb3R0b20gPyAwIDogTWF0aC5taW4oYm90dG9tT3ZlciwgMCk7XG4gIHRvcE92ZXIgPSBNYXRoLm1pbih0b3BPdmVyLCAwKTtcbiAgbGVmdE92ZXIgPSBNYXRoLm1pbihsZWZ0T3ZlciwgMCk7XG4gIHJpZ2h0T3ZlciA9IE1hdGgubWluKHJpZ2h0T3ZlciwgMCk7XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0T3ZlciArIHJpZ2h0T3ZlcjtcbiAgfVxuICBpZiAodGJPbmx5KSB7XG4gICAgcmV0dXJuIHRvcE92ZXIgKyBib3R0b21PdmVyO1xuICB9XG5cbiAgLy8gdXNlIHN1bSBvZiBzcXVhcmVzIGIvYyB3ZSBjYXJlIGFib3V0IG92ZXJsYXAgYXJlYS5cbiAgcmV0dXJuIE1hdGguc3FydCh0b3BPdmVyICogdG9wT3ZlciArIGJvdHRvbU92ZXIgKiBib3R0b21PdmVyICsgbGVmdE92ZXIgKiBsZWZ0T3ZlciArIHJpZ2h0T3ZlciAqIHJpZ2h0T3Zlcik7XG59XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSkge1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0b3AgYW5kIGxlZnQgaW50ZWdlciBwaXhlbCB2YWx1ZXMgZm9yIGR5bmFtaWNhbGx5IHJlbmRlcmVkIGVsZW1lbnRzLFxuICogc3VjaCBhczogVG9vbHRpcCwgUmV2ZWFsLCBhbmQgRHJvcGRvd24uIE1haW50YWluZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBhbmQgd2hlcmVcbiAqIHlvdSBkb24ndCBrbm93IGFsaWdubWVudCwgYnV0IGdlbmVyYWxseSBmcm9tXG4gKiA2LjQgZm9yd2FyZCB5b3Ugc2hvdWxkIHVzZSBHZXRFeHBsaWNpdE9mZnNldHMsIGFzIEdldE9mZnNldHMgY29uZmxhdGVzIHBvc2l0aW9uIGFuZCBhbGlnbm1lbnQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICBjb25zb2xlLmxvZyhcIk5PVEU6IEdldE9mZnNldHMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBHZXRFeHBsaWNpdE9mZnNldHMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiA2LjVcIik7XG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJjXCIgLyogcnRsICovXSkoKSA/IEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICd0b3AnLCAnbGVmdCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpIDogR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ3RvcCcsICdyaWdodCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImNcIiAvKiBydGwgKi9dKSgpID8gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2JvdHRvbScsICdsZWZ0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykgOiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnYm90dG9tJywgJ3JpZ2h0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnY2VudGVyIHRvcCc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ3RvcCcsICdjZW50ZXInLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdjZW50ZXIgYm90dG9tJzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnYm90dG9tJywgJ2NlbnRlcicsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnbGVmdCcsICdjZW50ZXInLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdyaWdodCcsICdjZW50ZXInLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdsZWZ0IGJvdHRvbSc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2JvdHRvbScsICdsZWZ0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAncmlnaHQgYm90dG9tJzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnYm90dG9tJywgJ3JpZ2h0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkuLi4gdGhpcyBhbG9uZyB3aXRoIHRoZSByZXZlYWwgYW5kIHJldmVhbCBmdWxsXG4gICAgLy8gY2xhc3NlcyBhcmUgdGhlIG9ubHkgb25lcyB0aGF0IGRpZG4ndCByZWZlcmVuY2UgYW5jaG9yXG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQgKyAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC8gMiAtICRlbGVEaW1zLndpZHRoIC8gMiArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgJGVsZURpbXMud2luZG93RGltcy5oZWlnaHQgLyAyIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIgKyB2T2Zmc2V0KVxuICAgICAgfTtcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyICsgaE9mZnNldCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyB2T2Zmc2V0XG4gICAgICB9O1xuICAgIGNhc2UgJ3JldmVhbCBmdWxsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJjXCIgLyogcnRsICovXSkoKSA/ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQgOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH07XG5cbiAgfVxufVxuXG5mdW5jdGlvbiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgYWxpZ25tZW50LCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSB7XG4gIHZhciAkZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICAkYW5jaG9yRGltcyA9IGFuY2hvciA/IEdldERpbWVuc2lvbnMoYW5jaG9yKSA6IG51bGw7XG5cbiAgdmFyIHRvcFZhbCwgbGVmdFZhbDtcblxuICAvLyBzZXQgcG9zaXRpb24gcmVsYXRlZCBhdHRyaWJ1dGVcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHRvcFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgdG9wVmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGxlZnRWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBzZXQgYWxpZ25tZW50IHJlbGF0ZWQgYXR0cmlidXRlXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICBsZWZ0VmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgbGVmdFZhbCA9IGlzT3ZlcmZsb3cgPyBoT2Zmc2V0IDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCAvIDIgLSAkZWxlRGltcy53aWR0aCAvIDIgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wIC0gdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAtICRlbGVEaW1zLmhlaWdodDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAvIDIgLSAkZWxlRGltcy5oZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHsgdG9wOiB0b3BWYWwsIGxlZnQ6IGxlZnRWYWwgfTtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gb25JbWFnZXNMb2FkZWQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxuLyoqXG4gKiBSdW5zIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpbWFnZXMgYXJlIGZ1bGx5IGxvYWRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZXMgLSBJbWFnZShzKSB0byBjaGVjayBpZiBsb2FkZWQuXG4gKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gb25JbWFnZXNMb2FkZWQoaW1hZ2VzLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICB1bmxvYWRlZCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGltYWdlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDaGVjayBpZiBpbWFnZSBpcyBsb2FkZWRcbiAgICBpZiAodGhpcy5jb21wbGV0ZSAmJiB0aGlzLm5hdHVyYWxXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgYWJvdmUgY2hlY2sgZmFpbGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIC8vIFN0aWxsIGNvdW50IGltYWdlIGFzIGxvYWRlZCBpZiBpdCBmaW5hbGl6ZXMgd2l0aCBhbiBlcnJvci5cbiAgICAgIHZhciBldmVudHMgPSBcImxvYWQuemYuaW1hZ2VzIGVycm9yLnpmLmltYWdlc1wiO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShpbWFnZSkub25lKGV2ZW50cywgZnVuY3Rpb24gbWUoZXZlbnQpIHtcbiAgICAgICAgLy8gVW5iaW5kIHRoZSBldmVudCBsaXN0ZW5lcnMuIFdlJ3JlIHVzaW5nICdvbmUnIGJ1dCBvbmx5IG9uZSBvZiB0aGUgdHdvIGV2ZW50cyB3aWxsIGhhdmUgZmlyZWQuXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykub2ZmKGV2ZW50cywgbWUpO1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgICBpbWFnZS5zcmMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmF0dHIoJ3NyYycpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE5lc3Q7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxudmFyIE5lc3QgPSB7XG4gIEZlYXRoZXI6IGZ1bmN0aW9uIChtZW51KSB7XG4gICAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd6Zic7XG5cbiAgICBtZW51LmF0dHIoJ3JvbGUnLCAnbWVudWJhcicpO1xuXG4gICAgdmFyIGl0ZW1zID0gbWVudS5maW5kKCdsaScpLmF0dHIoeyAncm9sZSc6ICdtZW51aXRlbScgfSksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCcsXG4gICAgICAgIGFwcGx5QXJpYSA9IHR5cGUgIT09ICdhY2NvcmRpb24nOyAvLyBBY2NvcmRpb25zIGhhbmRsZSB0aGVpciBvd24gQVJJQSBhdHRyaXV0ZXMuXG5cbiAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkaXRlbSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuXG4gICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoaGFzU3ViQ2xhc3MpO1xuICAgICAgICAkc3ViLmFkZENsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLmF0dHIoeyAnZGF0YS1zdWJtZW51JzogJycgfSk7XG4gICAgICAgIGlmIChhcHBseUFyaWEpIHtcbiAgICAgICAgICAkaXRlbS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogJGl0ZW0uY2hpbGRyZW4oJ2E6Zmlyc3QnKS50ZXh0KClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBOb3RlOiAgRHJpbGxkb3ducyBiZWhhdmUgZGlmZmVyZW50bHkgaW4gaG93IHRoZXkgaGlkZSwgYW5kIHNvIG5lZWRcbiAgICAgICAgICAvLyBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMuICBXZSBzaG91bGQgbG9vayBpZiB0aGlzIHBvc3NpYmx5IG92ZXItZ2VuZXJhbGl6ZWRcbiAgICAgICAgICAvLyB1dGlsaXR5IChOZXN0KSBpcyBhcHByb3ByaWF0ZSB3aGVuIHdlIHJld29yayBtZW51cyBpbiA2LjRcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RyaWxsZG93bicpIHtcbiAgICAgICAgICAgICRpdGVtLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAkc3ViLmFkZENsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLmF0dHIoe1xuICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdkcmlsbGRvd24nKSB7XG4gICAgICAgICAgJHN1Yi5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICBCdXJuOiBmdW5jdGlvbiAobWVudSwgdHlwZSkge1xuICAgIHZhciAvL2l0ZW1zID0gbWVudS5maW5kKCdsaScpLFxuICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCc7XG5cbiAgICBtZW51LmZpbmQoJz5saSwgLm1lbnUsIC5tZW51ID4gbGknKS5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnICcgKyBoYXNTdWJDbGFzcyArICcgaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlJykucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykuY3NzKCdkaXNwbGF5JywgJycpO1xuICB9XG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQWNjb3JkaW9uOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cbi8qKlxuICogQWNjb3JkaW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hY2NvcmRpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqL1xuXG52YXIgQWNjb3JkaW9uID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEFjY29yZGlvbiwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gQWNjb3JkaW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvcmRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBY2NvcmRpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBY2NvcmRpb24pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBY2NvcmRpb24sIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIEFjY29yZGlvblxuICAgICAqIEBmaXJlcyBBY2NvcmRpb24jaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgQWNjb3JkaW9uLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0FjY29yZGlvbic7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1hY2NvcmRpb24taXRlbV0nKTtcblxuICAgICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uIChpZHgsIGVsKSB7XG4gICAgICAgIHZhciAkZWwgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGVsKSxcbiAgICAgICAgICAgICRjb250ZW50ID0gJGVsLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKSxcbiAgICAgICAgICAgIGlkID0gJGNvbnRlbnRbMF0uaWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdhY2NvcmRpb24nKSxcbiAgICAgICAgICAgIGxpbmtJZCA9IGVsLmlkIHx8IGlkICsgJy1sYWJlbCc7XG5cbiAgICAgICAgJGVsLmZpbmQoJ2E6Zmlyc3QnKS5hdHRyKHtcbiAgICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgJ2lkJzogbGlua0lkLFxuICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAkY29udGVudC5hdHRyKHsgJ3JvbGUnOiAndGFicGFuZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLCAnYXJpYS1oaWRkZW4nOiB0cnVlLCAnaWQnOiBpZCB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyICRpbml0QWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgdGhpcy5maXJzdFRpbWVJbml0ID0gdHJ1ZTtcbiAgICAgIGlmICgkaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kb3duKCRpbml0QWN0aXZlLCB0aGlzLmZpcnN0VGltZUluaXQpO1xuICAgICAgICB0aGlzLmZpcnN0VGltZUluaXQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2hlY2tEZWVwTGluayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAvL25lZWQgYSBoYXNoIGFuZCBhIHJlbGV2YW50IGFuY2hvciBpbiB0aGlzIHRhYnNldFxuICAgICAgICBpZiAoYW5jaG9yLmxlbmd0aCkge1xuICAgICAgICAgIHZhciAkbGluayA9IF90aGlzMy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInICsgYW5jaG9yICsgJ1wiXScpLFxuICAgICAgICAgICAgICAkYW5jaG9yID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShhbmNob3IpO1xuXG4gICAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCAmJiAkYW5jaG9yKSB7XG4gICAgICAgICAgICBpZiAoISRsaW5rLnBhcmVudCgnW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5kb3duKCRhbmNob3IsIF90aGlzMy5maXJzdFRpbWVJbml0KTtcbiAgICAgICAgICAgICAgX3RoaXMzLmZpcnN0VGltZUluaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vcm9sbCB1cCBhIGxpdHRsZSB0byBzaG93IHRoZSB0aXRsZXNcbiAgICAgICAgICAgIGlmIChfdGhpczMub3B0aW9ucy5kZWVwTGlua1NtdWRnZSkge1xuICAgICAgICAgICAgICB2YXIgX3RoaXMgPSBfdGhpczM7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMuJGVsZW1lbnQub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IG9mZnNldC50b3AgfSwgX3RoaXMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHpwbHVnaW4gaGFzIGRlZXBsaW5rZWQgYXQgcGFnZWxvYWRcbiAgICAgICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2RlZXBsaW5rXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcignZGVlcGxpbmsuemYuYWNjb3JkaW9uJywgWyRsaW5rLCAkYW5jaG9yXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvL3VzZSBicm93c2VyIHRvIG9wZW4gYSB0YWIsIGlmIGl0IGV4aXN0cyBpbiB0aGlzIHRhYnNldFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICB0aGlzLl9jaGVja0RlZXBMaW5rKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgYWNjb3JkaW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgICAgdmFyICR0YWJDb250ZW50ID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgICBpZiAoJHRhYkNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgJGVsZW0uY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbiBrZXlkb3duLnpmLmFjY29yZGlvbicpLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uaGFuZGxlS2V5KGUsICdBY2NvcmRpb24nLCB7XG4gICAgICAgICAgICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyICRhID0gJGVsZW0ucHJldigpLmZpbmQoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBqUXVlcnkgb2JqZWN0IG9mIHRoZSBwYW5lIHRvIHRvZ2dsZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoJHRhcmdldCkge1xuICAgICAgaWYgKCR0YXJnZXQuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uXScpLmlzKCdbZGlzYWJsZWRdJykpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdDYW5ub3QgdG9nZ2xlIGFuIGFjY29yZGlvbiB0aGF0IGlzIGRpc2FibGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgICAgdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZG93bigkdGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIC8vZWl0aGVyIHJlcGxhY2Ugb3IgdXBkYXRlIGJyb3dzZXIgaGlzdG9yeVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5wcmV2KCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlSGlzdG9yeSkge1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgYWNjb3JkaW9uIHRhYiBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpcnN0VGltZSAtIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHJlZmxvdyBzaG91bGQgaGFwcGVuLlxuICAgICAqIEBmaXJlcyBBY2NvcmRpb24jZG93blxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAvKipcbiAgICAgICAqIGNoZWNraW5nIGZpcnN0VGltZSBhbGxvd3MgZm9yIGluaXRpYWwgcmVuZGVyIG9mIHRoZSBhY2NvcmRpb25cbiAgICAgICAqIHRvIHJlbmRlciBwcmVzZXQgaXMtYWN0aXZlIHBhbmVzLlxuICAgICAgICovXG4gICAgICBpZiAoJHRhcmdldC5jbG9zZXN0KCdbZGF0YS1hY2NvcmRpb25dJykuaXMoJ1tkaXNhYmxlZF0nKSAmJiAhZmlyc3RUaW1lKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnQ2Fubm90IGNhbGwgZG93biBvbiBhbiBhY2NvcmRpb24gdGhhdCBpcyBkaXNhYmxlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJHRhcmdldC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKS5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpLmFkZEJhY2soKS5wYXJlbnQoKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kICYmICFmaXJzdFRpbWUpIHtcbiAgICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgICAgaWYgKCRjdXJyZW50QWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMudXAoJGN1cnJlbnRBY3RpdmUubm90KCR0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LnNsaWRlRG93bih0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgdGFiIGlzIGRvbmUgb3BlbmluZy5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbiNkb3duXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpczQuJGVsZW1lbnQudHJpZ2dlcignZG93bi56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgJHRhcmdldC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKSkuYXR0cih7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogdHJ1ZSxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHRhYiBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiB0YWIgdG8gY2xvc2UgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXAoJHRhcmdldCkge1xuICAgICAgaWYgKCR0YXJnZXQuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uXScpLmlzKCdbZGlzYWJsZWRdJykpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdDYW5ub3QgY2FsbCB1cCBvbiBhbiBhY2NvcmRpb24gdGhhdCBpcyBkaXNhYmxlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJGF1bnRzID0gJHRhcmdldC5wYXJlbnQoKS5zaWJsaW5ncygpLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dBbGxDbG9zZWQgJiYgISRhdW50cy5oYXNDbGFzcygnaXMtYWN0aXZlJykgfHwgISR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5zbGlkZVVwKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgdGFiIGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbiN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uJywgWyR0YXJnZXRdKTtcbiAgICAgIH0pO1xuXG4gICAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArICR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5JykpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignLnpmLmFjY29yZGlvbicpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBY2NvcmRpb247XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuQWNjb3JkaW9uLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhbiBhY2NvcmRpb24gcGFuZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlFeHBhbmQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBjbG9zZSBhbGwgcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBwYW5lIHNwZWNpZmllZCBieSBoYXNoIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIGRlZXAgbGluayBzY3JvbGwgdG8gbWFrZSBzdXJlIHRoZSB0b3Agb2YgdGhlIGFjY29yZGlvbiBwYW5lbCBpcyB2aXNpYmxlXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGlua1NtdWRnZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiB0aW1lIChtcykgZm9yIHRoZSBkZWVwIGxpbmsgYWRqdXN0bWVudFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDMwMFxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2VEZWxheTogMzAwLFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGJyb3dzZXIgaGlzdG9yeSB3aXRoIHRoZSBvcGVuIGFjY29yZGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXBkYXRlSGlzdG9yeTogZmFsc2Vcbn07XG5cblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBBY2NvcmRpb25NZW51OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbnZhciBBY2NvcmRpb25NZW51ID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEFjY29yZGlvbk1lbnUsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIEFjY29yZGlvbk1lbnUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvbk1lbnUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBY2NvcmRpb25NZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWNjb3JkaW9uTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFjY29yZGlvbk1lbnUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgQWNjb3JkaW9uTWVudVxuICAgICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIEFjY29yZGlvbk1lbnUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0FjY29yZGlvbk1lbnUnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWdpc3RlcignQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnb3BlbicsXG4gICAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdjbG9zZScsXG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2VBbGwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIG1lbnUgYnkgaGlkaW5nIGFsbCBuZXN0ZWQgbWVudXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfX1tcImFcIiAvKiBOZXN0ICovXS5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7IC8vLmZpbmQoJ2EnKS5jc3MoJ3BhZGRpbmctbGVmdCcsICcxcmVtJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAncm9sZSc6ICd0cmVlJyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogdGhpcy5vcHRpb25zLm11bHRpT3BlblxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJG1lbnVMaW5rcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgdGhpcy4kbWVudUxpbmtzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlua0lkID0gdGhpcy5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ2FjYy1tZW51LWxpbmsnKSxcbiAgICAgICAgICAgICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICRzdWIgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSxcbiAgICAgICAgICAgIHN1YklkID0gJHN1YlswXS5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgICBpc0FjdGl2ZSA9ICRzdWIuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgICAkZWxlbS5hZGRDbGFzcygnaGFzLXN1Ym1lbnUtdG9nZ2xlJyk7XG4gICAgICAgICAgJGVsZW0uY2hpbGRyZW4oJ2EnKS5hZnRlcignPGJ1dHRvbiBpZD1cIicgKyBsaW5rSWQgKyAnXCIgY2xhc3M9XCJzdWJtZW51LXRvZ2dsZVwiIGFyaWEtY29udHJvbHM9XCInICsgc3ViSWQgKyAnXCIgYXJpYS1leHBhbmRlZD1cIicgKyBpc0FjdGl2ZSArICdcIiB0aXRsZT1cIicgKyBfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGVUZXh0ICsgJ1wiPjxzcGFuIGNsYXNzPVwic3VibWVudS10b2dnbGUtdGV4dFwiPicgKyBfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGVUZXh0ICsgJzwvc3Bhbj48L2J1dHRvbj4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogc3ViSWQsXG4gICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgJHN1Yi5hdHRyKHtcbiAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAgICdhcmlhLWhpZGRlbic6ICFpc0FjdGl2ZSxcbiAgICAgICAgICAncm9sZSc6ICdncm91cCcsXG4gICAgICAgICAgJ2lkJzogc3ViSWRcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndHJlZWl0ZW0nXG4gICAgICB9KTtcbiAgICAgIHZhciBpbml0UGFuZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKTtcbiAgICAgIGlmIChpbml0UGFuZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5kb3duKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgbWVudS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRzdWJtZW51ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc3VibWVudVRvZ2dsZSkge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5jaGlsZHJlbignLnN1Ym1lbnUtdG9nZ2xlJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb25NZW51Jykub24oJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRzdWJtZW51KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9ubWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG5cbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpIC0gMSkpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkgKyAxLCAkZWxlbWVudHMubGVuZ3RoIC0gMSkpLmZpbmQoJ2EnKS5maXJzdCgpO1xuXG4gICAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5maW5kKCdsaTpmaXJzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgICAgIC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XTp2aXNpYmxlJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHByZXZpb3VzIGVsZW1lbnQgaGFzIG9wZW4gc3ViIG1lbnVcbiAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJzpsYXN0LWNoaWxkJykpIHtcbiAgICAgICAgICAgICAgLy8gaXMgbGFzdCBlbGVtZW50IG9mIHN1YiBtZW51XG4gICAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAgICAgb3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgICAkdGFyZ2V0LmZpbmQoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgkdGFyZ2V0Lmxlbmd0aCAmJiAhJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICAgIC8vIGNsb3NlIGFjdGl2ZSBzdWIgb2YgdGhpcyBpdGVtXG4gICAgICAgICAgICAgIF90aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgICBfdGhpcy51cCgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZG93bjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG5leHRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc3VibWVudVRvZ2dsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pOyAvLy5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyBhbGwgcGFuZXMgb2YgdGhlIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hpZGVBbGwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlQWxsKCkge1xuICAgICAgdGhpcy51cCh0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGFsbCBwYW5lcyBvZiB0aGUgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2hvd0FsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dBbGwoKSB7XG4gICAgICB0aGlzLmRvd24odGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBvcGVuL2Nsb3NlIHN0YXRlIG9mIGEgc3VibWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIHRoZSBzdWJtZW51IHRvIHRvZ2dsZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoJHRhcmdldCkge1xuICAgICAgaWYgKCEkdGFyZ2V0LmlzKCc6YW5pbWF0ZWQnKSkge1xuICAgICAgICBpZiAoISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNkb3duXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb3duKCR0YXJnZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpT3Blbikge1xuICAgICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXR0cih7ICdhcmlhLWhpZGRlbic6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgJHRhcmdldC5wcmV2KCcuc3VibWVudS10b2dnbGUnKS5hdHRyKHsgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHRhcmdldC5wYXJlbnQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKS5hdHRyKHsgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlIH0pO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LnNsaWRlRG93bihfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSNkb3duXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdWItbWVudSBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQWxsIHN1Yi1tZW51cyBpbnNpZGUgdGhlIHRhcmdldCB3aWxsIGJlIGNsb3NlZCBhcyB3ZWxsLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjdXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cCgkdGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgJHRhcmdldC5zbGlkZVVwKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIGNvbGxhcHNpbmcgdXAuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb25NZW51JywgWyR0YXJnZXRdKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgJG1lbnVzID0gJHRhcmdldC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAoMCkuYWRkQmFjaygpLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VibWVudVRvZ2dsZSkge1xuICAgICAgICAkbWVudXMucHJldignLnN1Ym1lbnUtdG9nZ2xlJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRtZW51cy5wYXJlbnQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFjY29yZGlvbiBtZW51LlxuICAgICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlRG93bigwKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLmhhcy1zdWJtZW51LXRvZ2dsZScpLnJlbW92ZUNsYXNzKCdoYXMtc3VibWVudS10b2dnbGUnKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcuc3VibWVudS10b2dnbGUnKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fW1wiYVwiIC8qIE5lc3QgKi9dLkJ1cm4odGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBY2NvcmRpb25NZW51O1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cbkFjY29yZGlvbk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGEgc3VibWVudSBpbiBtcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFkZHMgYSBzZXBhcmF0ZSBzdWJtZW51IHRvZ2dsZSBidXR0b24uIFRoaXMgYWxsb3dzIHRoZSBwYXJlbnQgaXRlbSB0byBoYXZlIGEgbGluay5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBzdWJtZW51VG9nZ2xlOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHVzZWQgZm9yIHRoZSBzdWJtZW51IHRvZ2dsZSBpZiBlbmFibGVkLiBUaGlzIGlzIHVzZWQgZm9yIHNjcmVlbiByZWFkZXJzIG9ubHkuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgc3VibWVudVRvZ2dsZVRleHQ6ICdUb2dnbGUgbWVudScsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWVudSB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIG11bHRpT3BlbjogdHJ1ZVxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERyaWxsZG93bjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBEcmlsbGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICovXG5cbnZhciBEcmlsbGRvd24gPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoRHJpbGxkb3duLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBEcmlsbGRvd24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyaWxsZG93bik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERyaWxsZG93bi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyaWxsZG93bikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyaWxsZG93biwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyaWxsZG93biBtZW51LlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIERyaWxsZG93blxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgRHJpbGxkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdEcmlsbGRvd24nOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWdpc3RlcignRHJpbGxkb3duJywge1xuICAgICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJyxcbiAgICAgICAgJ1RBQic6ICdkb3duJyxcbiAgICAgICAgJ1NISUZUX1RBQic6ICd1cCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBkcmlsbGRvd24gYnkgY3JlYXRpbmcgalF1ZXJ5IGNvbGxlY3Rpb25zIG9mIGVsZW1lbnRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfX1tcImFcIiAvKiBOZXN0ICovXS5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvQXBwbHlDbGFzcykge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdkcmlsbGRvd24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndHJlZScsXG4gICAgICAgICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaS5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignYScpO1xuICAgICAgdGhpcy4kc3VibWVudXMgPSB0aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYXR0cigncm9sZScsICdncm91cCcpO1xuICAgICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLm5vdCgnLmpzLWRyaWxsZG93bi1iYWNrJykuYXR0cigncm9sZScsICd0cmVlaXRlbScpLmZpbmQoJ2EnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1tdXRhdGUnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZHJpbGxkb3duJykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdkcmlsbGRvd24nKSk7XG5cbiAgICAgIHRoaXMuX3ByZXBhcmVNZW51KCk7XG4gICAgICB0aGlzLl9yZWdpc3RlckV2ZW50cygpO1xuXG4gICAgICB0aGlzLl9rZXlib2FyZEV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHByZXBhcmVzIGRyaWxsZG93biBtZW51IGJ5IHNldHRpbmcgYXR0cmlidXRlcyB0byBsaW5rcyBhbmQgZWxlbWVudHNcbiAgICAgKiBzZXRzIGEgbWluIGhlaWdodCB0byBwcmV2ZW50IGNvbnRlbnQganVtcGluZ1xuICAgICAqIHdyYXBzIHRoZSBlbGVtZW50IGlmIG5vdCBhbHJlYWR5IHdyYXBwZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcHJlcGFyZU1lbnUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlcGFyZU1lbnUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgLy8gaWYoIXRoaXMub3B0aW9ucy5ob2xkT3Blbil7XG4gICAgICAvLyAgIHRoaXMuX21lbnVMaW5rRXZlbnRzKCk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgICAgdmFyICRzdWIgPSAkbGluay5wYXJlbnQoKTtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucGFyZW50TGluaykge1xuICAgICAgICAgICRsaW5rLmNsb25lKCkucHJlcGVuZFRvKCRzdWIuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpLndyYXAoJzxsaSBjbGFzcz1cImlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0gaXMtc3VibWVudS1pdGVtIGlzLWRyaWxsZG93bi1zdWJtZW51LWl0ZW1cIiByb2xlPVwibWVudWl0ZW1cIj48L2xpPicpO1xuICAgICAgICB9XG4gICAgICAgICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicsICRsaW5rLmF0dHIoJ2hyZWYnKSkucmVtb3ZlQXR0cignaHJlZicpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgICRsaW5rLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmF0dHIoe1xuICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgJ3RhYmluZGV4JzogMCxcbiAgICAgICAgICAncm9sZSc6ICdncm91cCdcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9ldmVudHMoJGxpbmspO1xuICAgICAgfSk7XG4gICAgICB0aGlzLiRzdWJtZW51cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRtZW51ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICRiYWNrID0gJG1lbnUuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrJyk7XG4gICAgICAgIGlmICghJGJhY2subGVuZ3RoKSB7XG4gICAgICAgICAgc3dpdGNoIChfdGhpcy5vcHRpb25zLmJhY2tCdXR0b25Qb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICAgICAgICAkbWVudS5hcHBlbmQoX3RoaXMub3B0aW9ucy5iYWNrQnV0dG9uKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidG9wXCI6XG4gICAgICAgICAgICAgICRtZW51LnByZXBlbmQoX3RoaXMub3B0aW9ucy5iYWNrQnV0dG9uKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5zdXBwb3J0ZWQgYmFja0J1dHRvblBvc2l0aW9uIHZhbHVlICdcIiArIF90aGlzLm9wdGlvbnMuYmFja0J1dHRvblBvc2l0aW9uICsgXCInXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fYmFjaygkbWVudSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kc3VibWVudXMuYWRkQ2xhc3MoJ2ludmlzaWJsZScpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkge1xuICAgICAgICB0aGlzLiRzdWJtZW51cy5hZGRDbGFzcygnZHJpbGxkb3duLXN1Ym1lbnUtY292ZXItcHJldmlvdXMnKTtcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlIGEgd3JhcHBlciBvbiBlbGVtZW50IGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bicpKSB7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMub3B0aW9ucy53cmFwcGVyKS5hZGRDbGFzcygnaXMtZHJpbGxkb3duJyk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZUhlaWdodCkgdGhpcy4kd3JhcHBlci5hZGRDbGFzcygnYW5pbWF0ZS1oZWlnaHQnKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC53cmFwKHRoaXMuJHdyYXBwZXIpO1xuICAgICAgfVxuICAgICAgLy8gc2V0IHdyYXBwZXJcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGVtZW50LnBhcmVudCgpO1xuICAgICAgdGhpcy4kd3JhcHBlci5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVzaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2l6ZSgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsgJ21heC13aWR0aCc6ICdub25lJywgJ21pbi1oZWlnaHQnOiAnbm9uZScgfSk7XG4gICAgICAvLyBfZ2V0TWF4RGltcyBoYXMgc2lkZSBlZmZlY3RzIChib28pIGJ1dCBjYWxsaW5nIGl0IHNob3VsZCB1cGRhdGUgYWxsIG90aGVyIG5lY2Vzc2FyeSBoZWlnaHRzICYgd2lkdGhzXG4gICAgICB0aGlzLiR3cmFwcGVyLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gZWxlbWVudHMgaW4gdGhlIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBtZW51IGl0ZW0gdG8gYWRkIGhhbmRsZXJzIHRvLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygkZWxlbSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCAnbGknKS5oYXNDbGFzcygnaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JykpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQuZmlyc3RFbGVtZW50Q2hpbGQpe1xuICAgICAgICAvLyAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gfVxuICAgICAgICBfdGhpcy5fc2hvdygkZWxlbS5wYXJlbnQoJ2xpJykpO1xuXG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgICAgIHZhciAkYm9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2JvZHknKTtcbiAgICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byB0aGUgbWVudSBlbGVtZW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWdpc3RlckV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWdpc3RlckV2ZW50cygpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2Nyb2xsVG9wKSB7XG4gICAgICAgIHRoaXMuX2JpbmRIYW5kbGVyID0gdGhpcy5fc2Nyb2xsVG9wLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ29wZW4uemYuZHJpbGxkb3duIGhpZGUuemYuZHJpbGxkb3duIGNsb3NlZC56Zi5kcmlsbGRvd24nLCB0aGlzLl9iaW5kSGFuZGxlcik7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgdGhpcy5fcmVzaXplLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjcm9sbCB0byBUb3Agb2YgRWxlbWVudCBvciBkYXRhLXNjcm9sbC10b3AtZWxlbWVudFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBEcmlsbGRvd24jc2Nyb2xsbWVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Njcm9sbFRvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zY3JvbGxUb3AoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyICRzY3JvbGxUb3BFbGVtZW50ID0gX3RoaXMub3B0aW9ucy5zY3JvbGxUb3BFbGVtZW50ICE9ICcnID8gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShfdGhpcy5vcHRpb25zLnNjcm9sbFRvcEVsZW1lbnQpIDogX3RoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgc2Nyb2xsUG9zID0gcGFyc2VJbnQoJHNjcm9sbFRvcEVsZW1lbnQub2Zmc2V0KCkudG9wICsgX3RoaXMub3B0aW9ucy5zY3JvbGxUb3BPZmZzZXQsIDEwKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2h0bWwsIGJvZHknKS5zdG9wKHRydWUpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IHNjcm9sbFBvcyB9LCBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLCBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICAqIEZpcmVzIGFmdGVyIHRoZSBtZW51IGhhcyBzY3JvbGxlZFxuICAgICAgICAgICogQGV2ZW50IERyaWxsZG93biNzY3JvbGxtZVxuICAgICAgICAgICovXG4gICAgICAgIGlmICh0aGlzID09PSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sJylbMF0pIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Njcm9sbG1lLnpmLmRyaWxsZG93bicpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBrZXlkb3duIGV2ZW50IGxpc3RlbmVyIHRvIGBsaWAncyBpbiB0aGUgbWVudS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfa2V5Ym9hcmRFdmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfa2V5Ym9hcmRFdmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRtZW51SXRlbXMuYWRkKHRoaXMuJGVsZW1lbnQuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrID4gYSwgLmlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0gPiBhJykpLm9uKCdrZXlkb3duLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLmNoaWxkcmVuKCdhJyksXG4gICAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpIC0gMSkpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkgKyAxLCAkZWxlbWVudHMubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uaGFuZGxlS2V5KGUsICdEcmlsbGRvd24nLCB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRlbGVtZW50LmlzKF90aGlzLiRzdWJtZW51QW5jaG9ycykpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZShfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYlwiIC8qIHRyYW5zaXRpb25lbmQgKi9dKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJiXCIgLyogdHJhbnNpdGlvbmVuZCAqL10pKCRlbGVtZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgLy8gRG9uJ3QgdGFwIGZvY3VzIG9uIGZpcnN0IGVsZW1lbnQgaW4gcm9vdCB1bFxuICAgICAgICAgICAgcmV0dXJuICEkZWxlbWVudC5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCc+IGxpOmZpcnN0LWNoaWxkID4gYScpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRvd246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgLy8gRG9uJ3QgdGFwIGZvY3VzIG9uIGxhc3QgZWxlbWVudCBpbiByb290IHVsXG4gICAgICAgICAgICByZXR1cm4gISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGk6bGFzdC1jaGlsZCA+IGEnKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgY2xvc2Ugb24gZWxlbWVudCBpbiByb290IHVsXG4gICAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGkgPiBhJykpKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgpLnBhcmVudCgpKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCkucGFyZW50KCkuc2libGluZ3MoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEkZWxlbWVudC5pcyhfdGhpcy4kbWVudUl0ZW1zKSkge1xuICAgICAgICAgICAgICAvLyBub3QgbWVudSBpdGVtIG1lYW5zIGJhY2sgYnV0dG9uXG4gICAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYlwiIC8qIHRyYW5zaXRpb25lbmQgKi9dKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpLmNoaWxkcmVuKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LmlzKF90aGlzLiRzdWJtZW51QW5jaG9ycykpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZShfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYlwiIC8qIHRyYW5zaXRpb25lbmQgKi9dKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI2Nsb3NlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZUFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlQWxsKCkge1xuICAgICAgdmFyICRlbGVtID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUuaXMtYWN0aXZlJykuYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgdGhpcy4kd3JhcHBlci5jc3MoeyBoZWlnaHQ6ICRlbGVtLnBhcmVudCgpLmNsb3Nlc3QoJ3VsJykuZGF0YSgnY2FsY0hlaWdodCcpIH0pO1xuICAgICAgJGVsZW0ub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJiXCIgLyogdHJhbnNpdGlvbmVuZCAqL10pKCRlbGVtKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBmdWxseSBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2Nsb3NlZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlZC56Zi5kcmlsbGRvd24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVyIGZvciBlYWNoIGBiYWNrYCBidXR0b24sIGFuZCBjbG9zZXMgb3BlbiBtZW51cy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI2JhY2tcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBhZGQgYGJhY2tgIGV2ZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYmFjaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9iYWNrKCRlbGVtKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKTtcbiAgICAgICRlbGVtLmNoaWxkcmVuKCcuanMtZHJpbGxkb3duLWJhY2snKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21vdXNldXAgb24gYmFjaycpO1xuICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBwYXJlbnQgc3VibWVudSwgY2FsbCBzaG93XG4gICAgICAgIHZhciBwYXJlbnRTdWJNZW51ID0gJGVsZW0ucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGlmIChwYXJlbnRTdWJNZW51Lmxlbmd0aCkge1xuICAgICAgICAgIF90aGlzLl9zaG93KHBhcmVudFN1Yk1lbnUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVyIHRvIG1lbnUgaXRlbXMgdy9vIHN1Ym1lbnVzIHRvIGNsb3NlIG9wZW4gbWVudXMgb24gY2xpY2suXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX21lbnVMaW5rRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX21lbnVMaW5rRXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5ub3QoJy5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKS5vZmYoJ2NsaWNrLnpmLmRyaWxsZG93bicpLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAvLyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZUFsbCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgc3VibWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI29wZW5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIG9wZW4sIGkuZS4gdGhlIGBsaWAgdGFnLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93KCRlbGVtKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHRoaXMuJHdyYXBwZXIuY3NzKHsgaGVpZ2h0OiAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5kYXRhKCdjYWxjSGVpZ2h0JykgfSk7XG4gICAgICAkZWxlbS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5hZGRDbGFzcygnaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2ludmlzaWJsZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBzdWJtZW51IGhhcyBvcGVuZWQuXG4gICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI29wZW5cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19oaWRlJyxcblxuXG4gICAgLyoqXG4gICAgICogSGlkZXMgYSBzdWJtZW51XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNoaWRlXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgc3ViLW1lbnUgdG8gaGlkZSwgaS5lLiB0aGUgYHVsYCB0YWcuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlKCRlbGVtKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHRoaXMuJHdyYXBwZXIuY3NzKHsgaGVpZ2h0OiAkZWxlbS5wYXJlbnQoKS5jbG9zZXN0KCd1bCcpLmRhdGEoJ2NhbGNIZWlnaHQnKSB9KTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAkZWxlbS5wYXJlbnQoJ2xpJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICRlbGVtLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSkuYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKTtcbiAgICAgICRlbGVtLmFkZENsYXNzKCdpcy1jbG9zaW5nJykub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJiXCIgLyogdHJhbnNpdGlvbmVuZCAqL10pKCRlbGVtKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkZWxlbS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcnKTtcbiAgICAgICAgJGVsZW0uYmx1cigpLmFkZENsYXNzKCdpbnZpc2libGUnKTtcbiAgICAgIH0pO1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBzdWJtZW51IGhhcyBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgICAqL1xuICAgICAgJGVsZW0udHJpZ2dlcignaGlkZS56Zi5kcmlsbGRvd24nLCBbJGVsZW1dKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBuZXN0ZWQgbWVudXMgdG8gY2FsY3VsYXRlIHRoZSBtaW4taGVpZ2h0LCBhbmQgbWF4LXdpZHRoIGZvciB0aGUgbWVudS5cbiAgICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2dldE1heERpbXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TWF4RGltcygpIHtcbiAgICAgIHZhciBtYXhIZWlnaHQgPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IHt9LFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuJHN1Ym1lbnVzLmFkZCh0aGlzLiRlbGVtZW50KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG51bU9mRWxlbXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmNoaWxkcmVuKCdsaScpLmxlbmd0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiYVwiIC8qIEJveCAqL10uR2V0RGltZW5zaW9ucyh0aGlzKS5oZWlnaHQ7XG4gICAgICAgIG1heEhlaWdodCA9IGhlaWdodCA+IG1heEhlaWdodCA/IGhlaWdodCA6IG1heEhlaWdodDtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2FsY0hlaWdodCcsIGhlaWdodCk7XG4gICAgICAgICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudScpKSByZXN1bHRbJ2hlaWdodCddID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBtYXhIZWlnaHQgKyAncHgnO1xuXG4gICAgICByZXN1bHRbJ21heC13aWR0aCddID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIERyaWxsZG93biBNZW51XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5kcmlsbGRvd24nLCB0aGlzLl9iaW5kSGFuZGxlcik7XG4gICAgICB0aGlzLl9oaWRlQWxsKCk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fW1wiYVwiIC8qIE5lc3QgKi9dLkJ1cm4odGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKS5maW5kKCcuanMtZHJpbGxkb3duLWJhY2ssIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtJykucmVtb3ZlKCkuZW5kKCkuZmluZCgnLmlzLWFjdGl2ZSwgLmlzLWNsb3NpbmcsIC5pcy1kcmlsbGRvd24tc3VibWVudScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZyBpcy1kcmlsbGRvd24tc3VibWVudScpLmVuZCgpLmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXggcm9sZScpO1xuICAgICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kc3VibWVudXMucmVtb3ZlQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzIGludmlzaWJsZScpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgICAgJGxpbmsucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgaWYgKCRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKSB7XG4gICAgICAgICAgJGxpbmsuYXR0cignaHJlZicsICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKS5yZW1vdmVEYXRhKCdzYXZlZEhyZWYnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcmlsbGRvd247XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuRHJpbGxkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRHJpbGxkb3ducyBkZXBlbmQgb24gc3R5bGVzIGluIG9yZGVyIHRvIGZ1bmN0aW9uIHByb3Blcmx5OyBpbiB0aGUgZGVmYXVsdCBidWlsZCBvZiBGb3VuZGF0aW9uIHRoZXNlIGFyZVxuICAgKiBvbiB0aGUgYGRyaWxsZG93bmAgY2xhc3MuIFRoaXMgb3B0aW9uIGF1dG8tYXBwbGllcyB0aGlzIGNsYXNzIHRvIHRoZSBkcmlsbGRvd24gdXBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGlhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b0FwcGx5Q2xhc3M6IHRydWUsXG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCBmb3IgSlMgZ2VuZXJhdGVkIGJhY2sgYnV0dG9uLiBQcmVwZW5kZWQgIG9yIGFwcGVuZGVkIChzZWUgYmFja0J1dHRvblBvc2l0aW9uKSB0byBzdWJtZW51IGxpc3RzIGFuZCBkZWxldGVkIG9uIGBkZXN0cm95YCBtZXRob2QsICdqcy1kcmlsbGRvd24tYmFjaycgY2xhc3MgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nXG4gICAqL1xuICBiYWNrQnV0dG9uOiAnPGxpIGNsYXNzPVwianMtZHJpbGxkb3duLWJhY2tcIj48YSB0YWJpbmRleD1cIjBcIj5CYWNrPC9hPjwvbGk+JyxcbiAgLyoqXG4gICAqIFBvc2l0aW9uIHRoZSBiYWNrIGJ1dHRvbiBlaXRoZXIgYXQgdGhlIHRvcCBvciBib3R0b20gb2YgZHJpbGxkb3duIHN1Ym1lbnVzLiBDYW4gYmUgYCdsZWZ0J2Agb3IgYCdib3R0b20nYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCB0b3BcbiAgICovXG4gIGJhY2tCdXR0b25Qb3NpdGlvbjogJ3RvcCcsXG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCB0byB3cmFwIGRyaWxsZG93biBtZW51LiBVc2UgYSBjbGFzcyBuYW1lIGZvciBpbmRlcGVuZGVudCBzdHlsaW5nOyB0aGUgSlMgYXBwbGllZCBjbGFzczogYGlzLWRyaWxsZG93bmAgaXMgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICc8ZGl2PjwvZGl2PidcbiAgICovXG4gIHdyYXBwZXI6ICc8ZGl2PjwvZGl2PicsXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBwYXJlbnQgbGluayB0byB0aGUgc3VibWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHBhcmVudExpbms6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gcmV0dXJuIHRvIHJvb3QgbGlzdCBvbiBib2R5IGNsaWNrLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtZW51IHRvIGF1dG8gYWRqdXN0IGhlaWdodC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvKipcbiAgICogQW5pbWF0ZSB0aGUgYXV0byBhZGp1c3QgaGVpZ2h0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZUhlaWdodDogZmFsc2UsXG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgbWVudSBhZnRlciBvcGVuaW5nIGEgc3VibWVudSBvciBuYXZpZ2F0aW5nIGJhY2sgdXNpbmcgdGhlIG1lbnUgYmFjayBidXR0b25cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNjcm9sbFRvcDogZmFsc2UsXG4gIC8qKlxuICAgKiBTdHJpbmcganF1ZXJ5IHNlbGVjdG9yIChmb3IgZXhhbXBsZSAnYm9keScpIG9mIGVsZW1lbnQgdG8gdGFrZSBvZmZzZXQoKS50b3AgZnJvbSwgaWYgZW1wdHkgc3RyaW5nIHRoZSBkcmlsbGRvd24gbWVudSBvZmZzZXQoKS50b3AgaXMgdGFrZW5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgc2Nyb2xsVG9wRWxlbWVudDogJycsXG4gIC8qKlxuICAgKiBTY3JvbGxUb3Agb2Zmc2V0XG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc2Nyb2xsVG9wT2Zmc2V0OiAwLFxuICAvKipcbiAgICogU2Nyb2xsIGFuaW1hdGlvbiBkdXJhdGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwMFxuICAgKi9cbiAgYW5pbWF0aW9uRHVyYXRpb246IDUwMCxcbiAgLyoqXG4gICAqIFNjcm9sbCBhbmltYXRpb24gZWFzaW5nLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpRdWVyeSBhbmltYXRlfVxuICAgKiBAZGVmYXVsdCAnc3dpbmcnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdzd2luZydcbiAgLy8gaG9sZE9wZW46IGZhbHNlXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRHJvcGRvd25NZW51OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIERyb3Bkb3duTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZHJvcGRvd24tbWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbnZhciBEcm9wZG93bk1lbnUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoRHJvcGRvd25NZW51LCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBEcm9wZG93bk1lbnUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duTWVudSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERyb3Bkb3duTWVudS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duTWVudSwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBEcm9wZG93bk1lbnUuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgRHJvcGRvd25NZW51XG4gICAgICogQGZpcmVzIERyb3Bkb3duTWVudSNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duIG1lbnUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgRHJvcGRvd25NZW51LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdEcm9wZG93bk1lbnUnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiwgYW5kIGNhbGxzIF9wcmVwYXJlTWVudVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19bXCJhXCIgLyogTmVzdCAqL10uRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcblxuICAgICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdhdXRvJykge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImNcIiAvKiBydGwgKi9dKSgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBzdWJzLmFkZENsYXNzKCdvcGVucy1sZWZ0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaXNWZXJ0aWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1ZlcnRpY2FsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHRhYnMuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jaycgfHwgdGhpcy4kZWxlbWVudC5jc3MoJ2ZsZXgtZGlyZWN0aW9uJykgPT09ICdjb2x1bW4nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19pc1J0bCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1J0bCgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhbGlnbi1yaWdodCcpIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJjXCIgLyogcnRsICovXSkoKSAmJiAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWxpZ24tbGVmdCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIGVsZW1lbnRzIHdpdGhpbiB0aGUgbWVudVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBoYXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgcGFyQ2xhc3MgPSAnaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnO1xuXG4gICAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICAgIHZhciBoYW5kbGVDbGlja0ZuID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICcuJyArIHBhckNsYXNzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKSxcbiAgICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAgICRzdWIgPSAkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcblxuICAgICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgfHwgIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuICYmICFoYXNUb3VjaCB8fCBfdGhpcy5vcHRpb25zLmZvcmNlRm9sbG93ICYmIGhhc1RvdWNoKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgICAkZWxlbS5hZGQoJGVsZW0ucGFyZW50c1VudGlsKF90aGlzLiRlbGVtZW50LCAnLicgKyBwYXJDbGFzcykpLmF0dHIoJ2RhdGEtaXMtY2xpY2snLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuIHx8IGhhc1RvdWNoKSB7XG4gICAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignY2xpY2suemYuZHJvcGRvd25tZW51IHRvdWNoc3RhcnQuemYuZHJvcGRvd25tZW51JywgaGFuZGxlQ2xpY2tGbik7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBMZWFmIGVsZW1lbnQgQ2xpY2tzXG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2tJbnNpZGUpIHtcbiAgICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciAkZWxlbSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcbiAgICAgICAgICBpZiAoIWhhc1N1Yikge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuXG4gICAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCRlbGVtLmRhdGEoJ19kZWxheScpKTtcbiAgICAgICAgICAgICRlbGVtLmRhdGEoJ19kZWxheScsIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICAgIGlmIChoYXNTdWIgJiYgX3RoaXMub3B0aW9ucy5hdXRvY2xvc2UpIHtcbiAgICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCgkZWxlbS5kYXRhKCdfZGVsYXknKSk7XG4gICAgICAgICAgICAkZWxlbS5kYXRhKCdfZGVsYXknLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5jbG9zaW5nVGltZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLiRtZW51SXRlbXMub24oJ2tleWRvd24uemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdbcm9sZT1cIm1lbnVpdGVtXCJdJyksXG4gICAgICAgICAgICBpc1RhYiA9IF90aGlzLiR0YWJzLmluZGV4KCRlbGVtZW50KSA+IC0xLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gaXNUYWIgPyBfdGhpcy4kdGFicyA6ICRlbGVtZW50LnNpYmxpbmdzKCdsaScpLmFkZCgkZWxlbWVudCksXG4gICAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShpIC0gMSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSArIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgcHJldlNpYmxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50LmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBvcGVuU3ViID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzLl9zaG93KCRzdWIpO1xuICAgICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb3NlU3ViID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vaWYgKCRlbGVtZW50LmlzKCc6Zmlyc3QtY2hpbGQnKSkge1xuICAgICAgICAgIHZhciBjbG9zZSA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgICAgY2xvc2UuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oaWRlKGNsb3NlKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgLy99XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmdW5jdGlvbnMgPSB7XG4gICAgICAgICAgb3Blbjogb3BlblN1YixcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoX3RoaXMuJGVsZW1lbnQpO1xuICAgICAgICAgICAgX3RoaXMuJG1lbnVJdGVtcy5lcSgwKS5jaGlsZHJlbignYScpLmZvY3VzKCk7IC8vIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc1RhYikge1xuICAgICAgICAgIGlmIChfdGhpcy5faXNWZXJ0aWNhbCgpKSB7XG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbCBtZW51XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2lzUnRsKCkpIHtcbiAgICAgICAgICAgICAgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IGNsb3NlU3ViXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBob3Jpem9udGFsIG1lbnVcbiAgICAgICAgICAgIGlmIChfdGhpcy5faXNSdGwoKSkge1xuICAgICAgICAgICAgICAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICAgIG5leHQ6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICBwcmV2aW91czogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgICB1cDogY2xvc2VTdWJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5vdCB0YWJzIC0+IG9uZSBzdWJcbiAgICAgICAgICBpZiAoX3RoaXMuX2lzUnRsKCkpIHtcbiAgICAgICAgICAgIC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWIsXG4gICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWIsXG4gICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCb2R5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgIHZhciAkYm9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKS5vbignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyICRsaW5rID0gX3RoaXMuJGVsZW1lbnQuZmluZChlLnRhcmdldCk7XG4gICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkcm9wZG93biBwYW5lLCBhbmQgY2hlY2tzIGZvciBjb2xsaXNpb25zIGZpcnN0LlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkc3ViIC0gdWwgZWxlbWVudCB0aGF0IGlzIGEgc3VibWVudSB0byBzaG93XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I3Nob3dcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdygkc3ViKSB7XG4gICAgICB2YXIgaWR4ID0gdGhpcy4kdGFicy5pbmRleCh0aGlzLiR0YWJzLmZpbHRlcihmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWwpLmZpbmQoJHN1YikubGVuZ3RoID4gMDtcbiAgICAgIH0pKTtcbiAgICAgIHZhciAkc2licyA9ICRzdWIucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLnNpYmxpbmdzKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgdGhpcy5faGlkZSgkc2licywgaWR4KTtcbiAgICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLmFkZENsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKS5wYXJlbnQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgdmFyIGNsZWFyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJhXCIgLyogQm94ICovXS5JbU5vdFRvdWNoaW5nWW91KCRzdWIsIG51bGwsIHRydWUpO1xuICAgICAgaWYgKCFjbGVhcikge1xuICAgICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAnLXJpZ2h0JyA6ICctbGVmdCcsXG4gICAgICAgICAgICAkcGFyZW50TGkgPSAkc3ViLnBhcmVudCgnLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcygnb3BlbnMnICsgb2xkQ2xhc3MpLmFkZENsYXNzKCdvcGVucy0nICsgdGhpcy5vcHRpb25zLmFsaWdubWVudCk7XG4gICAgICAgIGNsZWFyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJhXCIgLyogQm94ICovXS5JbU5vdFRvdWNoaW5nWW91KCRzdWIsIG51bGwsIHRydWUpO1xuICAgICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKCdvcGVucy0nICsgdGhpcy5vcHRpb25zLmFsaWdubWVudCkuYWRkQ2xhc3MoJ29wZW5zLWlubmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJycpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgbmV3IGRyb3Bkb3duIHBhbmUgaXMgdmlzaWJsZS5cbiAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjc2hvd1xuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYuZHJvcGRvd25tZW51JywgWyRzdWJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyBhIHNpbmdsZSwgY3VycmVudGx5IG9wZW4gZHJvcGRvd24gcGFuZSwgaWYgcGFzc2VkIGEgcGFyYW1ldGVyLCBvdGhlcndpc2UsIGhpZGVzIGV2ZXJ5dGhpbmcuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBoaWRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSAkdGFicyBjb2xsZWN0aW9uIHRvIGhpZGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlKCRlbGVtLCBpZHgpIHtcbiAgICAgIHZhciAkdG9DbG9zZTtcbiAgICAgIGlmICgkZWxlbSAmJiAkZWxlbS5sZW5ndGgpIHtcbiAgICAgICAgJHRvQ2xvc2UgPSAkZWxlbTtcbiAgICAgIH0gZWxzZSBpZiAoaWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgJHRvQ2xvc2UgPSB0aGlzLiR0YWJzLm5vdChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgICByZXR1cm4gaSA9PT0gaWR4O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR0b0Nsb3NlID0gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHZhciBzb21ldGhpbmdUb0Nsb3NlID0gJHRvQ2xvc2UuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICR0b0Nsb3NlLmZpbmQoJy5pcy1hY3RpdmUnKS5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAoc29tZXRoaW5nVG9DbG9zZSkge1xuICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1hY3RpdmUnKS5hZGQoJHRvQ2xvc2UpLmF0dHIoe1xuICAgICAgICAgICdkYXRhLWlzLWNsaWNrJzogZmFsc2VcbiAgICAgICAgfSkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgICR0b0Nsb3NlLmZpbmQoJ3VsLmpzLWRyb3Bkb3duLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKTtcblxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VkIHx8ICR0b0Nsb3NlLmZpbmQoJ29wZW5zLWlubmVyJykubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZCgkdG9DbG9zZSkucmVtb3ZlQ2xhc3MoJ29wZW5zLWlubmVyIG9wZW5zLScgKyB0aGlzLm9wdGlvbnMuYWxpZ25tZW50KS5hZGRDbGFzcygnb3BlbnMtJyArIG9sZENsYXNzKTtcbiAgICAgICAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgb3BlbiBtZW51cyBhcmUgY2xvc2VkLlxuICAgICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaGlkZS56Zi5kcm9wZG93bm1lbnUnLCBbJHRvQ2xvc2VdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKS5yZW1vdmVDbGFzcygnaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXInKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQuYm9keSkub2ZmKCcuemYuZHJvcGRvd25tZW51Jyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19bXCJhXCIgLyogTmVzdCAqL10uQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd25NZW51O1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5Ecm9wZG93bk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEaXNhbGxvd3MgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyBzdWJtZW51c1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBhdXRvbWF0aWNhbGx5IGNsb3NlIG9uIGEgbW91c2VsZWF2ZSBldmVudCwgaWYgbm90IGNsaWNrZWQgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b2Nsb3NlOiB0cnVlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTBcbiAgICovXG4gIGhvdmVyRGVsYXk6IDUwLFxuICAvKipcbiAgICogQWxsb3cgYSBzdWJtZW51IHRvIG9wZW4vcmVtYWluIG9wZW4gb24gcGFyZW50IGNsaWNrIGV2ZW50LiBBbGxvd3MgY3Vyc29yIHRvIG1vdmUgYXdheSBmcm9tIG1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbGlja09wZW46IGZhbHNlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgY2xvc2luZyBhIHN1Ym1lbnUgb24gYSBtb3VzZWxlYXZlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwMFxuICAgKi9cblxuICBjbG9zaW5nVGltZTogNTAwLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIG1lbnUgcmVsYXRpdmUgdG8gd2hhdCBkaXJlY3Rpb24gdGhlIHN1Ym1lbnVzIHNob3VsZCBvcGVuLiBIYW5kbGVkIGJ5IEpTLiBDYW4gYmUgYCdhdXRvJ2AsIGAnbGVmdCdgIG9yIGAncmlnaHQnYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIGFsaWdubWVudDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIHRoZSBib2R5IHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gbGVhZiBhbmNob3IgbGlua3MgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU21vb3RoU2Nyb2xsOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG4vKipcbiAqIFNtb290aFNjcm9sbCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc21vb3RoLXNjcm9sbFxuICovXG5cbnZhciBTbW9vdGhTY3JvbGwgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICAgIF9pbmhlcml0cyhTbW9vdGhTY3JvbGwsIF9QbHVnaW4pO1xuXG4gICAgZnVuY3Rpb24gU21vb3RoU2Nyb2xsKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU21vb3RoU2Nyb2xsKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNtb290aFNjcm9sbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNtb290aFNjcm9sbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTbW9vdGhTY3JvbGwsIFt7XG4gICAgICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgU21vb3RoU2Nyb2xsLlxuICAgICAgICAgKiBAY2xhc3NcbiAgICAgICAgICogQG5hbWUgU21vb3RoU2Nyb2xsXG4gICAgICAgICAqIEBmaXJlcyBTbW9vdGhTY3JvbGwjaW5pdFxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIFNtb290aFNjcm9sbC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnU21vb3RoU2Nyb2xsJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsaXplIHRoZSBTbW9vdGhTY3JvbGwgcGx1Z2luXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaW5pdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdzbW9vdGgtc2Nyb2xsJyk7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgU21vb3RoU2Nyb2xsLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2V2ZW50cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgLy8gY2xpY2sgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgICAgICAgIHZhciBoYW5kbGVMaW5rQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXQgZnVuY3Rpb24gaWYgdGhlIGV2ZW50IHNvdXJjZSBpc24ndCBjb21pbmcgZnJvbSBhbiBhbmNob3Igd2l0aCBocmVmIGF0dHJpYnV0ZSBzdGFydHMgd2l0aCAnIydcbiAgICAgICAgICAgICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJ2FbaHJlZl49XCIjXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBhcnJpdmFsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgU21vb3RoU2Nyb2xsLnNjcm9sbFRvTG9jKGFycml2YWwsIF90aGlzLm9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suemYuc21vb3RoU2Nyb2xsJywgaGFuZGxlTGlua0NsaWNrKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLnpmLnNtb290aFNjcm9sbCcsICdhW2hyZWZePVwiI1wiXScsIGhhbmRsZUxpbmtDbGljayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsb2MgLSBBIHByb3Blcmx5IGZvcm1hdHRlZCBqUXVlcnkgaWQgc2VsZWN0b3IuIEV4YW1wbGU6ICcjZm9vJ1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIHVzZS5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqL1xuXG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ3Njcm9sbFRvTG9jJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvTG9jKGxvYykge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFNtb290aFNjcm9sbC5kZWZhdWx0cztcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0YXJnZXQgZG9lcyBub3QgZXhpc3QgdG8gcHJldmVudCBlcnJvcnNcbiAgICAgICAgICAgIGlmICghX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShsb2MpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShsb2MpLm9mZnNldCgpLnRvcCAtIG9wdGlvbnMudGhyZXNob2xkIC8gMiAtIG9wdGlvbnMub2Zmc2V0KTtcblxuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIG9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTbW9vdGhTY3JvbGw7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW4uXG4gKi9cblxuXG5TbW9vdGhTY3JvbGwuZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogQW1vdW50IG9mIHRpbWUsIGluIG1zLCB0aGUgYW5pbWF0ZWQgc2Nyb2xsaW5nIHNob3VsZCB0YWtlIGJldHdlZW4gbG9jYXRpb25zLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDUwMFxuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy4gQ2FuIGJlIGAnc3dpbmcnYCBvciBgJ2xpbmVhcidgLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBkZWZhdWx0ICdsaW5lYXInXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpxdWVyeSBhbmltYXRlfVxuICAgICAqL1xuICAgIGFuaW1hdGlvbkVhc2luZzogJ2xpbmVhcicsXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgICogQG9wdGlvblxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQGRlZmF1bHQgNTBcbiAgICAgKi9cbiAgICB0aHJlc2hvbGQ6IDUwLFxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbn07XG5cblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUYWJzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuLyoqXG4gKiBUYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50YWJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyIGlmIHRhYnMgY29udGFpbiBpbWFnZXNcbiAqL1xuXG52YXIgVGFicyA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhUYWJzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBUYWJzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFicy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYnMpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUYWJzLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRhYnMuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgVGFic1xuICAgICAqIEBmaXJlcyBUYWJzI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIHRhYnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgVGFicy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnVGFicyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWdpc3RlcignVGFicycsIHtcbiAgICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX1VQJzogJ3ByZXZpb3VzJyxcbiAgICAgICAgJ0FSUk9XX0RPV04nOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgICAvLyAnVEFCJzogJ25leHQnLFxuICAgICAgICAvLyAnU0hJRlRfVEFCJzogJ3ByZXZpb3VzJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHRhYnMgYnkgc2hvd2luZyBhbmQgZm9jdXNpbmcgKGlmIGF1dG9Gb2N1cz10cnVlKSB0aGUgcHJlc2V0IGFjdGl2ZSB0YWIuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoeyAncm9sZSc6ICd0YWJsaXN0JyB9KTtcbiAgICAgIHRoaXMuJHRhYlRpdGxlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzKTtcbiAgICAgIHRoaXMuJHRhYkNvbnRlbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS10YWJzLWNvbnRlbnQ9XCInICsgdGhpcy4kZWxlbWVudFswXS5pZCArICdcIl0nKTtcblxuICAgICAgdGhpcy4kdGFiVGl0bGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW0gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgJGxpbmsgPSAkZWxlbS5maW5kKCdhJyksXG4gICAgICAgICAgICBpc0FjdGl2ZSA9ICRlbGVtLmhhc0NsYXNzKCcnICsgX3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpLFxuICAgICAgICAgICAgaGFzaCA9ICRsaW5rLmF0dHIoJ2RhdGEtdGFicy10YXJnZXQnKSB8fCAkbGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgICAgbGlua0lkID0gJGxpbmtbMF0uaWQgPyAkbGlua1swXS5pZCA6IGhhc2ggKyAnLWxhYmVsJyxcbiAgICAgICAgICAgICR0YWJDb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBoYXNoKTtcblxuICAgICAgICAkZWxlbS5hdHRyKHsgJ3JvbGUnOiAncHJlc2VudGF0aW9uJyB9KTtcblxuICAgICAgICAkbGluay5hdHRyKHtcbiAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogaGFzaCxcbiAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGlzQWN0aXZlLFxuICAgICAgICAgICdpZCc6IGxpbmtJZCxcbiAgICAgICAgICAndGFiaW5kZXgnOiBpc0FjdGl2ZSA/ICcwJyA6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHRhYkNvbnRlbnQuYXR0cih7XG4gICAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgICR0YWJDb250ZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FjdGl2ZSAmJiBfdGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkZWxlbS5vZmZzZXQoKS50b3AgfSwgX3RoaXMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICRsaW5rLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCdpbWcnKTtcblxuICAgICAgICBpZiAoJGltYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfX1tcImFcIiAvKiBvbkltYWdlc0xvYWRlZCAqL10pKCRpbWFnZXMsIHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZXRIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL2N1cnJlbnQgY29udGV4dC1ib3VuZCBmdW5jdGlvbiB0byBvcGVuIHRhYnMgb24gcGFnZSBsb2FkIG9yIGhpc3RvcnkgcG9wc3RhdGVcbiAgICAgIHRoaXMuX2NoZWNrRGVlcExpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgLy9uZWVkIGEgaGFzaCBhbmQgYSByZWxldmFudCBhbmNob3IgaW4gdGhpcyB0YWJzZXRcbiAgICAgICAgaWYgKGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgJGxpbmsgPSBfdGhpczMuJGVsZW1lbnQuZmluZCgnW2hyZWYkPVwiJyArIGFuY2hvciArICdcIl0nKTtcbiAgICAgICAgICBpZiAoJGxpbmsubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpczMuc2VsZWN0VGFiKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoYW5jaG9yKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vcm9sbCB1cCBhIGxpdHRsZSB0byBzaG93IHRoZSB0aXRsZXNcbiAgICAgICAgICAgIGlmIChfdGhpczMub3B0aW9ucy5kZWVwTGlua1NtdWRnZSkge1xuICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogb2Zmc2V0LnRvcCB9LCBfdGhpczMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgenBsdWdpbiBoYXMgZGVlcGxpbmtlZCBhdCBwYWdlbG9hZFxuICAgICAgICAgICAgICAqIEBldmVudCBUYWJzI2RlZXBsaW5rXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcignZGVlcGxpbmsuemYudGFicycsIFskbGluaywgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShhbmNob3IpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvL3VzZSBicm93c2VyIHRvIG9wZW4gYSB0YWIsIGlmIGl0IGV4aXN0cyBpbiB0aGlzIHRhYnNldFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICB0aGlzLl9jaGVja0RlZXBMaW5rKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHRoaXMuX2FkZEtleUhhbmRsZXIoKTtcbiAgICAgIHRoaXMuX2FkZENsaWNrSGFuZGxlcigpO1xuICAgICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSB0aGlzLl9zZXRIZWlnaHQuYmluZCh0aGlzKTtcblxuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgY2xpY2sgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkQ2xpY2tIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENsaWNrSGFuZGxlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdjbGljay56Zi50YWJzJykub24oJ2NsaWNrLnpmLnRhYnMnLCAnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGtleWJvYXJkIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2FkZEtleUhhbmRsZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkS2V5SGFuZGxlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJHRhYlRpdGxlcy5vZmYoJ2tleWRvd24uemYudGFicycpLm9uKCdrZXlkb3duLnpmLnRhYnMnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gOSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciAkZWxlbWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLndyYXBPbktleXMpIHtcbiAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gaSA9PT0gMCA/ICRlbGVtZW50cy5sYXN0KCkgOiAkZWxlbWVudHMuZXEoaSAtIDEpO1xuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSBpID09PSAkZWxlbWVudHMubGVuZ3RoIC0gMSA/ICRlbGVtZW50cy5maXJzdCgpIDogJGVsZW1lbnRzLmVxKGkgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpIC0gMSkpO1xuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSArIDEsICRlbGVtZW50cy5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLmhhbmRsZUtleShlLCAnVGFicycsIHtcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRlbGVtZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkcHJldkVsZW1lbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG5leHRFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJG5leHRFbGVtZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQ29sbGFwc2VzIGFjdGl2ZSB0YWIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZVRhYkNoYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCwgaGlzdG9yeUhhbmRsZWQpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBmb3IgYWN0aXZlIGNsYXNzIG9uIHRhcmdldC4gQ29sbGFwc2UgaWYgZXhpc3RzLlxuICAgICAgICovXG4gICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWN0aXZlQ29sbGFwc2UpIHtcbiAgICAgICAgICB0aGlzLl9jb2xsYXBzZVRhYigkdGFyZ2V0KTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHpwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjb2xsYXBzZWQgdGFicy5cbiAgICAgICAgICAgKiBAZXZlbnQgVGFicyNjb2xsYXBzZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY29sbGFwc2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG9sZFRhYiA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzICsgJy4nICsgdGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcyksXG4gICAgICAgICAgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rLmF0dHIoJ2RhdGEtdGFicy10YXJnZXQnKSB8fCAkdGFiTGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCcjJyArIGhhc2gpO1xuXG4gICAgICAvL2Nsb3NlIG9sZCB0YWJcbiAgICAgIHRoaXMuX2NvbGxhcHNlVGFiKCRvbGRUYWIpO1xuXG4gICAgICAvL29wZW4gbmV3IHRhYlxuICAgICAgdGhpcy5fb3BlblRhYigkdGFyZ2V0KTtcblxuICAgICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rICYmICFoaXN0b3J5SGFuZGxlZCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlSGlzdG9yeSkge1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0LCAkdGFyZ2V0Q29udGVudF0pO1xuXG4gICAgICAvL2ZpcmUgdG8gY2hpbGRyZW4gYSBtdXRhdGlvbiBldmVudFxuICAgICAgJHRhcmdldENvbnRlbnQuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRhYiBgJHRhcmdldENvbnRlbnRgIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIE9wZW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vcGVuVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29wZW5UYWIoJHRhcmdldCkge1xuICAgICAgdmFyICR0YWJMaW5rID0gJHRhcmdldC5maW5kKCdbcm9sZT1cInRhYlwiXScpLFxuICAgICAgICAgIGhhc2ggPSAkdGFiTGluay5hdHRyKCdkYXRhLXRhYnMtdGFyZ2V0JykgfHwgJHRhYkxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICAkdGFyZ2V0Q29udGVudCA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnIycgKyBoYXNoKTtcblxuICAgICAgJHRhcmdldC5hZGRDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAkdGFiTGluay5hdHRyKHtcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgfSk7XG5cbiAgICAgICR0YXJnZXRDb250ZW50LmFkZENsYXNzKCcnICsgdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2VzIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gT3Blbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NvbGxhcHNlVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbGxhcHNlVGFiKCR0YXJnZXQpIHtcbiAgICAgIHZhciAkdGFyZ2V0X2FuY2hvciA9ICR0YXJnZXQucmVtb3ZlQ2xhc3MoJycgKyB0aGlzLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzKS5maW5kKCdbcm9sZT1cInRhYlwiXScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyAkdGFyZ2V0X2FuY2hvci5hdHRyKCdhcmlhLWNvbnRyb2xzJykpLnJlbW92ZUNsYXNzKCcnICsgdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGljIG1ldGhvZCBmb3Igc2VsZWN0aW5nIGEgY29udGVudCBwYW5lIHRvIGRpc3BsYXkuXG4gICAgICogQHBhcmFtIHtqUXVlcnkgfCBTdHJpbmd9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IG9yIHN0cmluZyBvZiB0aGUgaWQgb2YgdGhlIHBhbmUgdG8gZGlzcGxheS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0VGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0VGFiKGVsZW0sIGhpc3RvcnlIYW5kbGVkKSB7XG4gICAgICB2YXIgaWRTdHI7XG5cbiAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWRTdHIgPSBlbGVtWzBdLmlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRTdHIgPSBlbGVtO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgICBpZFN0ciA9ICcjJyArIGlkU3RyO1xuICAgICAgfVxuXG4gICAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKCdbaHJlZiQ9XCInICsgaWRTdHIgKyAnXCJdJykucGFyZW50KCcuJyArIHRoaXMub3B0aW9ucy5saW5rQ2xhc3MpO1xuXG4gICAgICB0aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCwgaGlzdG9yeUhhbmRsZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZXRIZWlnaHQnLFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggcGFuZWwgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFsbGVzdCBwYW5lbC5cbiAgICAgKiBJZiBlbmFibGVkIGluIG9wdGlvbnMsIGdldHMgY2FsbGVkIG9uIG1lZGlhIHF1ZXJ5IGNoYW5nZS5cbiAgICAgKiBJZiBsb2FkaW5nIGNvbnRlbnQgdmlhIGV4dGVybmFsIHNvdXJjZSwgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBvciB3aXRoIF9yZWZsb3cuXG4gICAgICogSWYgZW5hYmxlZCB3aXRoIGBkYXRhLW1hdGNoLWhlaWdodD1cInRydWVcImAsIHRhYnMgc2V0cyB0byBlcXVhbCBoZWlnaHRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SGVpZ2h0KCkge1xuICAgICAgdmFyIG1heCA9IDAsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzOyAvLyBMb2NrIGRvd24gdGhlIGB0aGlzYCB2YWx1ZSBmb3IgdGhlIHJvb3QgdGFicyBvYmplY3RcblxuICAgICAgdGhpcy4kdGFiQ29udGVudC5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5wYW5lbENsYXNzKS5jc3MoJ2hlaWdodCcsICcnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgcGFuZWwgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgaXNBY3RpdmUgPSBwYW5lbC5oYXNDbGFzcygnJyArIF90aGlzLm9wdGlvbnMucGFuZWxBY3RpdmVDbGFzcyk7IC8vIGdldCB0aGUgb3B0aW9ucyBmcm9tIHRoZSBwYXJlbnQgaW5zdGVhZCBvZiB0cnlpbmcgdG8gZ2V0IHRoZW0gZnJvbSB0aGUgY2hpbGRcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJywgJ2Rpc3BsYXknOiAnYmxvY2snIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJycsXG4gICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIH0pLmNzcygnaGVpZ2h0JywgbWF4ICsgJ3B4Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYW4gdGFicy5cbiAgICAgKiBAZmlyZXMgVGFicyNkZXN0cm95ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzKS5vZmYoJy56Zi50YWJzJykuaGlkZSgpLmVuZCgpLmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLnBhbmVsQ2xhc3MpLmhpZGUoKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLl9jaGVja0RlZXBMaW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFicztcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiYVwiIC8qIFBsdWdpbiAqL10pO1xuXG5UYWJzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgcGFuZSBzcGVjaWZpZWQgYnkgaGFzaCBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBkZWVwIGxpbmsgc2Nyb2xsIHRvIG1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSB0YWIgcGFuZWwgaXMgdmlzaWJsZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbmltYXRpb24gdGltZSAobXMpIGZvciB0aGUgZGVlcCBsaW5rIGFkanVzdG1lbnRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAzMDBcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlRGVsYXk6IDMwMCxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiB0YWJcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBOb3QgcmVjb21tZW5kZWQgaWYgbW9yZSB0aGFuIG9uZSB0YWIgcGFuZWwgcGVyIHBhZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB3cmFwT25LZXlzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRhYiBjb250ZW50IHBhbmVzIHRvIG1hdGNoIGhlaWdodHMgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXRjaEhlaWdodDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFsbG93cyBhY3RpdmUgdGFicyB0byBjb2xsYXBzZSB3aGVuIGNsaWNrZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhY3RpdmVDb2xsYXBzZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYGxpYCdzIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RhYnMtdGl0bGUnXG4gICAqL1xuICBsaW5rQ2xhc3M6ICd0YWJzLXRpdGxlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGBsaWAgaW4gdGFiIGxpbmsgbGlzdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtYWN0aXZlJ1xuICAgKi9cbiAgbGlua0FjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGVudCBjb250YWluZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0YWJzLXBhbmVsJ1xuICAgKi9cbiAgcGFuZWxDbGFzczogJ3RhYnMtcGFuZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgY29udGVudCBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIHBhbmVsQWN0aXZlQ2xhc3M6ICdpcy1hY3RpdmUnXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUG9zaXRpb25hYmxlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG52YXIgUE9TSVRJT05TID0gWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXTtcbnZhciBWRVJUSUNBTF9BTElHTk1FTlRTID0gWyd0b3AnLCAnYm90dG9tJywgJ2NlbnRlciddO1xudmFyIEhPUklaT05UQUxfQUxJR05NRU5UUyA9IFsnbGVmdCcsICdyaWdodCcsICdjZW50ZXInXTtcblxudmFyIEFMSUdOTUVOVFMgPSB7XG4gICdsZWZ0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3JpZ2h0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3RvcCc6IEhPUklaT05UQUxfQUxJR05NRU5UUyxcbiAgJ2JvdHRvbSc6IEhPUklaT05UQUxfQUxJR05NRU5UU1xufTtcblxuZnVuY3Rpb24gbmV4dEl0ZW0oaXRlbSwgYXJyYXkpIHtcbiAgdmFyIGN1cnJlbnRJZHggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoY3VycmVudElkeCA9PT0gYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXJyYXlbY3VycmVudElkeCArIDFdO1xuICB9XG59XG5cbnZhciBQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoUG9zaXRpb25hYmxlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBQb3NpdGlvbmFibGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc2l0aW9uYWJsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvc2l0aW9uYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvc2l0aW9uYWJsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvc2l0aW9uYWJsZSwgW3tcbiAgICBrZXk6ICdfaW5pdCcsXG5cbiAgICAvKipcbiAgICAgKiBBYnN0cmFjdCBjbGFzcyBlbmNhcHN1bGF0aW5nIHRoZSB0ZXRoZXItbGlrZSBleHBsaWNpdCBwb3NpdGlvbmluZyBsb2dpY1xuICAgICAqIGluY2x1ZGluZyByZXBvc2l0aW9uaW5nIGJhc2VkIG9uIG92ZXJsYXAuXG4gICAgICogRXhwZWN0cyBjbGFzc2VzIHRvIGRlZmluZSBkZWZhdWx0cyBmb3Igdk9mZnNldCwgaE9mZnNldCwgcG9zaXRpb24sXG4gICAgICogYWxpZ25tZW50LCBhbGxvd092ZXJsYXAsIGFuZCBhbGxvd0JvdHRvbU92ZXJsYXAuIFRoZXkgY2FuIGRvIHRoaXMgYnlcbiAgICAgKiBleHRlbmRpbmcgdGhlIGRlZmF1bHRzLCBvciAoZm9yIG5vdyByZWNvbW1lbmRlZCBkdWUgdG8gdGhlIHdheSBkb2NzIGFyZVxuICAgICAqIGdlbmVyYXRlZCkgYnkgZXhwbGljaXRseSBkZWNsYXJpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqKi9cblxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdhdXRvJyA/IHRoaXMuX2dldERlZmF1bHRQb3NpdGlvbigpIDogdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgdGhpcy5hbGlnbm1lbnQgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnYXV0bycgPyB0aGlzLl9nZXREZWZhdWx0QWxpZ25tZW50KCkgOiB0aGlzLm9wdGlvbnMuYWxpZ25tZW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0QWxpZ25tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRBbGlnbm1lbnQoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMucG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImNcIiAvKiBydGwgKi9dKSgpID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgcG9zaXRpb25hYmxlIHBvc3NpYmxlIHBvc2l0aW9ucyBieSBpdGVyYXRpbmcgdGhyb3VnaCBhbGlnbm1lbnRzXG4gICAgICogYW5kIHBvc2l0aW9ucy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVwb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXBvc2l0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2FsaWdubWVudHNFeGhhdXN0ZWQodGhpcy5wb3NpdGlvbikpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5leHRJdGVtKHRoaXMucG9zaXRpb24sIFBPU0lUSU9OUyk7XG4gICAgICAgIHRoaXMuYWxpZ25tZW50ID0gQUxJR05NRU5UU1t0aGlzLnBvc2l0aW9uXVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlYWxpZ24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGp1c3RzIHRoZSBkcm9wZG93biBwYW5lIHBvc3NpYmxlIHBvc2l0aW9ucyBieSBpdGVyYXRpbmcgdGhyb3VnaCBhbGlnbm1lbnRzXG4gICAgICogb24gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlYWxpZ24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVhbGlnbigpIHtcbiAgICAgIHRoaXMuX2FkZFRyaWVkUG9zaXRpb24odGhpcy5wb3NpdGlvbiwgdGhpcy5hbGlnbm1lbnQpO1xuICAgICAgdGhpcy5hbGlnbm1lbnQgPSBuZXh0SXRlbSh0aGlzLmFsaWdubWVudCwgQUxJR05NRU5UU1t0aGlzLnBvc2l0aW9uXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2FkZFRyaWVkUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkVHJpZWRQb3NpdGlvbihwb3NpdGlvbiwgYWxpZ25tZW50KSB7XG4gICAgICB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXSA9IHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dIHx8IFtdO1xuICAgICAgdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0ucHVzaChhbGlnbm1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19wb3NpdGlvbnNFeGhhdXN0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcG9zaXRpb25zRXhoYXVzdGVkKCkge1xuICAgICAgdmFyIGlzRXhoYXVzdGVkID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgUE9TSVRJT05TLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlzRXhoYXVzdGVkID0gaXNFeGhhdXN0ZWQgJiYgdGhpcy5fYWxpZ25tZW50c0V4aGF1c3RlZChQT1NJVElPTlNbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzRXhoYXVzdGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19hbGlnbm1lbnRzRXhoYXVzdGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FsaWdubWVudHNFeGhhdXN0ZWQocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXSAmJiB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXS5sZW5ndGggPT0gQUxJR05NRU5UU1twb3NpdGlvbl0ubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIFdoZW4gd2UncmUgdHJ5aW5nIHRvIGNlbnRlciwgd2UgZG9uJ3Qgd2FudCB0byBhcHBseSBvZmZzZXQgdGhhdCdzIGdvaW5nIHRvXG4gICAgLy8gdGFrZSB1cyBqdXN0IG9mZiBjZW50ZXIsIHNvIHdyYXAgYXJvdW5kIHRvIHJldHVybiAwIGZvciB0aGUgYXBwcm9wcmlhdGVcbiAgICAvLyBvZmZzZXQgaW4gdGhvc2UgYWxpZ25tZW50cy4gIFRPRE86IEZpZ3VyZSBvdXQgaWYgd2Ugd2FudCB0byBtYWtlIHRoaXNcbiAgICAvLyBjb25maWd1cmFibGUgYmVoYXZpb3IuLi4gaXQgZmVlbHMgbW9yZSBpbnR1aXRpdmUsIGVzcGVjaWFsbHkgZm9yIHRvb2x0aXBzLCBidXRcbiAgICAvLyBpdCdzIHBvc3NpYmxlIHNvbWVvbmUgbWlnaHQgYWN0dWFsbHkgd2FudCB0byBzdGFydCBmcm9tIGNlbnRlciBhbmQgdGhlbiBudWRnZVxuICAgIC8vIHNsaWdodGx5IG9mZi5cblxuICB9LCB7XG4gICAga2V5OiAnX2dldFZPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Vk9mZnNldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudk9mZnNldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0SE9mZnNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIT2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRQb3NpdGlvbigkYW5jaG9yLCAkZWxlbWVudCwgJHBhcmVudCkge1xuICAgICAgaWYgKCRhbmNob3IuYXR0cignYXJpYS1leHBhbmRlZCcpID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciAkZWxlRGltcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiYVwiIC8qIEJveCAqL10uR2V0RGltZW5zaW9ucygkZWxlbWVudCksXG4gICAgICAgICAgJGFuY2hvckRpbXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcImFcIiAvKiBCb3ggKi9dLkdldERpbWVuc2lvbnMoJGFuY2hvcik7XG5cbiAgICAgICRlbGVtZW50Lm9mZnNldChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcImFcIiAvKiBCb3ggKi9dLkdldEV4cGxpY2l0T2Zmc2V0cygkZWxlbWVudCwgJGFuY2hvciwgdGhpcy5wb3NpdGlvbiwgdGhpcy5hbGlnbm1lbnQsIHRoaXMuX2dldFZPZmZzZXQoKSwgdGhpcy5fZ2V0SE9mZnNldCgpKSk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFsbG93T3ZlcmxhcCkge1xuICAgICAgICB2YXIgb3ZlcmxhcHMgPSB7fTtcbiAgICAgICAgdmFyIG1pbk92ZXJsYXAgPSAxMDAwMDAwMDA7XG4gICAgICAgIC8vIGRlZmF1bHQgY29vcmRpbmF0ZXMgdG8gaG93IHdlIHN0YXJ0LCBpbiBjYXNlIHdlIGNhbid0IGZpZ3VyZSBvdXQgYmV0dGVyXG4gICAgICAgIHZhciBtaW5Db29yZGluYXRlcyA9IHsgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIGFsaWdubWVudDogdGhpcy5hbGlnbm1lbnQgfTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLl9wb3NpdGlvbnNFeGhhdXN0ZWQoKSkge1xuICAgICAgICAgIHZhciBvdmVybGFwID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJhXCIgLyogQm94ICovXS5PdmVybGFwQXJlYSgkZWxlbWVudCwgJHBhcmVudCwgZmFsc2UsIGZhbHNlLCB0aGlzLm9wdGlvbnMuYWxsb3dCb3R0b21PdmVybGFwKTtcbiAgICAgICAgICBpZiAob3ZlcmxhcCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdmVybGFwIDwgbWluT3ZlcmxhcCkge1xuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IG92ZXJsYXA7XG4gICAgICAgICAgICBtaW5Db29yZGluYXRlcyA9IHsgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIGFsaWdubWVudDogdGhpcy5hbGlnbm1lbnQgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9yZXBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAkZWxlbWVudC5vZmZzZXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJhXCIgLyogQm94ICovXS5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGdldCB0aHJvdWdoIHRoZSBlbnRpcmUgbG9vcCwgdGhlcmUgd2FzIG5vIG5vbi1vdmVybGFwcGluZ1xuICAgICAgICAvLyBwb3NpdGlvbiBhdmFpbGFibGUuIFBpY2sgdGhlIHZlcnNpb24gd2l0aCBsZWFzdCBvdmVybGFwLlxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbWluQ29vcmRpbmF0ZXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYWxpZ25tZW50ID0gbWluQ29vcmRpbmF0ZXMuYWxpZ25tZW50O1xuICAgICAgICAkZWxlbWVudC5vZmZzZXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJhXCIgLyogQm94ICovXS5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3NpdGlvbmFibGU7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuUG9zaXRpb25hYmxlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9zaXRpb24gb2YgcG9zaXRpb25hYmxlIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHBvc2l0aW9uOiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGlnbm1lbnQgb2YgcG9zaXRpb25hYmxlIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgY2VudGVyLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgYWxpZ25tZW50OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIGNvbnRhaW5lci93aW5kb3cuIElmIGZhbHNlLCBkcm9wZG93biBwb3NpdGlvbmFibGUgZmlyc3RcbiAgICogdHJ5IHRvIHBvc2l0aW9uIGFzIGRlZmluZWQgYnkgZGF0YS1wb3NpdGlvbiBhbmQgZGF0YS1hbGlnbm1lbnQsIGJ1dFxuICAgKiByZXBvc2l0aW9uIGlmIGl0IHdvdWxkIGNhdXNlIGFuIG92ZXJmbG93LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dPdmVybGFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2Ygb25seSB0aGUgYm90dG9tIG9mIHRoZSBjb250YWluZXIuIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uXG4gICAqIGJlaGF2aW9yIGZvciBkcm9wZG93bnMsIGFsbG93aW5nIHRoZSBkcm9wZG93biB0byBleHRlbmQgdGhlIGJvdHRvbSBvZiB0aGVcbiAgICogc2NyZWVuIGJ1dCBub3Qgb3RoZXJ3aXNlIGluZmx1ZW5jZSBvciBicmVhayBvdXQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYWxsb3dCb3R0b21PdmVybGFwOiB0cnVlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0aGUgcG9zaXRpb25hYmxlIHNob3VsZCBiZSBzZXBhcmF0ZWQgdmVydGljYWxseSBmcm9tIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRoZSBwb3NpdGlvbmFibGUgc2hvdWxkIGJlIHNlcGFyYXRlZCBob3Jpem9udGFsbHkgZnJvbSBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBoT2Zmc2V0OiAwXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVG91Y2g7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipXb3JrIGluc3BpcmVkIGJ5IG11bHRpcGxlIGpxdWVyeSBzd2lwZSBwbHVnaW5zKipcbi8vKipEb25lIGJ5IFlvaGFpIEFyYXJhdCAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuXG5cbnZhciBUb3VjaCA9IHt9O1xuXG52YXIgc3RhcnRQb3NYLFxuICAgIHN0YXJ0UG9zWSxcbiAgICBzdGFydFRpbWUsXG4gICAgZWxhcHNlZFRpbWUsXG4gICAgaXNNb3ZpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgLy8gIGFsZXJ0KHRoaXMpO1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICBpc01vdmluZyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLnNwb3RTd2lwZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAoaXNNb3ZpbmcpIHtcbiAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICB2YXIgeSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICB2YXIgZHggPSBzdGFydFBvc1ggLSB4O1xuICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgdmFyIGRpcjtcbiAgICBlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xuICAgIGlmIChNYXRoLmFicyhkeCkgPj0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgICBkaXIgPSBkeCA+IDAgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH1cbiAgICAvLyBlbHNlIGlmKE1hdGguYWJzKGR5KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAvLyAgIGRpciA9IGR5ID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgLy8gfVxuICAgIGlmIChkaXIpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG9uVG91Y2hFbmQuY2FsbCh0aGlzKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcignc3dpcGUnLCBkaXIpLnRyaWdnZXIoJ3N3aXBlJyArIGRpcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICBzdGFydFBvc1ggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIGlzTW92aW5nID0gdHJ1ZTtcbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xufVxuXG52YXIgU3BvdFN3aXBlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTcG90U3dpcGUoJCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcG90U3dpcGUpO1xuXG4gICAgdGhpcy52ZXJzaW9uID0gJzEuMC4wJztcbiAgICB0aGlzLmVuYWJsZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIHRoaXMubW92ZVRocmVzaG9sZCA9IDc1O1xuICAgIHRoaXMudGltZVRocmVzaG9sZCA9IDIwMDtcbiAgICB0aGlzLiQgPSAkO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTcG90U3dpcGUsIFt7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciAkID0gdGhpcy4kO1xuICAgICAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0geyBzZXR1cDogaW5pdCB9O1xuXG4gICAgICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkLmV2ZW50LnNwZWNpYWxbJ3N3aXBlJyArIHRoaXNdID0geyBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgICAgICAgIH0gfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcG90U3dpcGU7XG59KCk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBBcyBmYXIgYXMgSSBjYW4gdGVsbCwgYm90aCBzZXR1cFNwb3RTd2lwZSBhbmQgICAgKlxuICogc2V0dXBUb3VjaEhhbmRsZXIgc2hvdWxkIGJlIGlkZW1wb3RlbnQsICAgICAgICAgICpcbiAqIGJlY2F1c2UgdGhleSBkaXJlY3RseSByZXBsYWNlIGZ1bmN0aW9ucyAmICAgICAgICAqXG4gKiB2YWx1ZXMsIGFuZCBkbyBub3QgYWRkIGV2ZW50IGhhbmRsZXJzIGRpcmVjdGx5LiAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblRvdWNoLnNldHVwU3BvdFN3aXBlID0gZnVuY3Rpb24gKCQpIHtcbiAgJC5zcG90U3dpcGUgPSBuZXcgU3BvdFN3aXBlKCQpO1xufTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzZXVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuVG91Y2guc2V0dXBUb3VjaEhhbmRsZXIgPSBmdW5jdGlvbiAoJCkge1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICQoZWwpLmJpbmQoJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3dlIHBhc3MgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdCBiZWNhdXNlIHRoZSBqUXVlcnkgZXZlbnRcbiAgICAgICAgLy9vYmplY3QgaXMgbm9ybWFsaXplZCB0byB3M2Mgc3BlY3MgYW5kIGRvZXMgbm90IHByb3ZpZGUgdGhlIFRvdWNoTGlzdFxuICAgICAgICBoYW5kbGVUb3VjaChldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBoYW5kbGVUb3VjaCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBmaXJzdCA9IHRvdWNoZXNbMF0sXG4gICAgICAgICAgZXZlbnRUeXBlcyA9IHtcbiAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgICAgIHRvdWNoZW5kOiAnbW91c2V1cCdcbiAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnQ7XG5cbiAgICAgIGlmICgnTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAgLypsZWZ0Ki8sIG51bGwpO1xuICAgICAgfVxuICAgICAgZmlyc3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc2ltdWxhdGVkRXZlbnQpO1xuICAgIH07XG4gIH07XG59O1xuXG5Ub3VjaC5pbml0ID0gZnVuY3Rpb24gKCQpIHtcbiAgaWYgKHR5cGVvZiAkLnNwb3RTd2lwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBUb3VjaC5zZXR1cFNwb3RTd2lwZSgkKTtcbiAgICBUb3VjaC5zZXR1cFRvdWNoSGFuZGxlcigkKTtcbiAgfVxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEFiaWRlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cbi8qKlxuICogQWJpZGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFiaWRlXG4gKi9cblxudmFyIEFiaWRlID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEFiaWRlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBBYmlkZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJpZGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBYmlkZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFiaWRlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQWJpZGUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgQWJpZGVcbiAgICAgKiBAZmlyZXMgQWJpZGUjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHRydWUsIHt9LCBBYmlkZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdBYmlkZSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBBYmlkZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgQWJpZGUgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdGhpcy4kaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuXG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEFiaWRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKS5vbigncmVzZXQuemYuYWJpZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5yZXNldEZvcm0oKTtcbiAgICAgIH0pLm9uKCdzdWJtaXQuemYuYWJpZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMudmFsaWRhdGVGb3JtKCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWxpZGF0ZU9uID09PSAnZmllbGRDaGFuZ2UnKSB7XG4gICAgICAgIHRoaXMuJGlucHV0cy5vZmYoJ2NoYW5nZS56Zi5hYmlkZScpLm9uKCdjaGFuZ2UuemYuYWJpZGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIF90aGlzMy52YWxpZGF0ZUlucHV0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubGl2ZVZhbGlkYXRlKSB7XG4gICAgICAgIHRoaXMuJGlucHV0cy5vZmYoJ2lucHV0LnpmLmFiaWRlJykub24oJ2lucHV0LnpmLmFiaWRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfdGhpczMudmFsaWRhdGVJbnB1dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICAgIHRoaXMuJGlucHV0cy5vZmYoJ2JsdXIuemYuYWJpZGUnKS5vbignYmx1ci56Zi5hYmlkZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMzLnZhbGlkYXRlSW5wdXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBBYmlkZSB1cG9uIERPTSBjaGFuZ2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVmbG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZmxvdygpIHtcbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgYSBmb3JtIGVsZW1lbnQgaGFzIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYW5kIGlmIGl0J3MgY2hlY2tlZCBvciBub3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVxdWlyZWRDaGVjaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVpcmVkQ2hlY2soJGVsKSB7XG4gICAgICBpZiAoISRlbC5hdHRyKCdyZXF1aXJlZCcpKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgdmFyIGlzR29vZCA9IHRydWU7XG5cbiAgICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgIGlzR29vZCA9ICRlbFswXS5jaGVja2VkO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICAgIHZhciBvcHQgPSAkZWwuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyk7XG4gICAgICAgICAgaWYgKCFvcHQubGVuZ3RoIHx8ICFvcHQudmFsKCkpIGlzR29vZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCEkZWwudmFsKCkgfHwgISRlbC52YWwoKS5sZW5ndGgpIGlzR29vZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNHb29kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldDpcbiAgICAgKiAtIEJhc2VkIG9uICRlbCwgdGhlIGZpcnN0IGVsZW1lbnQocykgY29ycmVzcG9uZGluZyB0byBgZm9ybUVycm9yU2VsZWN0b3JgIGluIHRoaXMgb3JkZXI6XG4gICAgICogICAxLiBUaGUgZWxlbWVudCdzIGRpcmVjdCBzaWJsaW5nKCdzKS5cbiAgICAgKiAgIDIuIFRoZSBlbGVtZW50J3MgcGFyZW50J3MgY2hpbGRyZW4uXG4gICAgICogLSBFbGVtZW50KHMpIHdpdGggdGhlIGF0dHJpYnV0ZSBgW2RhdGEtZm9ybS1lcnJvci1mb3JdYCBzZXQgd2l0aCB0aGUgZWxlbWVudCdzIGlkLlxuICAgICAqXG4gICAgICogVGhpcyBhbGxvd3MgZm9yIG11bHRpcGxlIGZvcm0gZXJyb3JzIHBlciBpbnB1dCwgdGhvdWdoIGlmIG5vbmUgYXJlIGZvdW5kLCBubyBmb3JtIGVycm9ycyB3aWxsIGJlIHNob3duLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIHJlZmVyZW5jZSB0byBmaW5kIHRoZSBmb3JtIGVycm9yIHNlbGVjdG9yLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3Qgd2l0aCB0aGUgc2VsZWN0b3IuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRGb3JtRXJyb3InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kRm9ybUVycm9yKCRlbCkge1xuICAgICAgdmFyIGlkID0gJGVsWzBdLmlkO1xuICAgICAgdmFyICRlcnJvciA9ICRlbC5zaWJsaW5ncyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yU2VsZWN0b3IpO1xuXG4gICAgICBpZiAoISRlcnJvci5sZW5ndGgpIHtcbiAgICAgICAgJGVycm9yID0gJGVsLnBhcmVudCgpLmZpbmQodGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgJGVycm9yID0gJGVycm9yLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWZvcm0tZXJyb3ItZm9yPVwiJyArIGlkICsgJ1wiXScpKTtcblxuICAgICAgcmV0dXJuICRlcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBvcmRlcjpcbiAgICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICAgKiAzLiBUaGUgYC5jbG9zZXN0KClgIDxsYWJlbD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRMYWJlbCgkZWwpIHtcbiAgICAgIHZhciBpZCA9ICRlbFswXS5pZDtcbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xhYmVsW2Zvcj1cIicgKyBpZCArICdcIl0nKTtcblxuICAgICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAkZWwuY2xvc2VzdCgnbGFiZWwnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRsYWJlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNldCBvZiBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIGEgc2V0IG9mIHJhZGlvIGVscyBpbiB0aGlzIG9yZGVyXG4gICAgICogMi4gVGhlIDxsYWJlbD4gd2l0aCB0aGUgYXR0cmlidXRlIGBbZm9yPVwic29tZUlucHV0SWRcIl1gXG4gICAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmaW5kUmFkaW9MYWJlbHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kUmFkaW9MYWJlbHMoJGVscykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBsYWJlbHMgPSAkZWxzLm1hcChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgdmFyIGlkID0gZWwuaWQ7XG4gICAgICAgIHZhciAkbGFiZWwgPSBfdGhpczQuJGVsZW1lbnQuZmluZCgnbGFiZWxbZm9yPVwiJyArIGlkICsgJ1wiXScpO1xuXG4gICAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAgICRsYWJlbCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWwpLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRsYWJlbFswXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShsYWJlbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIHRvIHRoZSBsYWJlbCwgaW5wdXQsIGFuZCB0aGUgZm9ybVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkRXJyb3JDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgICBpZiAoJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkZm9ybUVycm9yLmxlbmd0aCkge1xuICAgICAgICAkZm9ybUVycm9yLmFkZENsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgICRlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKCdkYXRhLWludmFsaWQnLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIENTUyBlcnJvciBjbGFzc2VzIGV0YyBmcm9tIGFuIGVudGlyZSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZ3JvdXBOYW1lIC0gQSBzdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGdyb3VwTmFtZSkge1xuICAgICAgdmFyICRlbHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJzpyYWRpb1tuYW1lPVwiJyArIGdyb3VwTmFtZSArICdcIl0nKTtcbiAgICAgIHZhciAkbGFiZWxzID0gdGhpcy5maW5kUmFkaW9MYWJlbHMoJGVscyk7XG4gICAgICB2YXIgJGZvcm1FcnJvcnMgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVscyk7XG5cbiAgICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWxzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICRmb3JtRXJyb3JzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBDU1MgZXJyb3IgY2xhc3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBBYmlkZSBzZXR0aW5ncyBmcm9tIHRoZSBsYWJlbCwgaW5wdXQsIGFuZCB0aGUgZm9ybVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVFcnJvckNsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFcnJvckNsYXNzZXMoJGVsKSB7XG4gICAgICAvLyByYWRpb3MgbmVlZCB0byBjbGVhciBhbGwgb2YgdGhlIGVsc1xuICAgICAgaWYgKCRlbFswXS50eXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLmZpbmRMYWJlbCgkZWwpO1xuICAgICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgJGxhYmVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICAgJGZvcm1FcnJvci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR29lcyB0aHJvdWdoIGEgZm9ybSB0byBmaW5kIGlucHV0cyBhbmQgcHJvY2VlZHMgdG8gdmFsaWRhdGUgdGhlbSBpbiB3YXlzIHNwZWNpZmljIHRvIHRoZWlyIHR5cGUuXG4gICAgICogSWdub3JlcyBpbnB1dHMgd2l0aCBkYXRhLWFiaWRlLWlnbm9yZSwgdHlwZT1cImhpZGRlblwiIG9yIGRpc2FibGVkIGF0dHJpYnV0ZXMgc2V0XG4gICAgICogQGZpcmVzIEFiaWRlI2ludmFsaWRcbiAgICAgKiBAZmlyZXMgQWJpZGUjdmFsaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGdvb2RUb0dvIC0gSWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndmFsaWRhdGVJbnB1dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXQoJGVsKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIGNsZWFyUmVxdWlyZSA9IHRoaXMucmVxdWlyZWRDaGVjaygkZWwpLFxuICAgICAgICAgIHZhbGlkYXRlZCA9IGZhbHNlLFxuICAgICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRydWUsXG4gICAgICAgICAgdmFsaWRhdG9yID0gJGVsLmF0dHIoJ2RhdGEtdmFsaWRhdG9yJyksXG4gICAgICAgICAgZXF1YWxUbyA9IHRydWU7XG5cbiAgICAgIC8vIGRvbid0IHZhbGlkYXRlIGlnbm9yZWQgaW5wdXRzIG9yIGhpZGRlbiBpbnB1dHMgb3IgZGlzYWJsZWQgaW5wdXRzXG4gICAgICBpZiAoJGVsLmlzKCdbZGF0YS1hYmlkZS1pZ25vcmVdJykgfHwgJGVsLmlzKCdbdHlwZT1cImhpZGRlblwiXScpIHx8ICRlbC5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgICB2YWxpZGF0ZWQgPSB0aGlzLnZhbGlkYXRlUmFkaW8oJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgIHZhbGlkYXRlZCA9IGNsZWFyUmVxdWlyZTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBjYXNlICdzZWxlY3Qtb25lJzpcbiAgICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgICB2YWxpZGF0ZWQgPSBjbGVhclJlcXVpcmU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB2YWxpZGF0ZWQgPSB0aGlzLnZhbGlkYXRlVGV4dCgkZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRoaXMubWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9yLCAkZWwuYXR0cigncmVxdWlyZWQnKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkZWwuYXR0cignZGF0YS1lcXVhbHRvJykpIHtcbiAgICAgICAgZXF1YWxUbyA9IHRoaXMub3B0aW9ucy52YWxpZGF0b3JzLmVxdWFsVG8oJGVsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdvb2RUb0dvID0gW2NsZWFyUmVxdWlyZSwgdmFsaWRhdGVkLCBjdXN0b21WYWxpZGF0b3IsIGVxdWFsVG9dLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgICAgIHZhciBtZXNzYWdlID0gKGdvb2RUb0dvID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJykgKyAnLnpmLmFiaWRlJztcblxuICAgICAgaWYgKGdvb2RUb0dvKSB7XG4gICAgICAgIC8vIFJlLXZhbGlkYXRlIGlucHV0cyB0aGF0IGRlcGVuZCBvbiB0aGlzIG9uZSB3aXRoIGVxdWFsdG9cbiAgICAgICAgdmFyIGRlcGVuZGVudEVsZW1lbnRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbHRvPVwiJyArICRlbC5hdHRyKCdpZCcpICsgJ1wiXScpO1xuICAgICAgICBpZiAoZGVwZW5kZW50RWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF90aGlzNTtcbiAgICAgICAgICAgIGRlcGVuZGVudEVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS52YWwoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlSW5wdXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpc1tnb29kVG9HbyA/ICdyZW1vdmVFcnJvckNsYXNzZXMnIDogJ2FkZEVycm9yQ2xhc3NlcyddKCRlbCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIERPTSBlbGVtZW50IG9mIHRoZSBpbnB1dC5cbiAgICAgICAqIEBldmVudCBBYmlkZSN2YWxpZFxuICAgICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgICAqL1xuICAgICAgJGVsLnRyaWdnZXIobWVzc2FnZSwgWyRlbF0pO1xuXG4gICAgICByZXR1cm4gZ29vZFRvR287XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gbm9FcnJvciAtIHRydWUgaWYgbm8gZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuLi5cbiAgICAgKiBAZmlyZXMgQWJpZGUjZm9ybXZhbGlkXG4gICAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3ZhbGlkYXRlRm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybSgpIHtcbiAgICAgIHZhciBhY2MgPSBbXTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGlucHV0cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWNjLnB1c2goX3RoaXMudmFsaWRhdGVJbnB1dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpKSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIG5vRXJyb3IgPSBhY2MuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsIG5vRXJyb3IgPyAnbm9uZScgOiAnYmxvY2snKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBmb3JtIGlzIGZpbmlzaGVkIHZhbGlkYXRpbmcuIEV2ZW50IHRyaWdnZXIgaXMgZWl0aGVyIGBmb3JtdmFsaWQuemYuYWJpZGVgIG9yIGBmb3JtaW52YWxpZC56Zi5hYmlkZWAuXG4gICAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBlbGVtZW50IG9mIHRoZSBmb3JtLlxuICAgICAgICogQGV2ZW50IEFiaWRlI2Zvcm12YWxpZFxuICAgICAgICogQGV2ZW50IEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigobm9FcnJvciA/ICdmb3JtdmFsaWQnIDogJ2Zvcm1pbnZhbGlkJykgKyAnLnpmLmFiaWRlJywgW3RoaXMuJGVsZW1lbnRdKTtcblxuICAgICAgcmV0dXJuIG5vRXJyb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIGEgbm90IGEgdGV4dCBpbnB1dCBpcyB2YWxpZCBiYXNlZCBvbiB0aGUgcGF0dGVybiBzcGVjaWZpZWQgaW4gdGhlIGF0dHJpYnV0ZS4gSWYgbm8gbWF0Y2hpbmcgcGF0dGVybiBpcyBmb3VuZCwgcmV0dXJucyB0cnVlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHZhbGlkYXRlLCBzaG91bGQgYmUgYSB0ZXh0IGlucHV0IEhUTUwgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIC0gc3RyaW5nIHZhbHVlIG9mIG9uZSBvZiB0aGUgUmVnRXggcGF0dGVybnMgaW4gQWJpZGUub3B0aW9ucy5wYXR0ZXJuc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgdGhlIGlucHV0IHZhbHVlIG1hdGNoZXMgdGhlIHBhdHRlcm4gc3BlY2lmaWVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3ZhbGlkYXRlVGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlVGV4dCgkZWwsIHBhdHRlcm4pIHtcbiAgICAgIC8vIEEgcGF0dGVybiBjYW4gYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgYmUgaW5mZXJlZCBmcm9tIHRoZSBpbnB1dCdzIFwicGF0dGVyblwiIGF0dHJpYnV0ZSwgb3IgaXQncyBcInR5cGVcIiBhdHRyaWJ1dGVcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuIHx8ICRlbC5hdHRyKCdwYXR0ZXJuJykgfHwgJGVsLmF0dHIoJ3R5cGUnKTtcbiAgICAgIHZhciBpbnB1dFRleHQgPSAkZWwudmFsKCk7XG4gICAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblxuICAgICAgaWYgKGlucHV0VGV4dC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGlzIGluIEFiaWRlJ3MgbGlzdCBvZiBwYXR0ZXJucywgdGhlbiB0ZXN0IHRoYXQgcmVnZXhwXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF0dGVybnMuaGFzT3duUHJvcGVydHkocGF0dGVybikpIHtcbiAgICAgICAgICB2YWxpZCA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuc1twYXR0ZXJuXS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gbmFtZSBpc24ndCBhbHNvIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiB0aGUgZmllbGQsIHRoZW4gdGVzdCBpdCBhcyBhIHJlZ2V4cFxuICAgICAgICBlbHNlIGlmIChwYXR0ZXJuICE9PSAkZWwuYXR0cigndHlwZScpKSB7XG4gICAgICAgICAgICB2YWxpZCA9IG5ldyBSZWdFeHAocGF0dGVybikudGVzdChpbnB1dFRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQW4gZW1wdHkgZmllbGQgaXMgdmFsaWQgaWYgaXQncyBub3QgcmVxdWlyZWRcbiAgICAgIGVsc2UgaWYgKCEkZWwucHJvcCgncmVxdWlyZWQnKSkge1xuICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIGEgbm90IGEgcmFkaW8gaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gd2hldGhlciBvciBub3QgaXQgaXMgcmVxdWlyZWQgYW5kIHNlbGVjdGVkLiBBbHRob3VnaCB0aGUgZnVuY3Rpb24gdGFyZ2V0cyBhIHNpbmdsZSBgPGlucHV0PmAsIGl0IHZhbGlkYXRlcyBieSBjaGVja2luZyB0aGUgYHJlcXVpcmVkYCBhbmQgYGNoZWNrZWRgIHByb3BlcnRpZXMgb2YgYWxsIHJhZGlvIGJ1dHRvbnMgaW4gaXRzIGdyb3VwLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cE5hbWUgLSBBIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZSBvZiBhIHJhZGlvIGJ1dHRvbiBncm91cFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXQgbGVhc3Qgb25lIHJhZGlvIGlucHV0IGhhcyBiZWVuIHNlbGVjdGVkIChpZiBpdCdzIHJlcXVpcmVkKVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd2YWxpZGF0ZVJhZGlvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVSYWRpbyhncm91cE5hbWUpIHtcbiAgICAgIC8vIElmIGF0IGxlYXN0IG9uZSByYWRpbyBpbiB0aGUgZ3JvdXAgaGFzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSwgdGhlIGdyb3VwIGlzIGNvbnNpZGVyZWQgcmVxdWlyZWRcbiAgICAgIC8vIFBlciBXM0Mgc3BlYywgYWxsIHJhZGlvIGJ1dHRvbnMgaW4gYSBncm91cCBzaG91bGQgaGF2ZSBgcmVxdWlyZWRgLCBidXQgd2UncmUgYmVpbmcgbmljZVxuICAgICAgdmFyICRncm91cCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnOnJhZGlvW25hbWU9XCInICsgZ3JvdXBOYW1lICsgJ1wiXScpO1xuICAgICAgdmFyIHZhbGlkID0gZmFsc2UsXG4gICAgICAgICAgcmVxdWlyZWQgPSBmYWxzZTtcblxuICAgICAgLy8gRm9yIHRoZSBncm91cCB0byBiZSByZXF1aXJlZCwgYXQgbGVhc3Qgb25lIHJhZGlvIG5lZWRzIHRvIGJlIHJlcXVpcmVkXG4gICAgICAkZ3JvdXAuZWFjaChmdW5jdGlvbiAoaSwgZSkge1xuICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlKS5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgICAgcmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghcmVxdWlyZWQpIHZhbGlkID0gdHJ1ZTtcblxuICAgICAgaWYgKCF2YWxpZCkge1xuICAgICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHZhbGlkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgY2hlY2tlZFxuICAgICAgICAkZ3JvdXAuZWFjaChmdW5jdGlvbiAoaSwgZSkge1xuICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUpLnByb3AoJ2NoZWNrZWQnKSkge1xuICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIHNlbGVjdGVkIGlucHV0IHBhc3NlcyBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBNdWx0aXBsZSB2YWxpZGF0aW9ucyBjYW4gYmUgdXNlZCwgaWYgcGFzc2VkIHRvIHRoZSBlbGVtZW50IHdpdGggYGRhdGEtdmFsaWRhdG9yPVwiZm9vIGJhciBiYXpcImAgaW4gYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdGVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgaW5wdXQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcXVpcmVkIC0gc2VsZiBleHBsYW5hdG9yeT9cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHZhbGlkYXRpb25zIHBhc3NlZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWF0Y2hWYWxpZGF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICB2YXIgY2xlYXIgPSB2YWxpZGF0b3JzLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBfdGhpczYub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbGVhci5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGZvcm0gaW5wdXRzIGFuZCBzdHlsZXNcbiAgICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0Rm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgIHZhciAkZm9ybSA9IHRoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnLicgKyBvcHRzLmxhYmVsRXJyb3JDbGFzcywgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcuJyArIG9wdHMuaW5wdXRFcnJvckNsYXNzLCAkZm9ybSkubm90KCdzbWFsbCcpLnJlbW92ZUNsYXNzKG9wdHMuaW5wdXRFcnJvckNsYXNzKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkob3B0cy5mb3JtRXJyb3JTZWxlY3RvciArICcuJyArIG9wdHMuZm9ybUVycm9yQ2xhc3MpLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICAgJGZvcm0uZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzppbnB1dCcsICRmb3JtKS5ub3QoJzpidXR0b24sIDpzdWJtaXQsIDpyZXNldCwgOmhpZGRlbiwgOnJhZGlvLCA6Y2hlY2tib3gsIFtkYXRhLWFiaWRlLWlnbm9yZV0nKS52YWwoJycpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnOmlucHV0OnJhZGlvJywgJGZvcm0pLm5vdCgnW2RhdGEtYWJpZGUtaWdub3JlXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSkucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBoYXMgYmVlbiByZXNldC5cbiAgICAgICAqIEBldmVudCBBYmlkZSNmb3JtcmVzZXRcbiAgICAgICAqL1xuICAgICAgJGZvcm0udHJpZ2dlcignZm9ybXJlc2V0LnpmLmFiaWRlJywgWyRmb3JtXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAgICogUmVtb3ZlcyBlcnJvciBzdHlsZXMgYW5kIGNsYXNzZXMgZnJvbSBlbGVtZW50cywgd2l0aG91dCByZXNldHRpbmcgdGhlaXIgdmFsdWVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKS5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICB0aGlzLiRpbnB1dHMub2ZmKCcuYWJpZGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlRXJyb3JDbGFzc2VzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFiaWRlO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnZmllbGRDaGFuZ2UnXG4gICAqL1xuICB2YWxpZGF0ZU9uOiAnZmllbGRDaGFuZ2UnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0IGxhYmVscyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1sYWJlbCdcbiAgICovXG4gIGxhYmVsRXJyb3JDbGFzczogJ2lzLWludmFsaWQtbGFiZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0cyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1pbnB1dCdcbiAgICovXG4gIGlucHV0RXJyb3JDbGFzczogJ2lzLWludmFsaWQtaW5wdXQnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBzZWxlY3RvciB0byB1c2UgdG8gdGFyZ2V0IEZvcm0gRXJyb3JzIGZvciBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJy5mb3JtLWVycm9yJ1xuICAgKi9cbiAgZm9ybUVycm9yU2VsZWN0b3I6ICcuZm9ybS1lcnJvcicsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFkZGVkIHRvIEZvcm0gRXJyb3JzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy12aXNpYmxlJ1xuICAgKi9cbiAgZm9ybUVycm9yQ2xhc3M6ICdpcy12aXNpYmxlJyxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gdmFsaWRhdGUgdGV4dCBpbnB1dHMgb24gYW55IHZhbHVlIGNoYW5nZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGxpdmVWYWxpZGF0ZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHZhbGlkYXRlIGlucHV0cyBvbiBibHVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmFsaWRhdGVPbkJsdXI6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGE6IC9eW2EtekEtWl0rJC8sXG4gICAgYWxwaGFfbnVtZXJpYzogL15bYS16QS1aMC05XSskLyxcbiAgICBpbnRlZ2VyOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlcjogL15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLFxuXG4gICAgLy8gYW1leCwgdmlzYSwgZGluZXJzXG4gICAgY2FyZDogL14oPzo0WzAtOV17MTJ9KD86WzAtOV17M30pP3w1WzEtNV1bMC05XXsxNH18KD86MjIyWzEtOV18MlszLTZdWzAtOV17Mn18MjdbMC0xXVswLTldfDI3MjApWzAtOV17MTJ9fDYoPzowMTF8NVswLTldWzAtOV0pWzAtOV17MTJ9fDNbNDddWzAtOV17MTN9fDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfXwoPzoyMTMxfDE4MDB8MzVcXGR7M30pXFxkezExfSkkLyxcbiAgICBjdnY6IC9eKFswLTldKXszLDR9JC8sXG5cbiAgICAvLyBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9zdGF0ZXMtb2YtdGhlLXR5cGUtYXR0cmlidXRlLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3NcbiAgICBlbWFpbDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmw6IC9eKGh0dHBzP3xmdHB8ZmlsZXxzc2gpOlxcL1xcLygoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpBLVpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC8sXG4gICAgLy8gYWJjLmRlXG4gICAgZG9tYWluOiAvXihbYS16QS1aMC05XShbYS16QS1aMC05XFwtXXswLDYxfVthLXpBLVowLTldKT9cXC4pK1thLXpBLVpdezIsOH0kLyxcblxuICAgIGRhdGV0aW1lOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGU6IC8oPzoxOXwyMClbMC05XXsyfS0oPzooPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18MVswLTldfDJbMC05XSl8KD86KD8hMDIpKD86MFsxLTldfDFbMC0yXSktKD86MzApKXwoPzooPzowWzEzNTc4XXwxWzAyXSktMzEpKSQvLFxuICAgIC8vIEhIOk1NOlNTXG4gICAgdGltZTogL14oMFswLTldfDFbMC05XXwyWzAtM10pKDpbMC01XVswLTldKXsyfSQvLFxuICAgIGRhdGVJU086IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXI6IC9eKDBbMS05XXwxWzAxMl0pWy0gXFwvLl0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXVxcZHs0fSQvLFxuICAgIC8vIEREL01NL1lZWVlcbiAgICBkYXlfbW9udGhfeWVhcjogL14oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXSgwWzEtOV18MVswMTJdKVstIFxcLy5dXFxkezR9JC8sXG5cbiAgICAvLyAjRkZGIG9yICNGRkZGRkZcbiAgICBjb2xvcjogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkLyxcblxuICAgIC8vIERvbWFpbiB8fCBVUkxcbiAgICB3ZWJzaXRlOiB7XG4gICAgICB0ZXN0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICByZXR1cm4gQWJpZGUuZGVmYXVsdHMucGF0dGVybnNbJ2RvbWFpbiddLnRlc3QodGV4dCkgfHwgQWJpZGUuZGVmYXVsdHMucGF0dGVybnNbJ3VybCddLnRlc3QodGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9ucyB0byBiZSB1c2VkLiBgZXF1YWxUb2AgYmVpbmcgdGhlIG9ubHkgZGVmYXVsdCBpbmNsdWRlZCBmdW5jdGlvbi5cbiAgICogRnVuY3Rpb25zIHNob3VsZCByZXR1cm4gb25seSBhIGJvb2xlYW4gaWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC4gRnVuY3Rpb25zIGFyZSBnaXZlbiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogZWwgOiBUaGUgalF1ZXJ5IGVsZW1lbnQgdG8gdmFsaWRhdGUuXG4gICAqIHJlcXVpcmVkIDogQm9vbGVhbiB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGJlIHByZXNlbnQgb3Igbm90LlxuICAgKiBwYXJlbnQgOiBUaGUgZGlyZWN0IHBhcmVudCBvZiB0aGUgaW5wdXQuXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHZhbGlkYXRvcnM6IHtcbiAgICBlcXVhbFRvOiBmdW5jdGlvbiAoZWwsIHJlcXVpcmVkLCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIGVsLmF0dHIoJ2RhdGEtZXF1YWx0bycpKS52YWwoKSA9PT0gZWwudmFsKCk7XG4gICAgfVxuICB9XG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRm91bmRhdGlvbjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXG5cblxuXG5cbnZhciBGT1VOREFUSU9OX1ZFUlNJT04gPSAnNi40LjInO1xuXG4vLyBHbG9iYWwgRm91bmRhdGlvbiBvYmplY3Rcbi8vIFRoaXMgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdywgb3IgdXNlZCBhcyBhIG1vZHVsZSBmb3IgQU1EL0Jyb3dzZXJpZnlcbnZhciBGb3VuZGF0aW9uID0ge1xuICB2ZXJzaW9uOiBGT1VOREFUSU9OX1ZFUlNJT04sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBpbml0aWFsaXplZCBwbHVnaW5zLlxuICAgKi9cbiAgX3BsdWdpbnM6IHt9LFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgZ2VuZXJhdGVkIHVuaXF1ZSBpZHMgZm9yIHBsdWdpbiBpbnN0YW5jZXNcbiAgICovXG4gIF91dWlkczogW10sXG5cbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24gKHBsdWdpbiwgbmFtZSkge1xuICAgIC8vIE9iamVjdCBrZXkgdG8gdXNlIHdoZW4gYWRkaW5nIHRvIGdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuICAgIC8vIEV4YW1wbGVzOiBGb3VuZGF0aW9uLlJldmVhbCwgRm91bmRhdGlvbi5PZmZDYW52YXNcbiAgICB2YXIgY2xhc3NOYW1lID0gbmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKTtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIHN0b3JpbmcgdGhlIHBsdWdpbiwgYWxzbyB1c2VkIHRvIGNyZWF0ZSB0aGUgaWRlbnRpZnlpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIHRoZSBwbHVnaW5cbiAgICAvLyBFeGFtcGxlczogZGF0YS1yZXZlYWwsIGRhdGEtb2ZmLWNhbnZhc1xuICAgIHZhciBhdHRyTmFtZSA9IGh5cGhlbmF0ZShjbGFzc05hbWUpO1xuXG4gICAgLy8gQWRkIHRvIHRoZSBGb3VuZGF0aW9uIG9iamVjdCBhbmQgdGhlIHBsdWdpbnMgbGlzdCAoZm9yIHJlZmxvd2luZylcbiAgICB0aGlzLl9wbHVnaW5zW2F0dHJOYW1lXSA9IHRoaXNbY2xhc3NOYW1lXSA9IHBsdWdpbjtcbiAgfSxcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBQb3B1bGF0ZXMgdGhlIF91dWlkcyBhcnJheSB3aXRoIHBvaW50ZXJzIHRvIGVhY2ggaW5kaXZpZHVhbCBwbHVnaW4gaW5zdGFuY2UuXG4gICAqIEFkZHMgdGhlIGB6ZlBsdWdpbmAgZGF0YS1hdHRyaWJ1dGUgdG8gcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVkIHBsdWdpbnMgdG8gYWxsb3cgdXNlIG9mICQoc2VsZWN0b3IpLmZvdW5kYXRpb24obWV0aG9kKSBjYWxscy5cbiAgICogQWxzbyBmaXJlcyB0aGUgaW5pdGlhbGl6YXRpb24gZXZlbnQgZm9yIGVhY2ggcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBwbHVnaW4sIHBhc3NlZCBhcyBhIGNhbWVsQ2FzZWQgc3RyaW5nLlxuICAgKiBAZmlyZXMgUGx1Z2luI2luaXRcbiAgICovXG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiAocGx1Z2luLCBuYW1lKSB7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmICghcGx1Z2luLiRlbGVtZW50LmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSwgcGx1Z2luLnV1aWQpO1xuICAgIH1cbiAgICBpZiAoIXBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCBwbHVnaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKCdpbml0LnpmLicgKyBwbHVnaW5OYW1lKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBwbHVnaW5OYW1lID0gaHlwaGVuYXRlKGZ1bmN0aW9uTmFtZShwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKS5jb25zdHJ1Y3RvcikpO1xuXG4gICAgdGhpcy5fdXVpZHMuc3BsaWNlKHRoaXMuX3V1aWRzLmluZGV4T2YocGx1Z2luLnV1aWQpLCAxKTtcbiAgICBwbHVnaW4uJGVsZW1lbnQucmVtb3ZlQXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSkucmVtb3ZlRGF0YSgnemZQbHVnaW4nKVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICogQGV2ZW50IFBsdWdpbiNkZXN0cm95ZWRcbiAgICAgKi9cbiAgICAudHJpZ2dlcignZGVzdHJveWVkLnpmLicgKyBwbHVnaW5OYW1lKTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHBsdWdpbikge1xuICAgICAgcGx1Z2luW3Byb3BdID0gbnVsbDsgLy9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgIH1cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBDYXVzZXMgb25lIG9yIG1vcmUgYWN0aXZlIHBsdWdpbnMgdG8gcmUtaW5pdGlhbGl6ZSwgcmVzZXR0aW5nIGV2ZW50IGxpc3RlbmVycywgcmVjYWxjdWxhdGluZyBwb3NpdGlvbnMsIGV0Yy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbnMgLSBvcHRpb25hbCBzdHJpbmcgb2YgYW4gaW5kaXZpZHVhbCBwbHVnaW4ga2V5LCBhdHRhaW5lZCBieSBjYWxsaW5nIGAkKGVsZW1lbnQpLmRhdGEoJ3BsdWdpbk5hbWUnKWAsIG9yIHN0cmluZyBvZiBhIHBsdWdpbiBjbGFzcyBpLmUuIGAnZHJvcGRvd24nYFxuICAgKiBAZGVmYXVsdCBJZiBubyBhcmd1bWVudCBpcyBwYXNzZWQsIHJlZmxvdyBhbGwgY3VycmVudGx5IGFjdGl2ZSBwbHVnaW5zLlxuICAgKi9cbiAgcmVJbml0OiBmdW5jdGlvbiAocGx1Z2lucykge1xuICAgIHZhciBpc0pRID0gcGx1Z2lucyBpbnN0YW5jZW9mIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0pRKSB7XG4gICAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGZucyA9IHtcbiAgICAgICAgICAnb2JqZWN0JzogZnVuY3Rpb24gKHBsZ3MpIHtcbiAgICAgICAgICAgIHBsZ3MuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcCArICddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3N0cmluZyc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcGx1Z2lucyArICddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICd1bmRlZmluZWQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzWydvYmplY3QnXShPYmplY3Qua2V5cyhfdGhpcy5fcGx1Z2lucykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm5zW3R5cGVdKHBsdWdpbnMpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXR1cm4gcGx1Z2lucztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbiAoZWxlbSwgcGx1Z2lucykge1xuXG4gICAgLy8gSWYgcGx1Z2lucyBpcyB1bmRlZmluZWQsIGp1c3QgZ3JhYiBldmVyeXRoaW5nXG4gICAgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcGx1Z2lucyA9IE9iamVjdC5rZXlzKHRoaXMuX3BsdWdpbnMpO1xuICAgIH1cbiAgICAvLyBJZiBwbHVnaW5zIGlzIGEgc3RyaW5nLCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IHdpdGggb25lIGl0ZW1cbiAgICBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBwbHVnaW5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmVhY2gocGx1Z2lucywgZnVuY3Rpb24gKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtKS5maW5kKCdbZGF0YS0nICsgbmFtZSArICddJykuYWRkQmFjaygnW2RhdGEtJyArIG5hbWUgKyAnXScpO1xuXG4gICAgICAvLyBGb3IgZWFjaCBwbHVnaW4gZm91bmQsIGluaXRpYWxpemUgaXRcbiAgICAgICRlbGVtLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIgKyBuYW1lICsgXCIgb24gYW4gZWxlbWVudCB0aGF0IGFscmVhZHkgaGFzIGEgRm91bmRhdGlvbiBwbHVnaW4uXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkZWwuYXR0cignZGF0YS1vcHRpb25zJykpIHtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVsLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgJGVsLmRhdGEoJ3pmUGx1Z2luJywgbmV3IHBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCBvcHRzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG5cbiAgYWRkVG9KcXVlcnk6IGZ1bmN0aW9uICgkKSB7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4gICAgLy8gVE9ETzogbmVlZCB3YXkgdG8gcmVmbG93IHZzLiByZS1pbml0aWFsaXplXG4gICAgLyoqXG4gICAgICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbWV0aG9kIC0gQW4gYWN0aW9uIHRvIHBlcmZvcm0gb24gdGhlIGN1cnJlbnQgalF1ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIG1ldGhvZCxcbiAgICAgICAgICAkbm9KUyA9ICQoJy5uby1qcycpO1xuXG4gICAgICBpZiAoJG5vSlMubGVuZ3RoKSB7XG4gICAgICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy9uZWVkcyB0byBpbml0aWFsaXplIHRoZSBGb3VuZGF0aW9uIG9iamVjdCwgb3IgYW4gaW5kaXZpZHVhbCBwbHVnaW4uXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuICAgICAgICBGb3VuZGF0aW9uLnJlZmxvdyh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vY29sbGVjdCBhbGwgdGhlIGFyZ3VtZW50cywgaWYgbmVjZXNzYXJ5XG4gICAgICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7IC8vZGV0ZXJtaW5lIHRoZSBjbGFzcyBvZiBwbHVnaW5cblxuICAgICAgICBpZiAocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vbWFrZSBzdXJlIGJvdGggdGhlIGNsYXNzIGFuZCBtZXRob2QgZXhpc3RcbiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KHBsdWdDbGFzcywgYXJncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgICAgICAgLy9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseSgkKGVsKS5kYXRhKCd6ZlBsdWdpbicpLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJXZSdyZSBzb3JyeSwgJ1wiICsgbWV0aG9kICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUgbWV0aG9kIGZvciBcIiArIChwbHVnQ2xhc3MgPyBmdW5jdGlvbk5hbWUocGx1Z0NsYXNzKSA6ICd0aGlzIGVsZW1lbnQnKSArICcuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdXZVxcJ3JlIHNvcnJ5LCAnICsgdHlwZSArICcgaXMgbm90IGEgdmFsaWQgcGFyYW1ldGVyLiBZb3UgbXVzdCB1c2UgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtZXRob2QgeW91IHdpc2ggdG8gaW52b2tlLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAkLmZuLmZvdW5kYXRpb24gPSBmb3VuZGF0aW9uO1xuICAgIHJldHVybiAkO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgaWYgKHRpbWVyID09PSBudWxsKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG53aW5kb3cuRm91bmRhdGlvbiA9IEZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbiAoKSB7XG4gIGlmICghRGF0ZS5ub3cgfHwgIXdpbmRvdy5EYXRlLm5vdykgd2luZG93LkRhdGUubm93ID0gRGF0ZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnAgKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdnAgKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gIH1cbiAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTtcbiAgICAgIH0sIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZiAoIXdpbmRvdy5wZXJmb3JtYW5jZSB8fCAhd2luZG93LnBlcmZvcm1hbmNlLm5vdykge1xuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KSgpO1xuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgIGZUb0JpbmQgPSB0aGlzLFxuICAgICAgICBmTk9QID0gZnVuY3Rpb24gKCkge30sXG4gICAgICAgIGZCb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmVG9CaW5kLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBmTk9QID8gdGhpcyA6IG9UaGlzLCBhQXJncy5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gZnVuY05hbWVSZWdleC5leGVjKGZuLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiByZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoID4gMSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfSBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpIHtcbiAgaWYgKCd0cnVlJyA9PT0gc3RyKSByZXR1cm4gdHJ1ZTtlbHNlIGlmICgnZmFsc2UnID09PSBzdHIpIHJldHVybiBmYWxzZTtlbHNlIGlmICghaXNOYU4oc3RyICogMSkpIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gIHJldHVybiBzdHI7XG59XG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERyb3Bkb3duOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcG9zaXRpb25hYmxlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIERyb3Bkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG52YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoX1Bvc2l0aW9uYWJsZSkge1xuICBfaW5oZXJpdHMoRHJvcGRvd24sIF9Qb3NpdGlvbmFibGUpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERyb3Bkb3duLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyb3Bkb3duLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIERyb3Bkb3duXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duLlxuICAgICAqICAgICAgICBPYmplY3Qgc2hvdWxkIGJlIG9mIHRoZSBkcm9wZG93biBwYW5lbCwgcmF0aGVyIHRoYW4gaXRzIGFuY2hvci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBEcm9wZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnRHJvcGRvd24nOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEpO1xuXG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLnJlZ2lzdGVyKCdEcm9wZG93bicsIHtcbiAgICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IHNldHRpbmcvY2hlY2tpbmcgb3B0aW9ucyBhbmQgYXR0cmlidXRlcywgYWRkaW5nIGhlbHBlciB2YXJpYWJsZXMsIGFuZCBzYXZpbmcgdGhlIGFuY2hvci5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyICRpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgICAgdGhpcy4kYW5jaG9ycyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXRvZ2dsZT1cIicgKyAkaWQgKyAnXCJdJykubGVuZ3RoID8gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtdG9nZ2xlPVwiJyArICRpZCArICdcIl0nKSA6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLW9wZW49XCInICsgJGlkICsgJ1wiXScpO1xuICAgICAgdGhpcy4kYW5jaG9ycy5hdHRyKHtcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAkaWQsXG4gICAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogJGlkLFxuICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zZXRDdXJyZW50QW5jaG9yKHRoaXMuJGFuY2hvcnMuZmlyc3QoKSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50Q2xhc3MpIHtcbiAgICAgICAgdGhpcy4kcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnRzKCcuJyArIHRoaXMub3B0aW9ucy5wYXJlbnRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogJGlkLFxuICAgICAgICAnZGF0YS1yZXNpemUnOiAkaWQsXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLiRjdXJyZW50QW5jaG9yLmlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCAnZGQtYW5jaG9yJylcbiAgICAgIH0pO1xuICAgICAgX2dldChEcm9wZG93bi5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEcm9wZG93bi5wcm90b3R5cGUpLCAnX2luaXQnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldERlZmF1bHRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREZWZhdWx0UG9zaXRpb24oKSB7XG4gICAgICAvLyBoYW5kbGUgbGVnYWN5IGNsYXNzbmFtZXNcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tKS9nKTtcbiAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gcG9zaXRpb25bMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldERlZmF1bHRBbGlnbm1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdEFsaWdubWVudCgpIHtcbiAgICAgIC8vIGhhbmRsZSBsZWdhY3kgZmxvYXQgYXBwcm9hY2hcbiAgICAgIHZhciBob3Jpem9udGFsUG9zaXRpb24gPSAvZmxvYXQtKFxcUyspLy5leGVjKHRoaXMuJGN1cnJlbnRBbmNob3IuY2xhc3NOYW1lKTtcbiAgICAgIGlmIChob3Jpem9udGFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGhvcml6b250YWxQb3NpdGlvblsxXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9nZXQoRHJvcGRvd24ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24ucHJvdG90eXBlKSwgJ19nZXREZWZhdWx0QWxpZ25tZW50JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gb2YgdGhlIGRyb3Bkb3duIHBhbmUsIGNoZWNrcyBmb3IgY29sbGlzaW9ucyBpZiBhbGxvdy1vdmVybGFwIGlzIG5vdCB0cnVlLlxuICAgICAqIFJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBpZiBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCwgd2l0aCBhIG5ldyBwb3NpdGlvbiBjbGFzcy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UG9zaXRpb24oKSB7XG4gICAgICBfZ2V0KERyb3Bkb3duLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duLnByb3RvdHlwZSksICdfc2V0UG9zaXRpb24nLCB0aGlzKS5jYWxsKHRoaXMsIHRoaXMuJGN1cnJlbnRBbmNob3IsIHRoaXMuJGVsZW1lbnQsIHRoaXMuJHBhcmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZSBpdCBhIGN1cnJlbnQgYW5jaG9yLlxuICAgICAqIEN1cnJlbnQgYW5jaG9yIGFzIHRoZSByZWZlcmVuY2UgZm9yIHRoZSBwb3NpdGlvbiBvZiBEcm9wZG93biBwYW5lcy5cbiAgICAgKiBAcGFyYW0ge0hUTUx9IGVsIC0gRE9NIGVsZW1lbnQgb2YgdGhlIGFuY2hvci5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0Q3VycmVudEFuY2hvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRDdXJyZW50QW5jaG9yKGVsKSB7XG4gICAgICB0aGlzLiRjdXJyZW50QW5jaG9yID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnQgdXRpbGl6aW5nIHRoZSB0cmlnZ2VycyB1dGlsaXR5IGxpYnJhcnkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJGFuY2hvcnMub2ZmKCdjbGljay56Zi50cmlnZ2VyJykub24oJ2NsaWNrLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9zZXRDdXJyZW50QW5jaG9yKHRoaXMpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaG92ZXIpIHtcbiAgICAgICAgdGhpcy4kYW5jaG9ycy5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl9zZXRDdXJyZW50QW5jaG9yKHRoaXMpO1xuXG4gICAgICAgICAgdmFyIGJvZHlEYXRhID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLmRhdGEoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGJvZHlEYXRhLndoYXRpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgfHwgYm9keURhdGEud2hhdGlucHV0ID09PSAnbW91c2UnKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIF90aGlzLiRhbmNob3JzLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhvdmVyUGFuZSkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd24nKS5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLiRhbmNob3JzLmFkZCh0aGlzLiRlbGVtZW50KS5vbigna2V5ZG93bi56Zi5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgdmFyICR0YXJnZXQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uaGFuZGxlS2V5KGUsICdEcm9wZG93bicsIHtcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHRhcmdldC5pcyhfdGhpcy4kYW5jaG9ycykpIHtcbiAgICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIF90aGlzLiRhbmNob3JzLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgYm9keSB0byBjbG9zZSBhbnkgZHJvcGRvd25zIG9uIGEgY2xpY2suXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2FkZEJvZHlIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZEJvZHlIYW5kbGVyKCkge1xuICAgICAgdmFyICRib2R5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudC5ib2R5KS5ub3QodGhpcy4kZWxlbWVudCksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpLm9uKCdjbGljay56Zi5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfdGhpcy4kYW5jaG9ycy5pcyhlLnRhcmdldCkgfHwgX3RoaXMuJGFuY2hvcnMuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIGRyb3Bkb3duIHBhbmUsIGFuZCBmaXJlcyBhIGJ1YmJsaW5nIGV2ZW50IHRvIGNsb3NlIG90aGVyIGRyb3Bkb3ducy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jY2xvc2VtZVxuICAgICAqIEBmaXJlcyBEcm9wZG93biNzaG93XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgdG8gY2xvc2Ugb3RoZXIgb3BlbiBkcm9wZG93bnMsIHR5cGljYWxseSB3aGVuIGRyb3Bkb3duIGlzIG9wZW5pbmdcbiAgICAgICAqIEBldmVudCBEcm9wZG93biNjbG9zZW1lXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi5kcm9wZG93bicsIHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICB0aGlzLiRhbmNob3JzLmFkZENsYXNzKCdob3ZlcicpLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IHRydWUgfSk7XG4gICAgICAvLyB0aGlzLiRlbGVtZW50Lyouc2hvdygpKi87XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW5pbmcnKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuaW5nJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKS5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogZmFsc2UgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKSB7XG4gICAgICAgIHZhciAkZm9jdXNhYmxlID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgaWYgKCRmb2N1c2FibGUubGVuZ3RoKSB7XG4gICAgICAgICAgJGZvY3VzYWJsZS5lcSgwKS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAgIHRoaXMuX2FkZEJvZHlIYW5kbGVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBvbmNlIHRoZSBkcm9wZG93biBpcyB2aXNpYmxlLlxuICAgICAgICogQGV2ZW50IERyb3Bkb3duI3Nob3dcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG9wZW4gZHJvcGRvd24gcGFuZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiB0cnVlIH0pO1xuXG4gICAgICB0aGlzLiRhbmNob3JzLnJlbW92ZUNsYXNzKCdob3ZlcicpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgbm8gbG9uZ2VyIHZpc2libGUuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd24jaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWxlYXNlRm9jdXModGhpcy4kZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgZHJvcGRvd24gcGFuZSdzIHZpc2liaWxpdHkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgaWYgKHRoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgZHJvcGRvd24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXInKS5oaWRlKCk7XG4gICAgICB0aGlzLiRhbmNob3JzLm9mZignLnpmLmRyb3Bkb3duJyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50LmJvZHkpLm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd247XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wb3NpdGlvbmFibGVfX1tcImFcIiAvKiBQb3NpdGlvbmFibGUgKi9dKTtcblxuRHJvcGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBDbGFzcyB0aGF0IGRlc2lnbmF0ZXMgYm91bmRpbmcgY29udGFpbmVyIG9mIERyb3Bkb3duIChkZWZhdWx0OiB3aW5kb3cpXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9zdHJpbmd9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIHBhcmVudENsYXNzOiBudWxsLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMjUwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBzdWJtZW51cyB0byBvcGVuIG9uIGhvdmVyIGV2ZW50c1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogRG9uJ3QgY2xvc2UgZHJvcGRvd24gd2hlbiBob3ZlcmluZyBvdmVyIGRyb3Bkb3duIHBhbmVcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhvdmVyUGFuZTogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2T2Zmc2V0OiAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaE9mZnNldDogMCxcbiAgLyoqXG4gICAqIERFUFJFQ0FURUQ6IENsYXNzIGFwcGxpZWQgdG8gYWRqdXN0IG9wZW4gcG9zaXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiBkcm9wZG93bi4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHBvc2l0aW9uOiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGlnbm1lbnQgb2YgZHJvcGRvd24gcmVsYXRpdmUgdG8gYW5jaG9yLiBDYW4gYmUgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBjZW50ZXIsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2YgY29udGFpbmVyL3dpbmRvdy4gSWYgZmFsc2UsIGRyb3Bkb3duIHdpbGwgZmlyc3QgdHJ5IHRvIHBvc2l0aW9uIGFzIGRlZmluZWQgYnkgZGF0YS1wb3NpdGlvbiBhbmQgZGF0YS1hbGlnbm1lbnQsIGJ1dCByZXBvc2l0aW9uIGlmIGl0IHdvdWxkIGNhdXNlIGFuIG92ZXJmbG93LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dPdmVybGFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2Ygb25seSB0aGUgYm90dG9tIG9mIHRoZSBjb250YWluZXIuIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uXG4gICAqIGJlaGF2aW9yIGZvciBkcm9wZG93bnMsIGFsbG93aW5nIHRoZSBkcm9wZG93biB0byBleHRlbmQgdGhlIGJvdHRvbSBvZiB0aGVcbiAgICogc2NyZWVuIGJ1dCBub3Qgb3RoZXJ3aXNlIGluZmx1ZW5jZSBvciBicmVhayBvdXQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYWxsb3dCb3R0b21PdmVybGFwOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byB0cmFwIGZvY3VzIHRvIHRoZSBkcm9wZG93biBwYW5lIGlmIG9wZW5lZCB3aXRoIGtleWJvYXJkIGNvbW1hbmRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gc2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHBhbmUsIHJlZ2FyZGxlc3Mgb2YgbWV0aG9kIG9mIG9wZW5pbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkgdG8gY2xvc2UgdGhlIGRyb3Bkb3duLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEVxdWFsaXplcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuLyoqXG4gKiBFcXVhbGl6ZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmVxdWFsaXplclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyIGlmIGVxdWFsaXplciBjb250YWlucyBpbWFnZXNcbiAqL1xuXG52YXIgRXF1YWxpemVyID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEVxdWFsaXplciwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gRXF1YWxpemVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcXVhbGl6ZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFcXVhbGl6ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFcXVhbGl6ZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFcXVhbGl6ZXIsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIEVxdWFsaXplclxuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgRXF1YWxpemVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdFcXVhbGl6ZXInOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBFcXVhbGl6ZXIgcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgZXFJZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lcXVhbGl6ZXInKSB8fCAnJztcbiAgICAgIHZhciAkd2F0Y2hlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoPVwiJyArIGVxSWQgKyAnXCJdJyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuXG4gICAgICB0aGlzLiR3YXRjaGVkID0gJHdhdGNoZWQubGVuZ3RoID8gJHdhdGNoZWQgOiB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplci13YXRjaF0nKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1yZXNpemUnLCBlcUlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCAnZXEnKSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgZXFJZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ2VxJykpO1xuXG4gICAgICB0aGlzLmhhc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgICB0aGlzLmlzTmVzdGVkID0gdGhpcy4kZWxlbWVudC5wYXJlbnRzVW50aWwoZG9jdW1lbnQuYm9keSwgJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHtcbiAgICAgICAgb25SZXNpemVNZUJvdW5kOiB0aGlzLl9vblJlc2l6ZU1lLmJpbmQodGhpcyksXG4gICAgICAgIG9uUG9zdEVxdWFsaXplZEJvdW5kOiB0aGlzLl9vblBvc3RFcXVhbGl6ZWQuYmluZCh0aGlzKVxuICAgICAgfTtcblxuICAgICAgdmFyIGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuICAgICAgdmFyIHRvb1NtYWxsO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKSB7XG4gICAgICAgIHRvb1NtYWxsID0gdGhpcy5fY2hlY2tNUSgpO1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0b29TbWFsbCAhPT0gdW5kZWZpbmVkICYmIHRvb1NtYWxsID09PSBmYWxzZSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpbWdzLmxlbmd0aCkge1xuICAgICAgICAgIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9pbWFnZUxvYWRlcl9fW1wiYVwiIC8qIG9uSW1hZ2VzTG9hZGVkICovXSkoaW1ncywgdGhpcy5fcmVmbG93LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgaWYgdGhlIGJyZWFrcG9pbnQgaXMgdG9vIHNtYWxsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19wYXVzZUV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXVzZUV2ZW50cygpIHtcbiAgICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoe1xuICAgICAgICAnLnpmLmVxdWFsaXplcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFxuICAgICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCxcbiAgICAgICAgJ211dGF0ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcmVzaXplbWUuemYudHJpZ2dlciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25SZXNpemVNZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc2l6ZU1lKGUpIHtcbiAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25Qb3N0RXF1YWxpemVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUG9zdEVxdWFsaXplZChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMuJGVsZW1lbnRbMF0pIHtcbiAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBFcXVhbGl6ZXIuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICAgIGlmICh0aGlzLmhhc05lc3RlZCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgdG8gdGhlIG1pbmltdW0gcmVxdWlyZWQgc2l6ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2hlY2tNUScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01RKCkge1xuICAgICAgdmFyIHRvb1NtYWxsID0gIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5pcyh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbik7XG4gICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNPbikge1xuICAgICAgICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5pc09uKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0b29TbWFsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIG5vb3AgdmVyc2lvbiBmb3IgdGhlIHBsdWdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19raWxsc3dpdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2tpbGxzd2l0Y2goKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgRXF1YWxpemVyIHVwb24gRE9NIGNoYW5nZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWZsb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVmbG93KCkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1N0YWNrZWQoKSkge1xuICAgICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZUJ5Um93KSB7XG4gICAgICAgIHRoaXMuZ2V0SGVpZ2h0c0J5Um93KHRoaXMuYXBwbHlIZWlnaHRCeVJvdy5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0SGVpZ2h0cyh0aGlzLmFwcGx5SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IGRldGVybWluZXMgaWYgdGhlIGZpcnN0IDIgZWxlbWVudHMgYXJlICpOT1QqIHN0YWNrZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2lzU3RhY2tlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1N0YWNrZWQoKSB7XG4gICAgICBpZiAoIXRoaXMuJHdhdGNoZWRbMF0gfHwgIXRoaXMuJHdhdGNoZWRbMV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kd2F0Y2hlZFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgIT09IHRoaXMuJHdhdGNoZWRbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRIZWlnaHRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVpZ2h0cyhjYikge1xuICAgICAgdmFyIGhlaWdodHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICBoZWlnaHRzLnB1c2godGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHQpO1xuICAgICAgfVxuICAgICAgY2IoaGVpZ2h0cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SGVpZ2h0c0J5Um93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVpZ2h0c0J5Um93KGNiKSB7XG4gICAgICB2YXIgbGFzdEVsVG9wT2Zmc2V0ID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGggPyB0aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wIDogMCxcbiAgICAgICAgICBncm91cHMgPSBbXSxcbiAgICAgICAgICBncm91cCA9IDA7XG4gICAgICAvL2dyb3VwIGJ5IFJvd1xuICAgICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgIC8vbWF5YmUgY291bGQgdXNlIHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0VG9wXG4gICAgICAgIHZhciBlbE9mZnNldFRvcCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcy4kd2F0Y2hlZFtpXSkub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAoZWxPZmZzZXRUb3AgIT0gbGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgICAgZ3JvdXArKztcbiAgICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgICAgbGFzdEVsVG9wT2Zmc2V0ID0gZWxPZmZzZXRUb3A7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLCB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbG4gPSBncm91cHMubGVuZ3RoOyBqIDwgbG47IGorKykge1xuICAgICAgICB2YXIgaGVpZ2h0cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZ3JvdXBzW2pdKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgICAgICB9KS5nZXQoKTtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgICAgICBncm91cHNbal0ucHVzaChtYXgpO1xuICAgICAgfVxuICAgICAgY2IoZ3JvdXBzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlIZWlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUhlaWdodChoZWlnaHRzKSB7XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG5cbiAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCBtYXgpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3QgYnkgcm93XG4gICAgICogQHBhcmFtIHthcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRyb3dcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRyb3dcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlIZWlnaHRCeVJvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5SGVpZ2h0QnlSb3coZ3JvdXBzKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGdyb3Vwc0lMZW5ndGggPSBncm91cHNbaV0ubGVuZ3RoLFxuICAgICAgICAgICAgbWF4ID0gZ3JvdXBzW2ldW2dyb3Vwc0lMZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGdyb3Vwc0lMZW5ndGggPD0gMikge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZ3JvdXBzW2ldWzBdWzBdKS5jc3MoeyAnaGVpZ2h0JzogJ2F1dG8nIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIHBlciByb3cgYXJlIGFwcGxpZWRcbiAgICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkcm93XG4gICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsZW5KID0gZ3JvdXBzSUxlbmd0aCAtIDE7IGogPCBsZW5KOyBqKyspIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsgJ2hlaWdodCc6IG1heCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkcm93XG4gICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVxdWFsaXplcjtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiYVwiIC8qIFBsdWdpbiAqL10pO1xuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5cblxuRXF1YWxpemVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gd2hlbiBzdGFja2VkIG9uIHNtYWxsZXIgc2NyZWVucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplT25TdGFjazogZmFsc2UsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXF1YWxpemVCeVJvdzogZmFsc2UsXG4gIC8qKlxuICAgKiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtaW5pbXVtIGJyZWFrcG9pbnQgc2l6ZSB0aGUgcGx1Z2luIHNob3VsZCBlcXVhbGl6ZSBoZWlnaHRzIG9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBlcXVhbGl6ZU9uOiAnJ1xufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEludGVyY2hhbmdlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBJbnRlcmNoYW5nZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uaW50ZXJjaGFuZ2VcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbnZhciBJbnRlcmNoYW5nZSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhJbnRlcmNoYW5nZSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gSW50ZXJjaGFuZ2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVyY2hhbmdlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW50ZXJjaGFuZ2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbnRlcmNoYW5nZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEludGVyY2hhbmdlLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEludGVyY2hhbmdlLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIEludGVyY2hhbmdlXG4gICAgICogQGZpcmVzIEludGVyY2hhbmdlI2luaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIEludGVyY2hhbmdlLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICAgIHRoaXMuY3VycmVudFBhdGggPSAnJztcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0ludGVyY2hhbmdlJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBJbnRlcmNoYW5nZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgaW50ZXJjaGFuZ2UgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiYVwiIC8qIE1lZGlhUXVlcnkgKi9dLl9pbml0KCk7XG5cbiAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdpbnRlcmNoYW5nZScpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAgICdpZCc6IGlkXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fYWRkQnJlYWtwb2ludHMoKTtcbiAgICAgIHRoaXMuX2dlbmVyYXRlUnVsZXMoKTtcbiAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgSW50ZXJjaGFuZ2UuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5fcmVmbG93KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBJbnRlcmNoYW5nZSB1cG9uIERPTSBjaGFuZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVmbG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZmxvdygpIHtcbiAgICAgIHZhciBtYXRjaDtcblxuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSwgYnV0IG9ubHkgc2F2ZSB0aGUgbGFzdCBtYXRjaFxuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xuICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShydWxlLnF1ZXJ5KS5tYXRjaGVzKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHJ1bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICB0aGlzLnJlcGxhY2UobWF0Y2gucGF0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgRm91bmRhdGlvbiBicmVha3BvaW50cyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgb2JqZWN0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCcmVha3BvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCcmVha3BvaW50cygpIHtcbiAgICAgIGZvciAodmFyIGkgaW4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiYVwiIC8qIE1lZGlhUXVlcnkgKi9dLnF1ZXJpZXMpIHtcbiAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdmFyIHF1ZXJ5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiYVwiIC8qIE1lZGlhUXVlcnkgKi9dLnF1ZXJpZXNbaV07XG4gICAgICAgICAgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5Lm5hbWVdID0gcXVlcnkudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIEludGVyY2hhbmdlIGVsZW1lbnQgZm9yIHRoZSBwcm92aWRlZCBtZWRpYSBxdWVyeSArIGNvbnRlbnQgcGFpcmluZ3NcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0aGF0IGlzIGFuIEludGVyY2hhbmdlIGluc3RhbmNlXG4gICAgICogQHJldHVybnMge0FycmF5fSBzY2VuYXJpb3MgLSBBcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSAnbXEnIGFuZCAncGF0aCcga2V5cyB3aXRoIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZ2VuZXJhdGVSdWxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5lcmF0ZVJ1bGVzKGVsZW1lbnQpIHtcbiAgICAgIHZhciBydWxlc0xpc3QgPSBbXTtcbiAgICAgIHZhciBydWxlcztcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ydWxlcykge1xuICAgICAgICBydWxlcyA9IHRoaXMub3B0aW9ucy5ydWxlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdpbnRlcmNoYW5nZScpO1xuICAgICAgfVxuXG4gICAgICBydWxlcyA9IHR5cGVvZiBydWxlcyA9PT0gJ3N0cmluZycgPyBydWxlcy5tYXRjaCgvXFxbLio/XFxdL2cpIDogcnVsZXM7XG5cbiAgICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXS5zbGljZSgxLCAtMSkuc3BsaXQoJywgJyk7XG4gICAgICAgICAgdmFyIHBhdGggPSBydWxlLnNsaWNlKDAsIC0xKS5qb2luKCcnKTtcbiAgICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAoSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XSkge1xuICAgICAgICAgICAgcXVlcnkgPSBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJ1bGVzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNMaXN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgYHNyY2AgcHJvcGVydHkgb2YgYW4gaW1hZ2UsIG9yIGNoYW5nZSB0aGUgSFRNTCBvZiBhIGNvbnRhaW5lciwgdG8gdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZShwYXRoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UGF0aCA9PT0gcGF0aCkgcmV0dXJuO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIHRyaWdnZXIgPSAncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnO1xuXG4gICAgICAvLyBSZXBsYWNpbmcgaW1hZ2VzXG4gICAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdzcmMnLCBwYXRoKS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICAgIH0pLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICB9XG4gICAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICAgIGVsc2UgaWYgKHBhdGgubWF0Y2goL1xcLihnaWZ8anBnfGpwZWd8cG5nfHN2Z3x0aWZmKShbPyNdLiopPy9pKSkge1xuICAgICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKC9nLCAnJTI4JykucmVwbGFjZSgvXFwpL2csICclMjknKTtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7ICdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybCgnICsgcGF0aCArICcpJyB9KS50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlcGxhY2luZyBIVE1MXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5nZXQocGF0aCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gY29udGVudCBpbiBhbiBJbnRlcmNoYW5nZSBlbGVtZW50IGlzIGRvbmUgYmVpbmcgbG9hZGVkLlxuICAgICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICAgKi9cbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBpbnRlcmNoYW5nZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEludGVyY2hhbmdlO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5JbnRlcmNoYW5nZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFJ1bGVzIHRvIGJlIGFwcGxpZWQgdG8gSW50ZXJjaGFuZ2UgZWxlbWVudHMuIFNldCB3aXRoIHRoZSBgZGF0YS1pbnRlcmNoYW5nZWAgYXJyYXkgbm90YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9hcnJheX1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgcnVsZXM6IG51bGxcbn07XG5cbkludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyA9IHtcbiAgJ2xhbmRzY2FwZSc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICdwb3J0cmFpdCc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgJ3JldGluYSc6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWFnZWxsYW47IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3Ntb290aFNjcm9sbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnNtb290aFNjcm9sbFxuICovXG5cbnZhciBNYWdlbGxhbiA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhNYWdlbGxhbiwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gTWFnZWxsYW4oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hZ2VsbGFuKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWFnZWxsYW4uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYWdlbGxhbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1hZ2VsbGFuLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIE1hZ2VsbGFuXG4gICAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIE1hZ2VsbGFuLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdNYWdlbGxhbic7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLmNhbGNQb2ludHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgTWFnZWxsYW4gcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCAnbWFnZWxsYW4nKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLiR0YXJnZXRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtbWFnZWxsYW4tdGFyZ2V0XScpO1xuICAgICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICAgJ2lkJzogaWRcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kYWN0aXZlID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgpO1xuICAgICAgdGhpcy5zY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKTtcblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBhbiBhcnJheSBvZiBwaXhlbCB2YWx1ZXMgdGhhdCBhcmUgdGhlIGRlbWFyY2F0aW9uIGxpbmVzIGJldHdlZW4gbG9jYXRpb25zIG9uIHRoZSBwYWdlLlxuICAgICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjYWxjUG9pbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY1BvaW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgdGhpcy5wb2ludHMgPSBbXTtcbiAgICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgICB0aGlzLmRvY0hlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgoYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0KSk7XG5cbiAgICAgIHRoaXMuJHRhcmdldHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGFyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgIHB0ID0gTWF0aC5yb3VuZCgkdGFyLm9mZnNldCgpLnRvcCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkKTtcbiAgICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgICBfdGhpcy5wb2ludHMucHVzaChwdCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIE1hZ2VsbGFuLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAkYm9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2h0bWwsIGJvZHknKSxcbiAgICAgICAgICBvcHRzID0ge1xuICAgICAgICBkdXJhdGlvbjogX3RoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgZWFzaW5nOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgfTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKSB7XG4gICAgICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICAgIF90aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLnJlZmxvdy5iaW5kKHRoaXMpLFxuICAgICAgICAnc2Nyb2xsbWUuemYudHJpZ2dlcic6IHRoaXMuX3VwZGF0ZUFjdGl2ZS5iaW5kKHRoaXMpXG4gICAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhcnJpdmFsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MoYXJyaXZhbCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZGVlcExpbmtTY3JvbGwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuX2RlZXBMaW5rU2Nyb2xsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0byBzY3JvbGwgdG8gYSBnaXZlbiBsb2NhdGlvbiBvbiB0aGUgcGFnZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2Nyb2xsVG9Mb2MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICAgIHRoaXMuX2luVHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgYW5pbWF0aW9uRWFzaW5nOiB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLFxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICB0aHJlc2hvbGQ6IHRoaXMub3B0aW9ucy50aHJlc2hvbGQsXG4gICAgICAgIG9mZnNldDogdGhpcy5vcHRpb25zLm9mZnNldFxuICAgICAgfTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3Ntb290aFNjcm9sbF9fW1wiYVwiIC8qIFNtb290aFNjcm9sbCAqL10uc2Nyb2xsVG9Mb2MobG9jLCBvcHRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgTWFnZWxsYW4gdXBvbiBET00gY2hhbmdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZmxvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZmxvdygpIHtcbiAgICAgIHRoaXMuY2FsY1BvaW50cygpO1xuICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZUFjdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVBY3RpdmUoKSAvKmV2dCwgZWxlbSwgc2Nyb2xsUG9zKi97XG4gICAgICBpZiAodGhpcy5faW5UcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB3aW5Qb3MgPSAvKnNjcm9sbFBvcyB8fCovcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgICAgY3VySWR4O1xuXG4gICAgICBpZiAod2luUG9zICsgdGhpcy53aW5IZWlnaHQgPT09IHRoaXMuZG9jSGVpZ2h0KSB7XG4gICAgICAgIGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICB9IGVsc2UgaWYgKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKSB7XG4gICAgICAgIGN1cklkeCA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc0Rvd24gPSB0aGlzLnNjcm9sbFBvcyA8IHdpblBvcyxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMub2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLm9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgfSk7XG4gICAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kYWN0aXZlLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG4gICAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICB2YXIgaGFzaCA9IFwiXCI7XG4gICAgICAgIGlmIChjdXJJZHggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaCAhPT0gd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaGFzaCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gbWFnZWxsYW4gaXMgZmluaXNoZWQgdXBkYXRpbmcgdG8gdGhlIG5ldyBhY3RpdmUgZWxlbWVudC5cbiAgICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cGRhdGUuemYubWFnZWxsYW4nLCBbdGhpcy4kYWN0aXZlXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgTWFnZWxsYW4gYW5kIHJlc2V0cyB0aGUgdXJsIG9mIHRoZSB3aW5kb3cuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm1hZ2VsbGFuJykuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoaGFzaCwgJycpO1xuICAgICAgfVxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLl9kZWVwTGlua1Njcm9sbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1hZ2VsbGFuO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5NYWdlbGxhbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gIC8qKlxuICAgKiBBbmltYXRpb24gc3R5bGUgdG8gdXNlIHdoZW4gc2Nyb2xsaW5nIGJldHdlZW4gbG9jYXRpb25zLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpxdWVyeSBhbmltYXRlfVxuICAgKi9cbiAgYW5pbWF0aW9uRWFzaW5nOiAnbGluZWFyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICB0aHJlc2hvbGQ6IDUwLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGxvY2F0aW9ucyBsaW5rIG9uIHRoZSBtYWdlbGxhbiBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIGFjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgc2NyaXB0IHRvIG1hbmlwdWxhdGUgdGhlIHVybCBvZiB0aGUgY3VycmVudCBwYWdlLCBhbmQgaWYgc3VwcG9ydGVkLCBhbHRlciB0aGUgaGlzdG9yeS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIG9mZnNldDogMFxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE9mZkNhbnZhczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogT2ZmQ2FudmFzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vZmZjYW52YXNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBPZmZDYW52YXMgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoT2ZmQ2FudmFzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBPZmZDYW52YXMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9mZkNhbnZhcyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9mZkNhbnZhcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9mZkNhbnZhcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE9mZkNhbnZhcywgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvZmYtY2FudmFzIHdyYXBwZXIuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgT2ZmQ2FudmFzXG4gICAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGluaXRpYWxpemUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ09mZkNhbnZhcyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgT2ZmQ2FudmFzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNvbnRlbnRDbGFzc2VzID0geyBiYXNlOiBbXSwgcmV2ZWFsOiBbXSB9O1xuICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCk7XG4gICAgICB0aGlzLiR0cmlnZ2VycyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoKTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSAnbGVmdCc7XG4gICAgICB0aGlzLiRjb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgpO1xuICAgICAgdGhpcy5uZXN0ZWQgPSAhIXRoaXMub3B0aW9ucy5uZXN0ZWQ7XG5cbiAgICAgIC8vIERlZmluZXMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKFsncHVzaCcsICdvdmVybGFwJ10pLmVhY2goZnVuY3Rpb24gKGluZGV4LCB2YWwpIHtcbiAgICAgICAgX3RoaXMzLmNvbnRlbnRDbGFzc2VzLmJhc2UucHVzaCgnaGFzLXRyYW5zaXRpb24tJyArIHZhbCk7XG4gICAgICB9KTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xuICAgICAgICBfdGhpczMuY29udGVudENsYXNzZXMuYmFzZS5wdXNoKCdoYXMtcG9zaXRpb24tJyArIHZhbCk7XG4gICAgICAgIF90aGlzMy5jb250ZW50Q2xhc3Nlcy5yZXZlYWwucHVzaCgnaGFzLXJldmVhbC0nICsgdmFsKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX19bXCJhXCIgLyogVHJpZ2dlcnMgKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uX2luaXQoKTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgb2ZmLWNhbnZhcyB3cmFwcGVyIGJ5IGFkZGluZyB0aGUgZXhpdCBvdmVybGF5IChpZiBuZWVkZWQpLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAvLyBGaW5kIG9mZi1jYW52YXMgY29udGVudCwgZWl0aGVyIGJ5IElEIChpZiBzcGVjaWZpZWQpLCBieSBzaWJsaW5ncyBvciBieSBjbG9zZXN0IHNlbGVjdG9yIChmYWxsYmFjaylcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudElkKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIHRoaXMub3B0aW9ucy5jb250ZW50SWQpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuZmlyc3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5maXJzdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5jb250ZW50SWQpIHtcbiAgICAgICAgLy8gQXNzdW1lIHRoYXQgdGhlIG9mZi1jYW52YXMgZWxlbWVudCBpcyBuZXN0ZWQgaWYgaXQgaXNuJ3QgYSBzaWJsaW5nIG9mIHRoZSBjb250ZW50XG4gICAgICAgIHRoaXMubmVzdGVkID0gdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmxlbmd0aCA9PT0gMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRJZCAmJiB0aGlzLm9wdGlvbnMubmVzdGVkID09PSBudWxsKSB7XG4gICAgICAgIC8vIFdhcm5pbmcgaWYgdXNpbmcgY29udGVudCBJRCB3aXRob3V0IHNldHRpbmcgdGhlIG5lc3RlZCBvcHRpb25cbiAgICAgICAgLy8gT25jZSB0aGUgZWxlbWVudCBpcyBuZXN0ZWQgaXQgaXMgcmVxdWlyZWQgdG8gd29yayBwcm9wZXJseSBpbiB0aGlzIGNhc2VcbiAgICAgICAgY29uc29sZS53YXJuKCdSZW1lbWJlciB0byB1c2UgdGhlIG5lc3RlZCBvcHRpb24gaWYgdXNpbmcgdGhlIGNvbnRlbnQgSUQgb3B0aW9uIScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5uZXN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gRm9yY2UgdHJhbnNpdGlvbiBvdmVybGFwIGlmIG5lc3RlZFxuICAgICAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiA9ICdvdmVybGFwJztcbiAgICAgICAgLy8gUmVtb3ZlIGFwcHJvcHJpYXRlIGNsYXNzZXMgaWYgYWxyZWFkeSBhc3NpZ25lZCBpbiBtYXJrdXBcbiAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtdHJhbnNpdGlvbi1wdXNoJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLXRyYW5zaXRpb24tJyArIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICsgJyBpcy1jbG9zZWQnKTtcblxuICAgICAgLy8gRmluZCB0cmlnZ2VycyB0aGF0IGFmZmVjdCB0aGlzIGVsZW1lbnQgYW5kIGFkZCBhcmlhLWV4cGFuZGVkIHRvIHRoZW1cbiAgICAgIHRoaXMuJHRyaWdnZXJzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCkuZmluZCgnW2RhdGEtb3Blbj1cIicgKyBpZCArICdcIl0sIFtkYXRhLWNsb3NlPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtdG9nZ2xlPVwiJyArIGlkICsgJ1wiXScpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKS5hdHRyKCdhcmlhLWNvbnRyb2xzJywgaWQpO1xuXG4gICAgICAvLyBHZXQgcG9zaXRpb24gYnkgY2hlY2tpbmcgZm9yIHJlbGF0ZWQgQ1NTIGNsYXNzXG4gICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy4kZWxlbWVudC5pcygnLnBvc2l0aW9uLWxlZnQsIC5wb3NpdGlvbi10b3AsIC5wb3NpdGlvbi1yaWdodCwgLnBvc2l0aW9uLWJvdHRvbScpID8gdGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLm1hdGNoKC9wb3NpdGlvblxcLShsZWZ0fHRvcHxyaWdodHxib3R0b20pLylbMV0gOiB0aGlzLnBvc2l0aW9uO1xuXG4gICAgICAvLyBBZGQgYW4gb3ZlcmxheSBvdmVyIHRoZSBjb250ZW50IGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2YXIgb3ZlcmxheVBvc2l0aW9uID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzLiRlbGVtZW50KS5jc3MoXCJwb3NpdGlvblwiKSA9PT0gJ2ZpeGVkJyA/ICdpcy1vdmVybGF5LWZpeGVkJyA6ICdpcy1vdmVybGF5LWFic29sdXRlJztcbiAgICAgICAgb3ZlcmxheS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2pzLW9mZi1jYW52YXMtb3ZlcmxheSAnICsgb3ZlcmxheVBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy4kb3ZlcmxheSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkob3ZlcmxheSk7XG4gICAgICAgIGlmIChvdmVybGF5UG9zaXRpb24gPT09ICdpcy1vdmVybGF5LWZpeGVkJykge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcy4kb3ZlcmxheSkuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kY29udGVudC5hcHBlbmQodGhpcy4kb3ZlcmxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1JldmVhbGVkID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5yZXZlYWxPbiA9IHRoaXMub3B0aW9ucy5yZXZlYWxPbiB8fCB0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvKHJldmVhbC1mb3ItbWVkaXVtfHJldmVhbC1mb3ItbGFyZ2UpL2cpWzBdLnNwbGl0KCctJylbMl07XG4gICAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5pdGFsbHkgcmVtb3ZlIGFsbCB0cmFuc2l0aW9uL3Bvc2l0aW9uIENTUyBjbGFzc2VzIGZyb20gb2ZmLWNhbnZhcyBjb250ZW50IGNvbnRhaW5lci5cbiAgICAgIHRoaXMuX3JlbW92ZUNvbnRlbnRDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byB0aGUgb2ZmLWNhbnZhcyB3cmFwcGVyIGFuZCB0aGUgZXhpdCBvdmVybGF5LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKS5vbih7XG4gICAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgJHRhcmdldCA9IHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA/IHRoaXMuJG92ZXJsYXkgOiB0aGlzLiRjb250ZW50O1xuICAgICAgICAkdGFyZ2V0Lm9uKHsgJ2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldE1RQ2hlY2tlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNUUNoZWNrZXIoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgICAgX3RoaXMucmV2ZWFsKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uZSgnbG9hZC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uYXRMZWFzdChfdGhpcy5vcHRpb25zLnJldmVhbE9uKSkge1xuICAgICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgQ1NTIHRyYW5zaXRpb24vcG9zaXRpb24gY2xhc3NlcyBvZiB0aGUgb2ZmLWNhbnZhcyBjb250ZW50IGNvbnRhaW5lci5cbiAgICAgKiBSZW1vdmluZyB0aGUgY2xhc3NlcyBpcyBpbXBvcnRhbnQgd2hlbiBhbm90aGVyIG9mZi1jYW52YXMgZ2V0cyBvcGVuZWQgdGhhdCB1c2VzIHRoZSBzYW1lIGNvbnRlbnQgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaGFzUmV2ZWFsIC0gdHJ1ZSBpZiByZWxhdGVkIG9mZi1jYW52YXMgZWxlbWVudCBpcyByZXZlYWxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVtb3ZlQ29udGVudENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlQ29udGVudENsYXNzZXMoaGFzUmV2ZWFsKSB7XG4gICAgICBpZiAodHlwZW9mIGhhc1JldmVhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3ModGhpcy5jb250ZW50Q2xhc3Nlcy5iYXNlLmpvaW4oJyAnKSk7XG4gICAgICB9IGVsc2UgaWYgKGhhc1JldmVhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5yZW1vdmVDbGFzcygnaGFzLXJldmVhbC0nICsgdGhpcy5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgQ1NTIHRyYW5zaXRpb24vcG9zaXRpb24gY2xhc3NlcyBvZiB0aGUgb2ZmLWNhbnZhcyBjb250ZW50IGNvbnRhaW5lciwgYmFzZWQgb24gdGhlIG9wZW5pbmcgb2ZmLWNhbnZhcyBlbGVtZW50LlxuICAgICAqIEJlZm9yZWhhbmQgYW55IHRyYW5zaXRpb24vcG9zaXRpb24gY2xhc3MgZ2V0cyByZW1vdmVkLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaGFzUmV2ZWFsIC0gdHJ1ZSBpZiByZWxhdGVkIG9mZi1jYW52YXMgZWxlbWVudCBpcyByZXZlYWxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkQ29udGVudENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkQ29udGVudENsYXNzZXMoaGFzUmV2ZWFsKSB7XG4gICAgICB0aGlzLl9yZW1vdmVDb250ZW50Q2xhc3NlcyhoYXNSZXZlYWwpO1xuICAgICAgaWYgKHR5cGVvZiBoYXNSZXZlYWwgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLiRjb250ZW50LmFkZENsYXNzKCdoYXMtdHJhbnNpdGlvbi0nICsgdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gKyAnIGhhcy1wb3NpdGlvbi0nICsgdGhpcy5wb3NpdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKGhhc1JldmVhbCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRjb250ZW50LmFkZENsYXNzKCdoYXMtcmV2ZWFsLScgKyB0aGlzLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmV2ZWFsZWQgLSB0cnVlIGlmIGVsZW1lbnQgc2hvdWxkIGJlIHJldmVhbGVkLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXZlYWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgICAgaWYgKGlzUmV2ZWFsZWQpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmlzUmV2ZWFsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtY2xvc2VkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWRkQ29udGVudENsYXNzZXMoaXNSZXZlYWxlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgc2Nyb2xsaW5nIG9mIHRoZSBib2R5IHdoZW4gb2ZmY2FudmFzIGlzIG9wZW4gb24gbW9iaWxlIFNhZmFyaSBhbmQgb3RoZXIgdHJvdWJsZXNvbWUgYnJvd3NlcnMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3N0b3BTY3JvbGxpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RvcFNjcm9sbGluZyhldmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRha2VuIGFuZCBhZGFwdGVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjg4OTQ0Ny9wcmV2ZW50LWZ1bGwtcGFnZS1zY3JvbGxpbmctaW9zXG4gICAgLy8gT25seSByZWFsbHkgd29ya3MgZm9yIHksIG5vdCBzdXJlIGhvdyB0byBleHRlbmQgdG8geCBvciBpZiB3ZSBuZWVkIHRvLlxuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVjb3JkU2Nyb2xsYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWNvcmRTY3JvbGxhYmxlKGV2ZW50KSB7XG4gICAgICB2YXIgZWxlbSA9IHRoaXM7IC8vIGNhbGxlZCBmcm9tIGV2ZW50IGhhbmRsZXIgY29udGV4dCB3aXRoIHRoaXMgYXMgZWxlbVxuXG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlIChjb250ZW50IG92ZXJmbG93cyksIHRoZW4uLi5cbiAgICAgIGlmIChlbGVtLnNjcm9sbEhlaWdodCAhPT0gZWxlbS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgYXQgdGhlIHRvcCwgc2Nyb2xsIGRvd24gb25lIHBpeGVsIHRvIGFsbG93IHNjcm9sbGluZyB1cFxuICAgICAgICBpZiAoZWxlbS5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICBlbGVtLnNjcm9sbFRvcCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UncmUgYXQgdGhlIGJvdHRvbSwgc2Nyb2xsIHVwIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgZG93blxuICAgICAgICBpZiAoZWxlbS5zY3JvbGxUb3AgPT09IGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICBlbGVtLnNjcm9sbFRvcCA9IGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQgLSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbGVtLmFsbG93VXAgPSBlbGVtLnNjcm9sbFRvcCA+IDA7XG4gICAgICBlbGVtLmFsbG93RG93biA9IGVsZW0uc2Nyb2xsVG9wIDwgZWxlbS5zY3JvbGxIZWlnaHQgLSBlbGVtLmNsaWVudEhlaWdodDtcbiAgICAgIGVsZW0ubGFzdFkgPSBldmVudC5vcmlnaW5hbEV2ZW50LnBhZ2VZO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zdG9wU2Nyb2xsUHJvcGFnYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RvcFNjcm9sbFByb3BhZ2F0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgZWxlbSA9IHRoaXM7IC8vIGNhbGxlZCBmcm9tIGV2ZW50IGhhbmRsZXIgY29udGV4dCB3aXRoIHRoaXMgYXMgZWxlbVxuICAgICAgdmFyIHVwID0gZXZlbnQucGFnZVkgPCBlbGVtLmxhc3RZO1xuICAgICAgdmFyIGRvd24gPSAhdXA7XG4gICAgICBlbGVtLmxhc3RZID0gZXZlbnQucGFnZVk7XG5cbiAgICAgIGlmICh1cCAmJiBlbGVtLmFsbG93VXAgfHwgZG93biAmJiBlbGVtLmFsbG93RG93bikge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBFdmVudCBvYmplY3QgcGFzc2VkIGZyb20gbGlzdGVuZXIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAgICogQGZpcmVzIE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb3BlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW4oZXZlbnQsIHRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvID09PSAndG9wJykge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvID09PSAnYm90dG9tJykge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lICYmIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICE9PSAnb3ZlcmxhcCcpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJycpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAqIEBldmVudCBPZmZDYW52YXMjb3BlbmVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKS5yZW1vdmVDbGFzcygnaXMtY2xvc2VkJyk7XG5cbiAgICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpLnRyaWdnZXIoJ29wZW5lZC56Zi5vZmZjYW52YXMnKTtcblxuICAgICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnaXMtb3Blbi0nICsgdGhpcy5wb3NpdGlvbik7XG5cbiAgICAgIC8vIElmIGBjb250ZW50U2Nyb2xsYCBpcyBzZXQgdG8gZmFsc2UsIGFkZCBjbGFzcyBhbmQgZGlzYWJsZSBzY3JvbGxpbmcgb24gdG91Y2ggZGV2aWNlcy5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudFNjcm9sbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLmFkZENsYXNzKCdpcy1vZmYtY2FudmFzLW9wZW4nKS5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3RvdWNoc3RhcnQnLCB0aGlzLl9yZWNvcmRTY3JvbGxhYmxlKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbFByb3BhZ2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSB0cnVlICYmIHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy1jbG9zYWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uZShfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYlwiIC8qIHRyYW5zaXRpb25lbmQgKi9dKSh0aGlzLiRlbGVtZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBleGl0IGlmIHByZW1hdHVyZWx5IGNsb3NlZFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2FudmFzRm9jdXMgPSBfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hdXRvZm9jdXNdJyk7XG4gICAgICAgICAgaWYgKGNhbnZhc0ZvY3VzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FudmFzRm9jdXMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZmluZCgnYSwgYnV0dG9uJykuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRjb250ZW50LmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWRkQ29udGVudENsYXNzZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKGNiKSB7XG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAqIEBldmVudCBPZmZDYW52YXMjY2xvc2VkXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdjbG9zZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4tbGVmdCBpcy1vcGVuLXRvcCBpcy1vcGVuLXJpZ2h0IGlzLW9wZW4tYm90dG9tJyk7XG5cbiAgICAgIC8vIElmIGBjb250ZW50U2Nyb2xsYCBpcyBzZXQgdG8gZmFsc2UsIHJlbW92ZSBjbGFzcyBhbmQgcmUtZW5hYmxlIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50U2Nyb2xsID09PSBmYWxzZSkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLW9mZi1jYW52YXMtb3BlbicpLm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5yZWxlYXNlRm9jdXModGhpcy4kZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIExpc3RlbiB0byB0cmFuc2l0aW9uRW5kIGFuZCBhZGQgY2xhc3Mgd2hlbiBkb25lLlxuICAgICAgdGhpcy4kZWxlbWVudC5vbmUoX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImJcIiAvKiB0cmFuc2l0aW9uZW5kICovXSkodGhpcy4kZWxlbWVudCksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1jbG9zZWQnKTtcbiAgICAgICAgX3RoaXMuX3JlbW92ZUNvbnRlbnRDbGFzc2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbiBvciBjbG9zZWQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgdGhpcy5jbG9zZShldmVudCwgdHJpZ2dlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMga2V5Ym9hcmQgaW5wdXQgd2hlbiBkZXRlY3RlZC4gV2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLCB0aGUgb2ZmLWNhbnZhcyBtZW51IGNsb3NlcywgYW5kIGZvY3VzIGlzIHJlc3RvcmVkIHRvIHRoZSBlbGVtZW50IHRoYXQgb3BlbmVkIHRoZSBtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19oYW5kbGVLZXlib2FyZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZChlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM0LmNsb3NlKCk7XG4gICAgICAgICAgX3RoaXM0LiRsYXN0VHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKTtcbiAgICAgIHRoaXMuJG92ZXJsYXkub2ZmKCcuemYub2ZmY2FudmFzJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9mZkNhbnZhcztcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiYVwiIC8qIFBsdWdpbiAqL10pO1xuXG5PZmZDYW52YXMuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgdXNlciB0byBjbGljayBvdXRzaWRlIG9mIHRoZSBtZW51IHRvIGNsb3NlIGl0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gb3ZlcmxheSBvbiB0b3Agb2YgYFtkYXRhLW9mZi1jYW52YXMtY29udGVudF1gLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjb250ZW50T3ZlcmxheTogdHJ1ZSxcblxuICAvKipcbiAgICogVGFyZ2V0IGFuIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIgYnkgSUQgdGhhdCBtYXkgYmUgcGxhY2VkIGFueXdoZXJlLiBJZiBudWxsIHRoZSBjbG9zZXN0IGNvbnRlbnQgY29udGFpbmVyIHdpbGwgYmUgdGFrZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9zdHJpbmd9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIGNvbnRlbnRJZDogbnVsbCxcblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBvZmYtY2FudmFzIGVsZW1lbnQgaXMgbmVzdGVkIGluIGFuIG9mZi1jYW52YXMgY29udGVudC4gVGhpcyBpcyByZXF1aXJlZCB3aGVuIHVzaW5nIHRoZSBjb250ZW50SWQgb3B0aW9uIGZvciBhIG5lc3RlZCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBuZXN0ZWQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIHNjcm9sbGluZyBvZiB0aGUgbWFpbiBjb250ZW50IHdoZW4gYW4gb2ZmIGNhbnZhcyBwYW5lbCBpcyBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjb250ZW50U2Nyb2xsOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIHRyYW5zaXRpb25UaW1lOiBudWxsLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRyYW5zaXRpb24gZm9yIHRoZSBvZmZjYW52YXMgbWVudS4gT3B0aW9ucyBhcmUgJ3B1c2gnLCAnZGV0YWNoZWQnIG9yICdzbGlkZScuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcHVzaFxuICAgKi9cbiAgdHJhbnNpdGlvbjogJ3B1c2gnLFxuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgcGFnZSB0byBzY3JvbGwgdG8gdG9wIG9yIGJvdHRvbSBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBmb3JjZVRvOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuIGZvciBjZXJ0YWluIGJyZWFrcG9pbnRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICByZXZlYWxPbjogbnVsbCxcblxuICAvKipcbiAgICogRm9yY2UgZm9jdXMgdG8gdGhlIG9mZmNhbnZhcyBvbiBvcGVuLiBJZiB0cnVlLCB3aWxsIGZvY3VzIHRoZSBvcGVuaW5nIHRyaWdnZXIgb24gY2xvc2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcmV2ZWFsLWZvci1cbiAgICogQHRvZG8gaW1wcm92ZSB0aGUgcmVnZXggdGVzdGluZyBmb3IgdGhpcy5cbiAgICovXG4gIHJldmVhbENsYXNzOiAncmV2ZWFsLWZvci0nLFxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBvcHRpb25hbCBmb2N1cyB0cmFwcGluZyB3aGVuIG9wZW5pbmcgYW4gb2ZmY2FudmFzLiBTZXRzIHRhYmluZGV4IG9mIFtkYXRhLW9mZi1jYW52YXMtY29udGVudF0gdG8gLTEgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlXG59O1xuXG5cblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gT3JiaXQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdGltZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2ZvdW5kYXRpb25fdXRpbF90b3VjaF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIE9yYml0IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vcmJpdFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudG91Y2hcbiAqL1xuXG52YXIgT3JiaXQgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoT3JiaXQsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIE9yYml0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmJpdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9yYml0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT3JiaXQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhPcmJpdCwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9yYml0IGNhcm91c2VsLlxuICAgICogQGNsYXNzXG4gICAgKiBAbmFtZSBPcmJpdFxuICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBPcmJpdCBDYXJvdXNlbC5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgT3JiaXQuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ09yYml0JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fZm91bmRhdGlvbl91dGlsX3RvdWNoX19bXCJhXCIgLyogVG91Y2ggKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7IC8vIFRvdWNoIGluaXQgaXMgaWRlbXBvdGVudCwgd2UganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCdzIGluaXRpYWxpZWQuXG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10ucmVnaXN0ZXIoJ09yYml0Jywge1xuICAgICAgICAnbHRyJzoge1xuICAgICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgICAgfSxcbiAgICAgICAgJ3J0bCc6IHtcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMsIHNldHRpbmcgYXR0cmlidXRlcywgYW5kIHN0YXJ0aW5nIHRoZSBhbmltYXRpb24uXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIC8vIEBUT0RPOiBjb25zaWRlciBkaXNjdXNzaW9uIG9uIFBSICM5Mjc4IGFib3V0IERPTSBwb2xsdXRpb24gYnkgY2hhbmdlU2xpZGVcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIHRoaXMuJHNsaWRlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcyk7XG5cbiAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSxcbiAgICAgICAgICBpbml0QWN0aXZlID0gdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpLFxuICAgICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ29yYml0Jyk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLmVxKDApLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICAgIHRoaXMuJHNsaWRlcy5hZGRDbGFzcygnbm8tbW90aW9udWknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9pbWFnZUxvYWRlcl9fW1wiYVwiIC8qIG9uSW1hZ2VzTG9hZGVkICovXSkoJGltYWdlcywgdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJlcGFyZUZvck9yYml0KCk7IC8vaGVoZVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgdGhpcy5fbG9hZEJ1bGxldHMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkgJiYgdGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5nZW9TeW5jKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICAvLyBhbGxvdyB3cmFwcGVyIHRvIGJlIGZvY3VzYWJsZSB0byBlbmFibGUgYXJyb3cgbmF2aWdhdGlvblxuICAgICAgICB0aGlzLiR3cmFwcGVyLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDcmVhdGVzIGEgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgYnVsbGV0cywgaWYgdGhleSBhcmUgYmVpbmcgdXNlZC5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfbG9hZEJ1bGxldHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZEJ1bGxldHMoKSB7XG4gICAgICB0aGlzLiRidWxsZXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHMpLmZpbmQoJ2J1dHRvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0cyBhIGB0aW1lcmAgb2JqZWN0IG9uIHRoZSBvcmJpdCwgYW5kIHN0YXJ0cyB0aGUgY291bnRlciBmb3IgdGhlIG5leHQgc2xpZGUuXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZW9TeW5jJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VvU3luYygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnRpbWVyID0gbmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX3RpbWVyX19bXCJhXCIgLyogVGltZXIgKi9dKHRoaXMuJGVsZW1lbnQsIHtcbiAgICAgICAgZHVyYXRpb246IHRoaXMub3B0aW9ucy50aW1lckRlbGF5LFxuICAgICAgICBpbmZpbml0ZTogZmFsc2VcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudGltZXIuc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNldHMgd3JhcHBlciBhbmQgc2xpZGUgaGVpZ2h0cyBmb3IgdGhlIG9yYml0LlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19wcmVwYXJlRm9yT3JiaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlcGFyZUZvck9yYml0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuX3NldFdyYXBwZXJIZWlnaHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENhbHVsYXRlcyB0aGUgaGVpZ2h0IG9mIGVhY2ggc2xpZGUgaW4gdGhlIGNvbGxlY3Rpb24sIGFuZCB1c2VzIHRoZSB0YWxsZXN0IG9uZSBmb3IgdGhlIHdyYXBwZXIgaGVpZ2h0LlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgd2hlbiBjb21wbGV0ZS5cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0V3JhcHBlckhlaWdodCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRXcmFwcGVySGVpZ2h0KGNiKSB7XG4gICAgICAvL3Jld3JpdGUgdGhpcyB0byBgZm9yYCBsb29wXG4gICAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgICB0ZW1wLFxuICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB0ZW1wID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuYXR0cignZGF0YS1zbGlkZScsIGNvdW50ZXIpO1xuXG4gICAgICAgIGlmICghL211aS9nLnRlc3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKVswXS5jbGFzc05hbWUpICYmIF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJylbMF0gIT09IF90aGlzLiRzbGlkZXMuZXEoY291bnRlcilbMF0pIHtcbiAgICAgICAgICAvL2lmIG5vdCB0aGUgYWN0aXZlIHNsaWRlLCBzZXQgY3NzIHBvc2l0aW9uIGFuZCBkaXNwbGF5IHByb3BlcnR5XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5jc3MoeyAncG9zaXRpb24nOiAncmVsYXRpdmUnLCAnZGlzcGxheSc6ICdub25lJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgICAgY291bnRlcisrO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb3VudGVyID09PSB0aGlzLiRzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsgJ2hlaWdodCc6IG1heCB9KTsgLy9vbmx5IGNoYW5nZSB0aGUgd3JhcHBlciBoZWlnaHQgcHJvcGVydHkgb25jZS5cbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgY2IobWF4KTtcbiAgICAgICAgfSAvL2ZpcmUgY2FsbGJhY2sgd2l0aCBtYXggaGVpZ2h0IGRpbWVuc2lvbi5cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNldHMgdGhlIG1heC1oZWlnaHQgb2YgZWFjaCBzbGlkZS5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0U2xpZGVIZWlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U2xpZGVIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY3NzKCdtYXgtaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgIC8vKipOb3cgdXNpbmcgY3VzdG9tIGV2ZW50IC0gdGhhbmtzIHRvOioqXG4gICAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgIC8vXG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnJlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcylcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zd2lwZSkge1xuICAgICAgICAgIHRoaXMuJHNsaWRlcy5vZmYoJ3N3aXBlbGVmdC56Zi5vcmJpdCBzd2lwZXJpZ2h0LnpmLm9yYml0Jykub24oJ3N3aXBlbGVmdC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgICB9KS5vbignc3dpcGVyaWdodC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5KSB7XG4gICAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicsIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVyW190aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gJ3BhdXNlJyA6ICdzdGFydCddKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2VlbnRlci56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIucGF1c2UoKTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLm9yYml0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYXZCdXR0b25zKSB7XG4gICAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubmV4dENsYXNzICsgJywgLicgKyB0aGlzLm9wdGlvbnMucHJldkNsYXNzKTtcbiAgICAgICAgICAkY29udHJvbHMuYXR0cigndGFiaW5kZXgnLCAwKVxuICAgICAgICAgIC8vYWxzbyBuZWVkIHRvIGhhbmRsZSBlbnRlci9yZXR1cm4gYW5kIHNwYWNlYmFyIGtleSBwcmVzc2VzXG4gICAgICAgICAgLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmhhc0NsYXNzKF90aGlzLm9wdGlvbnMubmV4dENsYXNzKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgICB0aGlzLiRidWxsZXRzLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgvaXMtYWN0aXZlL2cudGVzdCh0aGlzLmNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSAvL2lmIHRoaXMgaXMgYWN0aXZlLCBraWNrIG91dCBvZiBmdW5jdGlvbi5cbiAgICAgICAgICAgIHZhciBpZHggPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3NsaWRlJyksXG4gICAgICAgICAgICAgICAgbHRyID0gaWR4ID4gX3RoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgICAgICAgICRzbGlkZSA9IF90aGlzLiRzbGlkZXMuZXEoaWR4KTtcblxuICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUobHRyLCAkc2xpZGUsIGlkeCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFjY2Vzc2libGUpIHtcbiAgICAgICAgICB0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbigna2V5ZG93bi56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5oYW5kbGVLZXkoZSwgJ09yYml0Jywge1xuICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgYnVsbGV0IGlzIGZvY3VzZWQsIG1ha2Ugc3VyZSBmb2N1cyBtb3Zlc1xuICAgICAgICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUudGFyZ2V0KS5pcyhfdGhpcy4kYnVsbGV0cykpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLiRidWxsZXRzLmZpbHRlcignLmlzLWFjdGl2ZScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBPcmJpdCBzbyBpdCBjYW4gYmUgcmVpbml0aWFsaXplZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXQoKSB7XG4gICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGVyZSBhcmUgbm8gc2xpZGVzIChmaXJzdCBydW4pXG4gICAgICBpZiAodHlwZW9mIHRoaXMuJHNsaWRlcyA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBSZW1vdmUgb2xkIGV2ZW50c1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLm9yYml0JykuZmluZCgnKicpLm9mZignLnpmLm9yYml0Jyk7XG5cbiAgICAgICAgLy8gUmVzdGFydCB0aW1lciBpZiBhdXRvUGxheSBpcyBlbmFibGVkXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IGFsbCBzbGlkZGVzXG4gICAgICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWwpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtYWN0aXZlIGlzLWluJykucmVtb3ZlQXR0cignYXJpYS1saXZlJykuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTaG93IHRoZSBmaXJzdCBzbGlkZVxuICAgICAgICB0aGlzLiRzbGlkZXMuZmlyc3QoKS5hZGRDbGFzcygnaXMtYWN0aXZlJykuc2hvdygpO1xuXG4gICAgICAgIC8vIFRyaWdnZXJzIHdoZW4gdGhlIHNsaWRlIGhhcyBmaW5pc2hlZCBhbmltYXRpbmdcbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFt0aGlzLiRzbGlkZXMuZmlyc3QoKV0pO1xuXG4gICAgICAgIC8vIFNlbGVjdCBmaXJzdCBidWxsZXQgaWYgYnVsbGV0cyBhcmUgcHJlc2VudFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVCdWxsZXRzKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IHNsaWRlIHRvIGEgbmV3IG9uZS5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHBhcmFtIHtCb29sZWFufSBpc0xUUiAtIGZsYWcgaWYgdGhlIHNsaWRlIHNob3VsZCBtb3ZlIGxlZnQgdG8gcmlnaHQuXG4gICAgKiBAcGFyYW0ge2pRdWVyeX0gY2hvc2VuU2xpZGUgLSB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIHNsaWRlIHRvIHNob3cgbmV4dCwgaWYgb25lIGlzIHNlbGVjdGVkLlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAgICogQGZpcmVzIE9yYml0I3NsaWRlY2hhbmdlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2hhbmdlU2xpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgICAgaWYgKCF0aGlzLiRzbGlkZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEb24ndCBmcmVhayBvdXQgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBjbGVhbnVwXG4gICAgICB2YXIgJGN1clNsaWRlID0gdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpLmVxKDApO1xuXG4gICAgICBpZiAoL211aS9nLnRlc3QoJGN1clNsaWRlWzBdLmNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSAvL2lmIHRoZSBzbGlkZSBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLCBraWNrIG91dCBvZiB0aGUgZnVuY3Rpb25cblxuICAgICAgdmFyICRmaXJzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmZpcnN0KCksXG4gICAgICAgICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgICAgICAgZGlySW4gPSBpc0xUUiA/ICdSaWdodCcgOiAnTGVmdCcsXG4gICAgICAgICAgZGlyT3V0ID0gaXNMVFIgPyAnTGVmdCcgOiAnUmlnaHQnLFxuICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAkbmV3U2xpZGU7XG5cbiAgICAgIGlmICghY2hvc2VuU2xpZGUpIHtcbiAgICAgICAgLy9tb3N0IG9mIHRoZSB0aW1lLCB0aGlzIHdpbGwgYmUgYXV0byBwbGF5ZWQgb3IgY2xpY2tlZCBmcm9tIHRoZSBuYXZCdXR0b25zLlxuICAgICAgICAkbmV3U2xpZGUgPSBpc0xUUiA/IC8vaWYgd3JhcHBpbmcgZW5hYmxlZCwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGEgYG5leHRgIG9yIGBwcmV2YCBzaWJsaW5nLCBpZiBub3QsIHNlbGVjdCB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZSB0byBmaWxsIGluLiBpZiB3cmFwcGluZyBub3QgZW5hYmxlZCwgYXR0ZW1wdCB0byBzZWxlY3QgYG5leHRgIG9yIGBwcmV2YCwgaWYgdGhlcmUncyBub3RoaW5nIHRoZXJlLCB0aGUgZnVuY3Rpb24gd2lsbCBraWNrIG91dCBvbiBuZXh0IHN0ZXAuIENSQVpZIE5FU1RFRCBURVJOQVJJRVMhISEhIVxuICAgICAgICB0aGlzLm9wdGlvbnMuaW5maW5pdGVXcmFwID8gJGN1clNsaWRlLm5leHQoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpLmxlbmd0aCA/ICRjdXJTbGlkZS5uZXh0KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKSA6ICRmaXJzdFNsaWRlIDogJGN1clNsaWRlLm5leHQoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpIDogLy9waWNrIG5leHQgc2xpZGUgaWYgbW92aW5nIGxlZnQgdG8gcmlnaHRcbiAgICAgICAgdGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5wcmV2KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKS5sZW5ndGggPyAkY3VyU2xpZGUucHJldignLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcykgOiAkbGFzdFNsaWRlIDogJGN1clNsaWRlLnByZXYoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpOyAvL3BpY2sgcHJldiBzbGlkZSBpZiBtb3ZpbmcgcmlnaHQgdG8gbGVmdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG5ld1NsaWRlID0gY2hvc2VuU2xpZGU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkbmV3U2xpZGUubGVuZ3RoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFRyaWdnZXJzIGJlZm9yZSB0aGUgbmV4dCBzbGlkZSBzdGFydHMgYW5pbWF0aW5nIGluIGFuZCBvbmx5IGlmIGEgbmV4dCBzbGlkZSBoYXMgYmVlbiBmb3VuZC5cbiAgICAgICAgKiBAZXZlbnQgT3JiaXQjYmVmb3Jlc2xpZGVjaGFuZ2VcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdiZWZvcmVzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskY3VyU2xpZGUsICRuZXdTbGlkZV0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICAgIGlkeCA9IGlkeCB8fCB0aGlzLiRzbGlkZXMuaW5kZXgoJG5ld1NsaWRlKTsgLy9ncmFiIGluZGV4IHRvIHVwZGF0ZSBidWxsZXRzXG4gICAgICAgICAgdGhpcy5fdXBkYXRlQnVsbGV0cyhpZHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VNVUkgJiYgIXRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiYVwiIC8qIE1vdGlvbiAqL10uYW5pbWF0ZUluKCRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ3RvcCc6IDAgfSksIHRoaXMub3B0aW9uc1snYW5pbUluRnJvbScgKyBkaXJJbl0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRuZXdTbGlkZS5jc3MoeyAncG9zaXRpb24nOiAncmVsYXRpdmUnLCAnZGlzcGxheSc6ICdibG9jaycgfSkuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXS5hbmltYXRlT3V0KCRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksIHRoaXMub3B0aW9uc1snYW5pbU91dFRvJyArIGRpck91dF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICFfdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWluJykucmVtb3ZlQXR0cignYXJpYS1saXZlJykuaGlkZSgpO1xuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICF0aGlzLnRpbWVyLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgc2xpZGUgaGFzIGZpbmlzaGVkIGFuaW1hdGluZyBpbi5cbiAgICAgICAgKiBAZXZlbnQgT3JiaXQjc2xpZGVjaGFuZ2VcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskbmV3U2xpZGVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFVwZGF0ZXMgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYnVsbGV0cywgaWYgZGlzcGxheWVkLlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBzbGlkZS5cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlQnVsbGV0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVCdWxsZXRzKGlkeCkge1xuICAgICAgdmFyICRvbGRCdWxsZXQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmJveE9mQnVsbGV0cykuZmluZCgnLmlzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5ibHVyKCksXG4gICAgICAgICAgc3BhbiA9ICRvbGRCdWxsZXQuZmluZCgnc3BhbjpsYXN0JykuZGV0YWNoKCksXG4gICAgICAgICAgJG5ld0J1bGxldCA9IHRoaXMuJGJ1bGxldHMuZXEoaWR4KS5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXBwZW5kKHNwYW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRGVzdHJveXMgdGhlIGNhcm91c2VsIGFuZCBoaWRlcyB0aGUgZWxlbWVudC5cbiAgICAqIEBmdW5jdGlvblxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLm9yYml0JykuZmluZCgnKicpLm9mZignLnpmLm9yYml0JykuZW5kKCkuaGlkZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPcmJpdDtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiYVwiIC8qIFBsdWdpbiAqL10pO1xuXG5PcmJpdC5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICogVGVsbHMgdGhlIEpTIHRvIGxvb2sgZm9yIGFuZCBsb2FkQnVsbGV0cy5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgYnVsbGV0czogdHJ1ZSxcbiAgLyoqXG4gICogVGVsbHMgdGhlIEpTIHRvIGFwcGx5IGV2ZW50IGxpc3RlbmVycyB0byBuYXYgYnV0dG9uc1xuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBuYXZCdXR0b25zOiB0cnVlLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdzbGlkZS1pbi1yaWdodCdcbiAgKi9cbiAgYW5pbUluRnJvbVJpZ2h0OiAnc2xpZGUtaW4tcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdzbGlkZS1vdXQtcmlnaHQnXG4gICovXG4gIGFuaW1PdXRUb1JpZ2h0OiAnc2xpZGUtb3V0LXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnc2xpZGUtaW4tbGVmdCdcbiAgKlxuICAqL1xuICBhbmltSW5Gcm9tTGVmdDogJ3NsaWRlLWluLWxlZnQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdzbGlkZS1vdXQtbGVmdCdcbiAgKi9cbiAgYW5pbU91dFRvTGVmdDogJ3NsaWRlLW91dC1sZWZ0JyxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGF1dG9tYXRpY2FsbHkgYW5pbWF0ZSBvbiBwYWdlIGxvYWQuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIGF1dG9QbGF5OiB0cnVlLFxuICAvKipcbiAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIGJldHdlZW4gc2xpZGUgdHJhbnNpdGlvbnNcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICogQGRlZmF1bHQgNTAwMFxuICAqL1xuICB0aW1lckRlbGF5OiA1MDAwLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gaW5maW5pdGVseSBsb29wIHRocm91Z2ggdGhlIHNsaWRlc1xuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBpbmZpbml0ZVdyYXA6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyB0aGUgT3JiaXQgc2xpZGVzIHRvIGJpbmQgdG8gc3dpcGUgZXZlbnRzIGZvciBtb2JpbGUsIHJlcXVpcmVzIGFuIGFkZGl0aW9uYWwgdXRpbCBsaWJyYXJ5XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIHN3aXBlOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIHRpbWluZyBmdW5jdGlvbiB0byBwYXVzZSBhbmltYXRpb24gb24gaG92ZXIuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGJpbmQga2V5Ym9hcmQgZXZlbnRzIHRvIHRoZSBzbGlkZXIsIHRvIGFuaW1hdGUgZnJhbWVzIHdpdGggYXJyb3cga2V5c1xuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBhY2Nlc3NpYmxlOiB0cnVlLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgb2YgT3JiaXRcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ29yYml0LWNvbnRhaW5lcidcbiAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdvcmJpdC1jb250YWluZXInLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIGluZGl2aWR1YWwgc2xpZGVzLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnb3JiaXQtc2xpZGUnXG4gICovXG4gIHNsaWRlQ2xhc3M6ICdvcmJpdC1zbGlkZScsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGJ1bGxldCBjb250YWluZXIuIFlvdSdyZSB3ZWxjb21lLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnb3JiaXQtYnVsbGV0cydcbiAgKi9cbiAgYm94T2ZCdWxsZXRzOiAnb3JiaXQtYnVsbGV0cycsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGBuZXh0YCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ29yYml0LW5leHQnXG4gICovXG4gIG5leHRDbGFzczogJ29yYml0LW5leHQnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgcHJldmlvdXNgIG5hdmlnYXRpb24gYnV0dG9uLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnb3JiaXQtcHJldmlvdXMnXG4gICovXG4gIHByZXZDbGFzczogJ29yYml0LXByZXZpb3VzJyxcbiAgLyoqXG4gICogQm9vbGVhbiB0byBmbGFnIHRoZSBqcyB0byB1c2UgbW90aW9uIHVpIGNsYXNzZXMgb3Igbm90LiBEZWZhdWx0IHRvIHRydWUgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICB1c2VNVUk6IHRydWVcbn07XG5cblxuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSZXNwb25zaXZlQWNjb3JkaW9uVGFiczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9hY2NvcmRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl90YWJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuXG4vLyBUaGUgcGx1Z2luIG1hdGNoZXMgdGhlIHBsdWdpbiBjbGFzc2VzIHdpdGggdGhlc2UgcGx1Z2luIGluc3RhbmNlcy5cbnZhciBNZW51UGx1Z2lucyA9IHtcbiAgdGFiczoge1xuICAgIGNzc0NsYXNzOiAndGFicycsXG4gICAgcGx1Z2luOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdGFic19fW1wiYVwiIC8qIFRhYnMgKi9dXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uJyxcbiAgICBwbHVnaW46IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9hY2NvcmRpb25fX1tcImFcIiAvKiBBY2NvcmRpb24gKi9dXG4gIH1cbn07XG5cbi8qKlxuICogUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi50YWJzXG4gKi9cblxudmFyIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBSZXNwb25zaXZlQWNjb3JkaW9uVGFicygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXNwb25zaXZlQWNjb3JkaW9uVGFicy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIGFjY29yZGlvbiB0YWJzLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzXG4gICAgICogQGZpcmVzIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIFJlc3BvbnNpdmUgQWNjb3JkaW9uIFRhYnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWxlbWVudCk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5ydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS1hY2NvcmRpb24tdGFicycpO1xuICAgICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzJzsgLy8gaWU5IGJhY2sgY29tcGF0XG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQuYXR0cignaWQnKSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJywgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdyZXNwb25zaXZlYWNjb3JkaW9udGFicycpKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtcmVzcG9uc2l2ZS1hY2NvcmRpb24tdGFicycgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uX2luaXQoKTtcblxuICAgICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgcnVsZXNUcmVlID0ge307XG5cbiAgICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IHJ1bGUgZm91bmRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgICB2YXIgcnVsZVNpemUgPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzBdIDogJ3NtYWxsJztcbiAgICAgICAgICB2YXIgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgICBydWxlc1RyZWVbcnVsZVNpemVdID0gTWVudVBsdWdpbnNbcnVsZVBsdWdpbl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzVHJlZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZ2V0QWxsT3B0aW9ucygpO1xuXG4gICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuaXNFbXB0eU9iamVjdCh0aGlzLnJ1bGVzKSkge1xuICAgICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXRBbGxPcHRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEFsbE9wdGlvbnMoKSB7XG4gICAgICAvL2dldCBhbGwgZGVmYXVsdHMgYW5kIG9wdGlvbnNcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBfdGhpcy5hbGxPcHRpb25zID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gTWVudVBsdWdpbnMpIHtcbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YXIgb2JqID0gTWVudVBsdWdpbnNba2V5XTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGR1bW15UGx1Z2luID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnPHVsPjwvdWw+Jyk7XG4gICAgICAgICAgICB2YXIgdG1wUGx1Z2luID0gbmV3IG9iai5wbHVnaW4oZHVtbXlQbHVnaW4sIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5S2V5IGluIHRtcFBsdWdpbi5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmICh0bXBQbHVnaW4ub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXlLZXkpICYmIGtleUtleSAhPT0gJ3pmUGx1Z2luJykge1xuICAgICAgICAgICAgICAgIHZhciBvYmpPYmogPSB0bXBQbHVnaW4ub3B0aW9uc1trZXlLZXldO1xuICAgICAgICAgICAgICAgIF90aGlzLmFsbE9wdGlvbnNba2V5S2V5XSA9IG9iak9iajtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG1wUGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgTWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGggYWdhaW5zdCBhdmFpbGFibGUgbWVkaWEgcXVlcmllcy4gSWYgdGhlIG1lZGlhIHF1ZXJ5IGhhcyBjaGFuZ2VkLCBhbmQgdGhlIHBsdWdpbiBuZWVkZWQgaGFzIGNoYW5nZWQsIHRoZSBwbHVnaW5zIHdpbGwgc3dhcCBvdXQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NoZWNrTWVkaWFRdWVyaWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrTWVkaWFRdWVyaWVzKCkge1xuICAgICAgdmFyIG1hdGNoZWRNcSxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlIGFuZCBmaW5kIHRoZSBsYXN0IG1hdGNoaW5nIHJ1bGVcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZWFjaCh0aGlzLnJ1bGVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uYXRMZWFzdChrZXkpKSB7XG4gICAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICAgIGlmICghbWF0Y2hlZE1xKSByZXR1cm47XG5cbiAgICAgIC8vIFBsdWdpbiBhbHJlYWR5IGluaXRpYWxpemVkPyBXZSBnb29kXG4gICAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcGx1Z2luLXNwZWNpZmljIENTUyBjbGFzc2VzXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmVhY2goTWVudVBsdWdpbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHZhbHVlLmNzc0NsYXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBZGQgdGhlIENTUyBjbGFzcyBmb3IgdGhlIG5ldyBwbHVnaW5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcblxuICAgICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luKSB7XG4gICAgICAgIC8vZG9uJ3Qga25vdyB3aHkgYnV0IG9uIG5lc3RlZCBlbGVtZW50cyBkYXRhIHpmUGx1Z2luIGdldCdzIGxvc3RcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSAmJiB0aGlzLnN0b3JlemZEYXRhKSB0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCB0aGlzLnN0b3JlemZEYXRhKTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhbmRsZU1hcmt1cCh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuICAgICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbmV3IHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4odGhpcy4kZWxlbWVudCwge30pO1xuICAgICAgdGhpcy5zdG9yZXpmRGF0YSA9IHRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19oYW5kbGVNYXJrdXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlTWFya3VwKHRvU2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGZyb21TdHJpbmcgPSAnYWNjb3JkaW9uJztcbiAgICAgIHZhciAkcGFuZWxzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtdGFicy1jb250ZW50PScgKyB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykgKyAnXScpO1xuICAgICAgaWYgKCRwYW5lbHMubGVuZ3RoKSBmcm9tU3RyaW5nID0gJ3RhYnMnO1xuICAgICAgaWYgKGZyb21TdHJpbmcgPT09IHRvU2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG5cbiAgICAgIHZhciB0YWJzVGl0bGUgPSBfdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzcyA/IF90aGlzLmFsbE9wdGlvbnMubGlua0NsYXNzIDogJ3RhYnMtdGl0bGUnO1xuICAgICAgdmFyIHRhYnNQYW5lbCA9IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcyA/IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcyA6ICd0YWJzLXBhbmVsJztcblxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdyb2xlJyk7XG4gICAgICB2YXIgJGxpSGVhZHMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuJyArIHRhYnNUaXRsZSArICcsW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJykucmVtb3ZlQ2xhc3ModGFic1RpdGxlKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5yZW1vdmVBdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJyk7XG4gICAgICB2YXIgJGxpSGVhZHNBID0gJGxpSGVhZHMuY2hpbGRyZW4oJ2EnKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLXRpdGxlJyk7XG5cbiAgICAgIGlmIChmcm9tU3RyaW5nID09PSAndGFicycpIHtcbiAgICAgICAgJHBhbmVscyA9ICRwYW5lbHMuY2hpbGRyZW4oJy4nICsgdGFic1BhbmVsKS5yZW1vdmVDbGFzcyh0YWJzUGFuZWwpLnJlbW92ZUF0dHIoJ3JvbGUnKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtbGFiZWxsZWRieScpO1xuICAgICAgICAkcGFuZWxzLmNoaWxkcmVuKCdhJykucmVtb3ZlQXR0cigncm9sZScpLnJlbW92ZUF0dHIoJ2FyaWEtY29udHJvbHMnKS5yZW1vdmVBdHRyKCdhcmlhLXNlbGVjdGVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcGFuZWxzID0gJGxpSGVhZHMuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpLnJlbW92ZUNsYXNzKCdhY2NvcmRpb24tY29udGVudCcpO1xuICAgICAgfTtcblxuICAgICAgJHBhbmVscy5jc3MoeyBkaXNwbGF5OiAnJywgdmlzaWJpbGl0eTogJycgfSk7XG4gICAgICAkbGlIZWFkcy5jc3MoeyBkaXNwbGF5OiAnJywgdmlzaWJpbGl0eTogJycgfSk7XG4gICAgICBpZiAodG9TZXQgPT09ICdhY2NvcmRpb24nKSB7XG4gICAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodmFsdWUpLmFwcGVuZFRvKCRsaUhlYWRzLmdldChrZXkpKS5hZGRDbGFzcygnYWNjb3JkaW9uLWNvbnRlbnQnKS5hdHRyKCdkYXRhLXRhYi1jb250ZW50JywgJycpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5jc3MoeyBoZWlnaHQ6ICcnIH0pO1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXRhYnMtY29udGVudD0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSArICddJykuYWZ0ZXIoJzxkaXYgaWQ9XCJ0YWJzLXBsYWNlaG9sZGVyLScgKyBfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpICsgJ1wiPjwvZGl2PicpLmRldGFjaCgpO1xuICAgICAgICAgICRsaUhlYWRzLmFkZENsYXNzKCdhY2NvcmRpb24taXRlbScpLmF0dHIoJ2RhdGEtYWNjb3JkaW9uLWl0ZW0nLCAnJyk7XG4gICAgICAgICAgJGxpSGVhZHNBLmFkZENsYXNzKCdhY2NvcmRpb24tdGl0bGUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRvU2V0ID09PSAndGFicycpIHtcbiAgICAgICAgdmFyICR0YWJzQ29udGVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXRhYnMtY29udGVudD0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSArICddJyk7XG4gICAgICAgIHZhciAkcGxhY2Vob2xkZXIgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjdGFicy1wbGFjZWhvbGRlci0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICAgIGlmICgkcGxhY2Vob2xkZXIubGVuZ3RoKSB7XG4gICAgICAgICAgJHRhYnNDb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnPGRpdiBjbGFzcz1cInRhYnMtY29udGVudFwiPjwvZGl2PicpLmluc2VydEFmdGVyKCRwbGFjZWhvbGRlcikuYXR0cignZGF0YS10YWJzLWNvbnRlbnQnLCBfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgICAgICAkcGxhY2Vob2xkZXIucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHRhYnNDb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnPGRpdiBjbGFzcz1cInRhYnMtY29udGVudFwiPjwvZGl2PicpLmluc2VydEFmdGVyKF90aGlzLiRlbGVtZW50KS5hdHRyKCdkYXRhLXRhYnMtY29udGVudCcsIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgICB9O1xuICAgICAgICAkcGFuZWxzLmVhY2goZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICB2YXIgdGVtcFZhbHVlID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh2YWx1ZSkuYXBwZW5kVG8oJHRhYnNDb250ZW50KS5hZGRDbGFzcyh0YWJzUGFuZWwpO1xuICAgICAgICAgIHZhciBoYXNoID0gJGxpSGVhZHNBLmdldChrZXkpLmhhc2guc2xpY2UoMSk7XG4gICAgICAgICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh2YWx1ZSkuYXR0cignaWQnKSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ2FjY29yZGlvbicpO1xuICAgICAgICAgIGlmIChoYXNoICE9PSBpZCkge1xuICAgICAgICAgICAgaWYgKGhhc2ggIT09ICcnKSB7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodmFsdWUpLmF0dHIoJ2lkJywgaGFzaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoYXNoID0gaWQ7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodmFsdWUpLmF0dHIoJ2lkJywgaGFzaCk7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJGxpSGVhZHNBLmdldChrZXkpKS5hdHRyKCdocmVmJywgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgkbGlIZWFkc0EuZ2V0KGtleSkpLmF0dHIoJ2hyZWYnKS5yZXBsYWNlKCcjJywgJycpICsgJyMnICsgaGFzaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGlzQWN0aXZlID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgkbGlIZWFkcy5nZXQoa2V5KSkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGVtcFZhbHVlLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgJGxpSGVhZHMuYWRkQ2xhc3ModGFic1RpdGxlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCcuemYuUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZUFjY29yZGlvblRhYnM7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMuZGVmYXVsdHMgPSB7fTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJlc3BvbnNpdmVNZW51OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX2FjY29yZGlvbk1lbnVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgTWVudVBsdWdpbnMgPSB7XG4gIGRyb3Bkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcm9wZG93bicsXG4gICAgcGx1Z2luOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fZHJvcGRvd25NZW51X19bXCJhXCIgLyogRHJvcGRvd25NZW51ICovXVxuICB9LFxuICBkcmlsbGRvd246IHtcbiAgICBjc3NDbGFzczogJ2RyaWxsZG93bicsXG4gICAgcGx1Z2luOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fZHJpbGxkb3duX19bXCJhXCIgLyogRHJpbGxkb3duICovXVxuICB9LFxuICBhY2NvcmRpb246IHtcbiAgICBjc3NDbGFzczogJ2FjY29yZGlvbi1tZW51JyxcbiAgICBwbHVnaW46IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X19bXCJhXCIgLyogQWNjb3JkaW9uTWVudSAqL11cbiAgfVxufTtcblxuLy8gaW1wb3J0IFwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzXCI7XG5cblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbnZhciBSZXNwb25zaXZlTWVudSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhSZXNwb25zaXZlTWVudSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZU1lbnUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNpdmVNZW51KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVzcG9uc2l2ZU1lbnUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zaXZlTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3BvbnNpdmVNZW51LCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcmVzcG9uc2l2ZSBtZW51LlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJlc3BvbnNpdmVNZW51XG4gICAgICogQGZpcmVzIFJlc3BvbnNpdmVNZW51I2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtZW50KTtcbiAgICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtbWVudScpO1xuICAgICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Jlc3BvbnNpdmVNZW51JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uX2luaXQoKTtcbiAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGFuIEludGVyY2hhbmdlIHBsdWdpbiBpcyBpbml0aWFsaXplZCwgdGhpcy5ydWxlcyBpcyBjb252ZXJ0ZWQgZnJvbSBhIHN0cmluZyBvZiBcImNsYXNzZXNcIiB0byBhbiBvYmplY3Qgb2YgcnVsZXNcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAgIC8vIFBhcnNlIHJ1bGVzIGZyb20gXCJjbGFzc2VzXCIgcHVsbGVkIGZyb20gZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgICAgdmFyIHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgICAgdmFyIHJ1bGVQbHVnaW4gPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzFdIDogcnVsZVswXTtcblxuICAgICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZGF0YS1tdXRhdGUgc2luY2UgY2hpbGRyZW4gbWF5IG5lZWQgaXQuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScpIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCAncmVzcG9uc2l2ZS1tZW51JykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgICB9KTtcbiAgICAgIC8vICQod2luZG93KS5vbigncmVzaXplLnpmLlJlc3BvbnNpdmVNZW51JywgZnVuY3Rpb24oKSB7XG4gICAgICAvLyAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aCBhZ2FpbnN0IGF2YWlsYWJsZSBtZWRpYSBxdWVyaWVzLiBJZiB0aGUgbWVkaWEgcXVlcnkgaGFzIGNoYW5nZWQsIGFuZCB0aGUgcGx1Z2luIG5lZWRlZCBoYXMgY2hhbmdlZCwgdGhlIHBsdWdpbnMgd2lsbCBzd2FwIG91dC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2hlY2tNZWRpYVF1ZXJpZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tNZWRpYVF1ZXJpZXMoKSB7XG4gICAgICB2YXIgbWF0Y2hlZE1xLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUgYW5kIGZpbmQgdGhlIGxhc3QgbWF0Y2hpbmcgcnVsZVxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgICBtYXRjaGVkTXEgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBObyBtYXRjaD8gTm8gZGljZVxuICAgICAgaWYgKCFtYXRjaGVkTXEpIHJldHVybjtcblxuICAgICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4gaW5zdGFuY2VvZiB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKSByZXR1cm47XG5cbiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBwbHVnaW4tc3BlY2lmaWMgQ1NTIGNsYXNzZXNcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgbmV3IHBsdWdpblxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgICAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5ldyBwbHVnaW5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCcuemYuUmVzcG9uc2l2ZU1lbnUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZU1lbnU7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuUmVzcG9uc2l2ZU1lbnUuZGVmYXVsdHMgPSB7fTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJlc3BvbnNpdmVUb2dnbGU7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxudmFyIFJlc3BvbnNpdmVUb2dnbGUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoUmVzcG9uc2l2ZVRvZ2dsZSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZVRvZ2dsZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzcG9uc2l2ZVRvZ2dsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlc3BvbnNpdmVUb2dnbGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zaXZlVG9nZ2xlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzcG9uc2l2ZVRvZ2dsZSwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBUYWIgQmFyLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJlc3BvbnNpdmVUb2dnbGVcbiAgICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWxlbWVudCk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmVzcG9uc2l2ZVRvZ2dsZSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdGFiIGJhciBieSBmaW5kaW5nIHRoZSB0YXJnZXQgZWxlbWVudCwgdG9nZ2xpbmcgZWxlbWVudCwgYW5kIHJ1bm5pbmcgdXBkYXRlKCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuICAgICAgdmFyIHRhcmdldElEID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLXRvZ2dsZScpO1xuICAgICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdZb3VyIHRhYiBiYXIgbmVlZHMgYW4gSUQgb2YgYSBNZW51IGFzIHRoZSB2YWx1ZSBvZiBkYXRhLXRhYi1iYXIuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJHRhcmdldE1lbnUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIHRhcmdldElEKTtcbiAgICAgIHRoaXMuJHRvZ2dsZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXRvZ2dsZV0nKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldCA9PT0gdGFyZ2V0SUQgfHwgdGFyZ2V0ID09PSBcIlwiO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLiR0YXJnZXRNZW51LmRhdGEoKSk7XG5cbiAgICAgIC8vIElmIHRoZXkgd2VyZSBzZXQsIHBhcnNlIHRoZSBhbmltYXRpb24gY2xhc3Nlc1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fdXBkYXRlTXFIYW5kbGVyID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcblxuICAgICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcbiAgICAgIC8vIE1vYmlsZVxuICAgICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5zaG93KCk7XG4gICAgICAgIHRoaXMuJHRhcmdldE1lbnUuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXNrdG9wXG4gICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKTtcbiAgICAgICAgICB0aGlzLiR0YXJnZXRNZW51LnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIuIFRoZSB0b2dnbGUgb25seSBoYXBwZW5zIGlmIHRoZSBzY3JlZW4gaXMgc21hbGwgZW5vdWdoIHRvIGFsbG93IGl0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI3RvZ2dsZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlTWVudScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZU1lbnUoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIgdG9nZ2xlcy5cbiAgICAgICAgICogQGV2ZW50IFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuJHRhcmdldE1lbnUuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXS5hbmltYXRlSW4odGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgICAgICAgIF90aGlzMy4kdGFyZ2V0TWVudS5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcImFcIiAvKiBNb3Rpb24gKi9dLmFuaW1hdGVPdXQodGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25PdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJHRhcmdldE1lbnUudG9nZ2xlKDApO1xuICAgICAgICAgIHRoaXMuJHRhcmdldE1lbnUuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlc3BvbnNpdmVUb2dnbGU7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBicmVha3BvaW50IGFmdGVyIHdoaWNoIHRoZSBtZW51IGlzIGFsd2F5cyBzaG93biwgYW5kIHRoZSB0YWIgYmFyIGlzIGhpZGRlbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgaGlkZUZvcjogJ21lZGl1bScsXG5cbiAgLyoqXG4gICAqIFRvIGRlY2lkZSBpZiB0aGUgdG9nZ2xlIHNob3VsZCBiZSBhbmltYXRlZCBvciBub3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbmltYXRlOiBmYWxzZVxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJldmVhbDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogUmV2ZWFsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXZlYWxcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb24gaWYgdXNpbmcgYW5pbWF0aW9uc1xuICovXG5cbnZhciBSZXZlYWwgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoUmV2ZWFsLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBSZXZlYWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJldmVhbCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJldmVhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJldmVhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJldmVhbCwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXZlYWwuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgUmV2ZWFsXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBmb3IgdGhlIG1vZGFsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIFJldmVhbC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmV2ZWFsJzsgLy8gaWU5IGJhY2sgY29tcGF0XG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIC8vIFRyaWdnZXJzIGluaXQgaXMgaWRlbXBvdGVudCwganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBpbml0aWFsaXplZFxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfX1tcImFcIiAvKiBUcmlnZ2VycyAqL10uaW5pdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hKTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10ucmVnaXN0ZXIoJ1JldmVhbCcsIHtcbiAgICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuICAgICAgdGhpcy5pZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2FjaGVkID0geyBtcTogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiYVwiIC8qIE1lZGlhUXVlcnkgKi9dLmN1cnJlbnQgfTtcbiAgICAgIHRoaXMuaXNNb2JpbGUgPSBtb2JpbGVTbmlmZigpO1xuXG4gICAgICB0aGlzLiRhbmNob3IgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1vcGVuPVwiJyArIHRoaXMuaWQgKyAnXCJdJykubGVuZ3RoID8gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtb3Blbj1cIicgKyB0aGlzLmlkICsgJ1wiXScpIDogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtdG9nZ2xlPVwiJyArIHRoaXMuaWQgKyAnXCJdJyk7XG4gICAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogdGhpcy5pZCxcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAndGFiaW5kZXgnOiAwXG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Z1bGwnKSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vdmVybGF5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgIXRoaXMuJG92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheSA9IHRoaXMuX21ha2VPdmVybGF5KHRoaXMuaWQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAncm9sZSc6ICdkaWFsb2cnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6IHRoaXMuaWQsXG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IHRoaXMuaWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy4kb3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKHRoaXMuJG92ZXJsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMub3B0aW9ucy5hcHBlbmRUbykpO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd3aXRob3V0LW92ZXJsYXknKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluayAmJiB3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gJyMnICsgdGhpcy5pZCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub25lKCdsb2FkLnpmLnJldmVhbCcsIHRoaXMub3Blbi5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfbWFrZU92ZXJsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZU92ZXJsYXkoKSB7XG4gICAgICB2YXIgYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzID0gJyc7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzKSB7XG4gICAgICAgIGFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlcyA9ICcgJyArIHRoaXMub3B0aW9ucy5hZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdyZXZlYWwtb3ZlcmxheScgKyBhZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXMpLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5hcHBlbmRUbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBwb3NpdGlvbiBvZiBtb2RhbFxuICAgICAqIFRPRE86ICBGaWd1cmUgb3V0IGlmIHdlIGFjdHVhbGx5IG5lZWQgdG8gY2FjaGUgdGhlc2UgdmFsdWVzIG9yIGlmIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZVBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIHdpZHRoID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XG4gICAgICB2YXIgb3V0ZXJXaWR0aCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS53aWR0aCgpO1xuICAgICAgdmFyIGhlaWdodCA9IHRoaXMuJGVsZW1lbnQub3V0ZXJIZWlnaHQoKTtcbiAgICAgIHZhciBvdXRlckhlaWdodCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5oZWlnaHQoKTtcbiAgICAgIHZhciBsZWZ0LCB0b3A7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0ID0gcGFyc2VJbnQodGhpcy5vcHRpb25zLmhPZmZzZXQsIDEwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudk9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGlmIChoZWlnaHQgPiBvdXRlckhlaWdodCkge1xuICAgICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3AgPSBwYXJzZUludCgob3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gNCwgMTApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3AgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMudk9mZnNldCwgMTApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyB0b3A6IHRvcCArICdweCcgfSk7XG4gICAgICAvLyBvbmx5IHdvcnJ5IGFib3V0IGxlZnQgaWYgd2UgZG9uJ3QgaGF2ZSBhbiBvdmVybGF5IG9yIHdlIGhhdmVhICBob3Jpem9udGFsIG9mZnNldCxcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSdyZSBwZXJmZWN0bHkgaW4gdGhlIG1pZGRsZVxuICAgICAgaWYgKCF0aGlzLiRvdmVybGF5IHx8IHRoaXMub3B0aW9ucy5oT2Zmc2V0ICE9PSAnYXV0bycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyBsZWZ0OiBsZWZ0ICsgJ3B4JyB9KTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyBtYXJnaW46ICcwcHgnIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBtb2RhbC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IGZ1bmN0aW9uIChldmVudCwgJGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGV2ZW50LnRhcmdldCkucGFyZW50cygnW2RhdGEtY2xvc2FibGVdJylbMF0gPT09ICRlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBvbmx5IGNsb3NlIHJldmVhbCB3aGVuIGl0J3MgZXhwbGljaXRseSBjYWxsZWRcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuY2xvc2UuYXBwbHkoX3RoaXMzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgdGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5yZXZlYWwnKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCAhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5jb250YWlucyhkb2N1bWVudCwgZS50YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ3BvcHN0YXRlLnpmLnJldmVhbDonICsgdGhpcy5pZCwgdGhpcy5faGFuZGxlU3RhdGUuYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBtb2RhbCBtZXRob2RzIG9uIGJhY2svZm9yd2FyZCBidXR0b24gY2xpY2tzIG9yIGFueSBvdGhlciBldmVudCB0aGF0IHRyaWdnZXJzIHBvcHN0YXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19oYW5kbGVTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTdGF0ZShlKSB7XG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcjJyArIHRoaXMuaWQgJiYgIXRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIG1vZGFsIGNvbnRyb2xsZWQgYnkgYHRoaXMuJGFuY2hvcmAsIGFuZCBjbG9zZXMgYWxsIG90aGVycyBieSBkZWZhdWx0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VtZVxuICAgICAqIEBmaXJlcyBSZXZlYWwjb3BlblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAvLyBlaXRoZXIgdXBkYXRlIG9yIHJlcGxhY2UgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHZhciBoYXNoID0gJyMnICsgdGhpcy5pZDtcblxuICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGRhdGVIaXN0b3J5KSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBoYXNoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgaGFzaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcblxuICAgICAgLy8gTWFrZSBlbGVtZW50cyBpbnZpc2libGUsIGJ1dCByZW1vdmUgZGlzcGxheTogbm9uZSBzbyB3ZSBjYW4gZ2V0IHNpemUgYW5kIHBvc2l0aW9uaW5nXG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSkuc2hvdygpLnNjcm9sbFRvcCgwKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSkuc2hvdygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5jc3MoeyAndmlzaWJpbGl0eSc6ICcnIH0pO1xuXG4gICAgICBpZiAodGhpcy4kb3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSkuaGlkZSgpO1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFzdCcpKSB7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnZmFzdCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3Nsb3cnKSkge1xuICAgICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ3Nsb3cnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aXBsZU9wZW5lZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBtb2RhbCBvcGVucy5cbiAgICAgICAgICogQ2xvc2VzIGFueSBvdGhlciBtb2RhbHMgdGhhdCBhcmUgY3VycmVudGx5IG9wZW5cbiAgICAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYucmV2ZWFsJywgdGhpcy5pZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZFJldmVhbE9wZW5DbGFzc2VzKCkge1xuICAgICAgICBpZiAoX3RoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKSB7XG4gICAgICAgICAgICBfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2JvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiByZXZlYWxcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4pIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgYWZ0ZXJBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgICB9KS5mb2N1cygpO1xuICAgICAgICAgICAgYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKTtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLnRyYXBGb2N1cyhfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChfdGhpczQub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcImFcIiAvKiBNb3Rpb24gKi9dLmFuaW1hdGVJbihfdGhpczQuJG92ZXJsYXksICdmYWRlLWluJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiYVwiIC8qIE1vdGlvbiAqL10uYW5pbWF0ZUluKF90aGlzNC4kZWxlbWVudCwgX3RoaXM0Lm9wdGlvbnMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczQuJGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IG9iamVjdCBoYXZpbmcgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICAgIF90aGlzNC5mb2N1c2FibGVFbGVtZW50cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLmZpbmRGb2N1c2FibGUoX3RoaXM0LiRlbGVtZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXJBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH1cbiAgICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuJG92ZXJsYXkuc2hvdygwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5zaG93KHRoaXMub3B0aW9ucy5zaG93RGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGhhbmRsZSBhY2Nlc3NpYmlsaXR5XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgIH0pLmZvY3VzKCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS50cmFwRm9jdXModGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIGFkZFJldmVhbE9wZW5DbGFzc2VzKCk7XG5cbiAgICAgIHRoaXMuX2V4dHJhSGFuZGxlcnMoKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBoYXMgc3VjY2Vzc2Z1bGx5IG9wZW5lZC5cbiAgICAgICAqIEBldmVudCBSZXZlYWwjb3BlblxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBleHRyYSBldmVudCBoYW5kbGVycyBmb3IgdGhlIGJvZHkgYW5kIHdpbmRvdyBpZiBuZWNlc3NhcnkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V4dHJhSGFuZGxlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXh0cmFIYW5kbGVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGNsZWFudXAsIGRvbid0IGZyZWFrIG91dFxuICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJhXCIgLyogS2V5Ym9hcmQgKi9dLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiAhdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4pIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8ICFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiYVwiIC8qIEtleWJvYXJkICovXS5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgbW9kYWwuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIFJldmVhbCNjbG9zZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvLyBNb3Rpb24gVUkgbWV0aG9kIG9mIGhpZGluZ1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXS5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXS5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LmhpZGUodGhpcy5vcHRpb25zLmhpZGVEZWxheSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIENvbmRpdGlvbmFscyB0byByZW1vdmUgZXh0cmEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkIG9uIG9wZW5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLm9mZignY2xpY2suemYucmV2ZWFsJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuXG4gICAgICBmdW5jdGlvbiBmaW5pc2hVcCgpIHtcbiAgICAgICAgaWYgKF90aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJy5yZXZlYWw6dmlzaWJsZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2JvZHknKS5zY3JvbGxUb3AoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpO1xuICAgICAgICAgICAgX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnLnJldmVhbDp2aXNpYmxlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10ucmVsZWFzZUZvY3VzKF90aGlzLiRlbGVtZW50KTtcblxuICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGlzIGRvbmUgY2xvc2luZy5cbiAgICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlZFxuICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYucmV2ZWFsJyk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBSZXNldHMgdGhlIG1vZGFsIGNvbnRlbnRcbiAgICAgICogVGhpcyBwcmV2ZW50cyBhIHJ1bm5pbmcgdmlkZW8gdG8ga2VlcCBnb2luZyBpbiB0aGUgYmFja2dyb3VuZFxuICAgICAgKi9cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzZXRPbkNsb3NlKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuaHRtbCh0aGlzLiRlbGVtZW50Lmh0bWwoKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoJycsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCcjJyArIHRoaXMuaWQsICcnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBvcGVuL2Nsb3NlZCBzdGF0ZSBvZiBhIG1vZGFsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG5cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGEgbW9kYWwuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXBwZW5kVG8oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pKTsgLy8gbW92ZSAkZWxlbWVudCBvdXRzaWRlIG9mICRvdmVybGF5IHRvIHByZXZlbnQgZXJyb3IgdW5yZWdpc3RlclBsdWdpbigpXG4gICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgpLm9mZigpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCkub2ZmKCk7XG4gICAgICB0aGlzLiRhbmNob3Iub2ZmKCcuemYnKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoJy56Zi5yZXZlYWw6JyArIHRoaXMuaWQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXZlYWw7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dKTtcblxuUmV2ZWFsLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5pbWF0aW9uSW46ICcnLFxuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5pbWF0aW9uT3V0OiAnJyxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgb3BlbmluZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc2hvd0RlbGF5OiAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGRlbGF5IHRoZSBjbG9zaW5nIG9mIGEgbW9kYWwgYWZ0ZXIgYSBjbGljayBpZiBubyBhbmltYXRpb24gdXNlZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBoaWRlRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keS9vdmVybGF5IHRvIGNsb3NlIHRoZSBtb2RhbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBjbG9zZSBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBgRVNDQVBFYCBrZXkuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25Fc2M6IHRydWUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBhbGxvd3MgbXVsdGlwbGUgbW9kYWxzIHRvIGJlIGRpc3BsYXllZCBhdCBvbmNlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGVPcGVuZWQ6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGRvd24gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcnxzdHJpbmd9XG4gICAqIEBkZWZhdWx0IGF1dG9cbiAgICovXG4gIHZPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBpbiBmcm9tIHRoZSBzaWRlIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcnxzdHJpbmd9XG4gICAqIEBkZWZhdWx0IGF1dG9cbiAgICovXG4gIGhPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYmUgZnVsbHNjcmVlbiwgY29tcGxldGVseSBibG9ja2luZyBvdXQgdGhlIHJlc3Qgb2YgdGhlIHZpZXcuIEpTIGNoZWNrcyBmb3IgdGhpcyBhcyB3ZWxsLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFNjcmVlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBQZXJjZW50YWdlIG9mIHNjcmVlbiBoZWlnaHQgdGhlIG1vZGFsIHNob3VsZCBwdXNoIHVwIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxMFxuICAgKi9cbiAgYnRtT2Zmc2V0UGN0OiAxMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gZ2VuZXJhdGUgYW4gb3ZlcmxheSBkaXYsIHdoaWNoIHdpbGwgY292ZXIgdGhlIHZpZXcgd2hlbiBtb2RhbCBvcGVucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgb3ZlcmxheTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gcmVtb3ZlIGFuZCByZWluamVjdCBtYXJrdXAgb24gY2xvc2UuIFNob3VsZCBiZSB0cnVlIGlmIHVzaW5nIHZpZGVvIGVsZW1lbnRzIHcvbyB1c2luZyBwcm92aWRlcidzIGFwaSwgb3RoZXJ3aXNlLCB2aWRlb3Mgd2lsbCBjb250aW51ZSB0byBwbGF5IGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVzZXRPbkNsb3NlOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYWx0ZXIgdGhlIHVybCBvbiBvcGVuL2Nsb3NlLCBhbmQgYWxsb3dzIHRoZSB1c2Ugb2YgdGhlIGBiYWNrYCBidXR0b24gdG8gY2xvc2UgbW9kYWxzLiBBTFNPLCBhbGxvd3MgYSBtb2RhbCB0byBhdXRvLW1hbmlhY2FsbHkgb3BlbiBvbiBwYWdlIGxvYWQgSUYgdGhlIGhhc2ggPT09IHRoZSBtb2RhbCdzIHVzZXItc2V0IGlkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiBtb2RhbFxuICAgKiBAb3B0aW9uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB1cGRhdGVIaXN0b3J5OiBmYWxzZSxcbiAgLyoqXG4gICogQWxsb3dzIHRoZSBtb2RhbCB0byBhcHBlbmQgdG8gY3VzdG9tIGRpdi5cbiAgKiBAb3B0aW9uXG4gICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCBcImJvZHlcIlxuICAqL1xuICBhcHBlbmRUbzogXCJib2R5XCIsXG4gIC8qKlxuICAgKiBBbGxvd3MgYWRkaW5nIGFkZGl0aW9uYWwgY2xhc3MgbmFtZXMgdG8gdGhlIHJldmVhbCBvdmVybGF5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXM6ICcnXG59O1xuXG5mdW5jdGlvbiBpUGhvbmVTbmlmZigpIHtcbiAgcmV0dXJuICgvaVAoYWR8aG9uZXxvZCkuKk9TLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICApO1xufVxuXG5mdW5jdGlvbiBhbmRyb2lkU25pZmYoKSB7XG4gIHJldHVybiAoL0FuZHJvaWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICk7XG59XG5cbmZ1bmN0aW9uIG1vYmlsZVNuaWZmKCkge1xuICByZXR1cm4gaVBob25lU25pZmYoKSB8fCBhbmRyb2lkU25pZmYoKTtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNsaWRlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3V0aWxfdG91Y2hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFNsaWRlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc2xpZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50b3VjaFxuICovXG5cbnZhciBTbGlkZXIgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoU2xpZGVyLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBTbGlkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsaWRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNsaWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNsaWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNsaWRlciwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHNsaWRlciBjb250cm9sLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFNsaWRlclxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBzbGlkZXIgY29udHJvbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBTbGlkZXIuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1NsaWRlcic7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICAvLyBUb3VjaCBhbmQgVHJpZ2dlcnMgaW5pdHMgYXJlIGlkZW1wb3RlbnQsIHdlIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQncyBpbml0aWFsaWVkLlxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3V0aWxfdG91Y2hfX1tcImFcIiAvKiBUb3VjaCAqL10uaW5pdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX19bXCJhXCIgLyogVHJpZ2dlcnMgKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10ucmVnaXN0ZXIoJ1NsaWRlcicsIHtcbiAgICAgICAgJ2x0cic6IHtcbiAgICAgICAgICAnQVJST1dfUklHSFQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAgICdBUlJPV19VUCc6ICdpbmNyZWFzZScsXG4gICAgICAgICAgJ0FSUk9XX0RPV04nOiAnZGVjcmVhc2UnLFxuICAgICAgICAgICdBUlJPV19MRUZUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgICAnU0hJRlRfQVJST1dfUklHSFQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICAgJ1NISUZUX0FSUk9XX1VQJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAgICdTSElGVF9BUlJPV19ET1dOJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAgICdTSElGVF9BUlJPV19MRUZUJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAgICdIT01FJzogJ21pbicsXG4gICAgICAgICAgJ0VORCc6ICdtYXgnXG4gICAgICAgIH0sXG4gICAgICAgICdydGwnOiB7XG4gICAgICAgICAgJ0FSUk9XX0xFRlQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAgICdBUlJPV19SSUdIVCc6ICdkZWNyZWFzZScsXG4gICAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlX2Zhc3QnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpbGl6ZXMgdGhlIHBsdWdpbiBieSByZWFkaW5nL3NldHRpbmcgYXR0cmlidXRlcywgY3JlYXRpbmcgY29sbGVjdGlvbnMgYW5kIHNldHRpbmcgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGhhbmRsZShzKS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdGhpcy5pbnB1dHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG4gICAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJyk7XG5cbiAgICAgIHRoaXMuJGhhbmRsZSA9IHRoaXMuaGFuZGxlcy5lcSgwKTtcbiAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy5pbnB1dHMubGVuZ3RoID8gdGhpcy5pbnB1dHMuZXEoMCkgOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJykpO1xuICAgICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICAgIHZhciBpc0RibCA9IGZhbHNlLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmlucHV0cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoKS5hZGQodGhpcy4kaW5wdXQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuYmluZGluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEluaXRBdHRyKDApO1xuXG4gICAgICBpZiAodGhpcy5oYW5kbGVzWzFdKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuJGhhbmRsZTIgPSB0aGlzLmhhbmRsZXMuZXEoMSk7XG4gICAgICAgIHRoaXMuJGlucHV0MiA9IHRoaXMuaW5wdXRzLmxlbmd0aCA+IDEgPyB0aGlzLmlucHV0cy5lcSgxKSA6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgdGhpcy4kaGFuZGxlMi5hdHRyKCdhcmlhLWNvbnRyb2xzJykpO1xuXG4gICAgICAgIGlmICghdGhpcy5pbnB1dHNbMV0pIHtcbiAgICAgICAgICB0aGlzLmlucHV0cyA9IHRoaXMuaW5wdXRzLmFkZCh0aGlzLiRpbnB1dDIpO1xuICAgICAgICB9XG4gICAgICAgIGlzRGJsID0gdHJ1ZTtcblxuICAgICAgICAvLyB0aGlzLiRoYW5kbGUudHJpZ2dlckhhbmRsZXIoJ2NsaWNrLnpmLnNsaWRlcicpO1xuICAgICAgICB0aGlzLl9zZXRJbml0QXR0cigxKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IGhhbmRsZSBwb3NpdGlvbnNcbiAgICAgIHRoaXMuc2V0SGFuZGxlcygpO1xuXG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRIYW5kbGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SGFuZGxlcygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5oYW5kbGVzWzFdKSB7XG4gICAgICAgIHRoaXMuX3NldEhhbmRsZVBvcyh0aGlzLiRoYW5kbGUsIHRoaXMuaW5wdXRzLmVxKDApLnZhbCgpLCB0cnVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLl9zZXRIYW5kbGVQb3MoX3RoaXMzLiRoYW5kbGUyLCBfdGhpczMuaW5wdXRzLmVxKDEpLnZhbCgpLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLmlucHV0cy5lcSgwKS52YWwoKSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3JlZmxvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWZsb3coKSB7XG4gICAgICB0aGlzLnNldEhhbmRsZXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBmbG9hdGluZyBwb2ludCAodGhlIHZhbHVlKSB0byBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0byBhIHJlbGF0aXZlIHBvc2l0aW9uIG9uIHRoZSBzbGlkZXIgKHRoZSBpbnZlcnNlIG9mIF92YWx1ZSlcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcGN0T2ZCYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcGN0T2ZCYXIodmFsdWUpIHtcbiAgICAgIHZhciBwY3RPZkJhciA9IHBlcmNlbnQodmFsdWUgLSB0aGlzLm9wdGlvbnMuc3RhcnQsIHRoaXMub3B0aW9ucy5lbmQgLSB0aGlzLm9wdGlvbnMuc3RhcnQpO1xuXG4gICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5wb3NpdGlvblZhbHVlRnVuY3Rpb24pIHtcbiAgICAgICAgY2FzZSBcInBvd1wiOlxuICAgICAgICAgIHBjdE9mQmFyID0gdGhpcy5fbG9nVHJhbnNmb3JtKHBjdE9mQmFyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxvZ1wiOlxuICAgICAgICAgIHBjdE9mQmFyID0gdGhpcy5fcG93VHJhbnNmb3JtKHBjdE9mQmFyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBjdE9mQmFyLnRvRml4ZWQoMik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gcGN0T2ZCYXIgLSBmbG9hdGluZyBwb2ludCwgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBzbGlkZXIgKHR5cGljYWxseSBiZXR3ZWVuIDAtMSkgdG8gYmUgdHJhbnNmb3JtZWQgdG8gYSB2YWx1ZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ192YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWx1ZShwY3RPZkJhcikge1xuICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMucG9zaXRpb25WYWx1ZUZ1bmN0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJwb3dcIjpcbiAgICAgICAgICBwY3RPZkJhciA9IHRoaXMuX3Bvd1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsb2dcIjpcbiAgICAgICAgICBwY3RPZkJhciA9IHRoaXMuX2xvZ1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSAodGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkgKiBwY3RPZkJhciArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gZmxvYXRpbmcgcG9pbnQgKHR5cGljYWxseSBiZXR3ZWVuIDAtMSkgdG8gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdGhlIGxvZyBmdW5jdGlvblxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19sb2dUcmFuc2Zvcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9nVHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUxvZyh0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZSwgdmFsdWUgKiAodGhpcy5vcHRpb25zLm5vbkxpbmVhckJhc2UgLSAxKSArIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gZmxvYXRpbmcgcG9pbnQgKHR5cGljYWxseSBiZXR3ZWVuIDAtMSkgdG8gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdGhlIHBvd2VyIGZ1bmN0aW9uXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Bvd1RyYW5zZm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wb3dUcmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgIHJldHVybiAoTWF0aC5wb3codGhpcy5vcHRpb25zLm5vbkxpbmVhckJhc2UsIHZhbHVlKSAtIDEpIC8gKHRoaXMub3B0aW9ucy5ub25MaW5lYXJCYXNlIC0gMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIHNlbGVjdGVkIGhhbmRsZSBhbmQgZmlsbCBiYXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhuZGwgLSB0aGUgc2VsZWN0ZWQgaGFuZGxlIHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxvY2F0aW9uIC0gZmxvYXRpbmcgcG9pbnQgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMgb2YgdGhlIHNsaWRlciBiYXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24uXG4gICAgICogQGZpcmVzIFNsaWRlciNtb3ZlZFxuICAgICAqIEBmaXJlcyBTbGlkZXIjY2hhbmdlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0SGFuZGxlUG9zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEhhbmRsZVBvcygkaG5kbCwgbG9jYXRpb24sIG5vSW52ZXJ0LCBjYikge1xuICAgICAgLy8gZG9uJ3QgbW92ZSBpZiB0aGUgc2xpZGVyIGhhcyBiZWVuIGRpc2FibGVkIHNpbmNlIGl0cyBpbml0aWFsaXphdGlvblxuICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmRpc2FibGVkQ2xhc3MpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vbWlnaHQgbmVlZCB0byBhbHRlciB0aGF0IHNsaWdodGx5IGZvciBiYXJzIHRoYXQgd2lsbCBoYXZlIG9kZCBudW1iZXIgc2VsZWN0aW9ucy5cbiAgICAgIGxvY2F0aW9uID0gcGFyc2VGbG9hdChsb2NhdGlvbik7IC8vb24gaW5wdXQgY2hhbmdlIGV2ZW50cywgY29udmVydCBzdHJpbmcgdG8gbnVtYmVyLi4uZ3J1bWJsZS5cblxuICAgICAgLy8gcHJldmVudCBzbGlkZXIgZnJvbSBydW5uaW5nIG91dCBvZiBib3VuZHMsIGlmIHZhbHVlIGV4Y2VlZHMgdGhlIGxpbWl0cyBzZXQgdGhyb3VnaCBvcHRpb25zLCBvdmVycmlkZSB0aGUgdmFsdWUgdG8gbWluL21heFxuICAgICAgaWYgKGxvY2F0aW9uIDwgdGhpcy5vcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLnN0YXJ0O1xuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA+IHRoaXMub3B0aW9ucy5lbmQpIHtcbiAgICAgICAgbG9jYXRpb24gPSB0aGlzLm9wdGlvbnMuZW5kO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNEYmwgPSB0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQ7XG5cbiAgICAgIC8vdGhpcyBpcyBmb3Igc2luZ2xlLWhhbmRsZWQgdmVydGljYWwgc2xpZGVycywgaXQgYWRqdXN0cyB0aGUgdmFsdWUgdG8gYWNjb3VudCBmb3IgdGhlIHNsaWRlciBiZWluZyBcInVwc2lkZS1kb3duXCJcbiAgICAgIC8vZm9yIGNsaWNrIGFuZCBkcmFnIGV2ZW50cywgaXQncyB3ZWlyZCBkdWUgdG8gdGhlIHNjYWxlKC0xLCAxKSBjc3MgcHJvcGVydHlcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudmVydGljYWwgJiYgIW5vSW52ZXJ0KSB7XG4gICAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZCAtIGxvY2F0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEYmwpIHtcbiAgICAgICAgLy90aGlzIGJsb2NrIGlzIHRvIHByZXZlbnQgMiBoYW5kbGVzIGZyb20gY3Jvc3NpbmcgZWFjaG90aGVyLiBDb3VsZC9zaG91bGQgYmUgaW1wcm92ZWQuXG4gICAgICAgIGlmICh0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwKSB7XG4gICAgICAgICAgdmFyIGgyVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbiA+PSBoMlZhbCA/IGgyVmFsIC0gdGhpcy5vcHRpb25zLnN0ZXAgOiBsb2NhdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaDFWYWwgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPD0gaDFWYWwgPyBoMVZhbCArIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB2ZXJ0ID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICAgIGhPclcgPSB2ZXJ0ID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICAgIGxPclQgPSB2ZXJ0ID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgaGFuZGxlRGltID0gJGhuZGxbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgICAgZWxlbURpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG5cbiAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgbWluL21heCB2YWx1ZSBiYXNlZCBvbiBjbGljayBvciBkcmFnIHBvaW50XG4gICAgICBwY3RPZkJhciA9IHRoaXMuX3BjdE9mQmFyKGxvY2F0aW9uKSxcblxuICAgICAgLy9udW1iZXIgb2YgYWN0dWFsIHBpeGVscyB0byBzaGlmdCB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvYnRhaW5lZCBhYm92ZVxuICAgICAgcHhUb01vdmUgPSAoZWxlbURpbSAtIGhhbmRsZURpbSkgKiBwY3RPZkJhcixcblxuICAgICAgLy9wZXJjZW50YWdlIG9mIGJhciB0byBzaGlmdCB0aGUgaGFuZGxlXG4gICAgICBtb3ZlbWVudCA9IChwZXJjZW50KHB4VG9Nb3ZlLCBlbGVtRGltKSAqIDEwMCkudG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCk7XG4gICAgICAvL2ZpeGluZyB0aGUgZGVjaW1hbCB2YWx1ZSBmb3IgdGhlIGxvY2F0aW9uIG51bWJlciwgaXMgcGFzc2VkIHRvIG90aGVyIG1ldGhvZHMgYXMgYSBmaXhlZCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICAgICAgbG9jYXRpb24gPSBwYXJzZUZsb2F0KGxvY2F0aW9uLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpKTtcbiAgICAgIC8vIGRlY2xhcmUgZW1wdHkgb2JqZWN0IGZvciBjc3MgYWRqdXN0bWVudHMsIG9ubHkgdXNlZCB3aXRoIDIgaGFuZGxlZC1zbGlkZXJzXG4gICAgICB2YXIgY3NzID0ge307XG5cbiAgICAgIHRoaXMuX3NldFZhbHVlcygkaG5kbCwgbG9jYXRpb24pO1xuXG4gICAgICAvLyBUT0RPIHVwZGF0ZSB0byBjYWxjdWxhdGUgYmFzZWQgb24gdmFsdWVzIHNldCB0byByZXNwZWN0aXZlIGlucHV0cz8/XG4gICAgICBpZiAoaXNEYmwpIHtcbiAgICAgICAgdmFyIGlzTGVmdEhuZGwgPSB0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwLFxuXG4gICAgICAgIC8vZW1wdHkgdmFyaWFibGUsIHdpbGwgYmUgdXNlZCBmb3IgbWluLWhlaWdodC93aWR0aCBmb3IgZmlsbCBiYXJcbiAgICAgICAgZGltLFxuXG4gICAgICAgIC8vcGVyY2VudGFnZSB3L2ggb2YgdGhlIGhhbmRsZSBjb21wYXJlZCB0byB0aGUgc2xpZGVyIGJhclxuICAgICAgICBoYW5kbGVQY3QgPSB+fihwZXJjZW50KGhhbmRsZURpbSwgZWxlbURpbSkgKiAxMDApO1xuICAgICAgICAvL2lmIGxlZnQgaGFuZGxlLCB0aGUgbWF0aCBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBpZiBpdCdzIHRoZSByaWdodCBoYW5kbGUsIGFuZCB0aGUgbGVmdC90b3AgcHJvcGVydHkgbmVlZHMgdG8gYmUgY2hhbmdlZCBmb3IgdGhlIGZpbGwgYmFyXG4gICAgICAgIGlmIChpc0xlZnRIbmRsKSB7XG4gICAgICAgICAgLy9sZWZ0IG9yIHRvcCBwZXJjZW50YWdlIHZhbHVlIHRvIGFwcGx5IHRvIHRoZSBmaWxsIGJhci5cbiAgICAgICAgICBjc3NbbE9yVF0gPSBtb3ZlbWVudCArICclJztcbiAgICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgbmV3IG1pbi1oZWlnaHQvd2lkdGggZm9yIHRoZSBmaWxsIGJhci5cbiAgICAgICAgICBkaW0gPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZTJbMF0uc3R5bGVbbE9yVF0pIC0gbW92ZW1lbnQgKyBoYW5kbGVQY3Q7XG4gICAgICAgICAgLy90aGlzIGNhbGxiYWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGVycm9ycyBhbmQgYWxsb3cgdGhlIHByb3BlciBwbGFjZW1lbnQgYW5kIGluaXRpYWxpemF0aW9uIG9mIGEgMi1oYW5kbGVkIHNsaWRlclxuICAgICAgICAgIC8vcGx1cywgaXQgbWVhbnMgd2UgZG9uJ3QgY2FyZSBpZiAnZGltJyBpc05hTiBvbiBpbml0LCBpdCB3b24ndCBiZSBpbiB0aGUgZnV0dXJlLlxuICAgICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgfSAvL3RoaXMgaXMgb25seSBuZWVkZWQgZm9yIHRoZSBpbml0aWFsaXphdGlvbiBvZiAyIGhhbmRsZWQgc2xpZGVyc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vanVzdCBjYWNoaW5nIHRoZSB2YWx1ZSBvZiB0aGUgbGVmdC9ib3R0b20gaGFuZGxlJ3MgbGVmdC90b3AgcHJvcGVydHlcbiAgICAgICAgICB2YXIgaGFuZGxlUG9zID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGVbMF0uc3R5bGVbbE9yVF0pO1xuICAgICAgICAgIC8vY2FsY3VsYXRlIHRoZSBuZXcgbWluLWhlaWdodC93aWR0aCBmb3IgdGhlIGZpbGwgYmFyLiBVc2UgaXNOYU4gdG8gcHJldmVudCBmYWxzZSBwb3NpdGl2ZXMgZm9yIG51bWJlcnMgPD0gMFxuICAgICAgICAgIC8vYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2YgbW92ZW1lbnQgb2YgdGhlIGhhbmRsZSBiZWluZyBtYW5pcHVsYXRlZCwgbGVzcyB0aGUgb3Bwb3NpbmcgaGFuZGxlJ3MgbGVmdC90b3AgcG9zaXRpb24sIHBsdXMgdGhlIHBlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgaXRzZWxmXG4gICAgICAgICAgZGltID0gbW92ZW1lbnQgLSAoaXNOYU4oaGFuZGxlUG9zKSA/ICh0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0IC0gdGhpcy5vcHRpb25zLnN0YXJ0KSAvICgodGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkgLyAxMDApIDogaGFuZGxlUG9zKSArIGhhbmRsZVBjdDtcbiAgICAgICAgfVxuICAgICAgICAvLyBhc3NpZ24gdGhlIG1pbi1oZWlnaHQvd2lkdGggdG8gb3VyIGNzcyBvYmplY3RcbiAgICAgICAgY3NzWydtaW4tJyArIGhPclddID0gZGltICsgJyUnO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uZSgnZmluaXNoZWQuemYuYW5pbWF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhhbmRsZSBpcyBkb25lIG1vdmluZy5cbiAgICAgICAgICogQGV2ZW50IFNsaWRlciNtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignbW92ZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgICB9KTtcblxuICAgICAgLy9iZWNhdXNlIHdlIGRvbid0IGtub3cgZXhhY3RseSBob3cgdGhlIGhhbmRsZSB3aWxsIGJlIG1vdmVkLCBjaGVjayB0aGUgYW1vdW50IG9mIHRpbWUgaXQgc2hvdWxkIHRha2UgdG8gbW92ZS5cbiAgICAgIHZhciBtb3ZlVGltZSA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnKSA/IDEwMDAgLyA2MCA6IHRoaXMub3B0aW9ucy5tb3ZlVGltZTtcblxuICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiYlwiIC8qIE1vdmUgKi9dKShtb3ZlVGltZSwgJGhuZGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gYWRqdXN0aW5nIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBjYWxjdWxhdGVkIGFib3ZlXG4gICAgICAgIC8vIGlmIG1vdmVtZW50IGlzTmFOLCB0aGF0IGlzIGJlY2F1c2UgdGhlIHNsaWRlciBpcyBoaWRkZW4gYW5kIHdlIGNhbm5vdCBkZXRlcm1pbmUgaGFuZGxlIHdpZHRoLFxuICAgICAgICAvLyBmYWxsIGJhY2sgdG8gbmV4dCBiZXN0IGd1ZXNzLlxuICAgICAgICBpZiAoaXNOYU4obW92ZW1lbnQpKSB7XG4gICAgICAgICAgJGhuZGwuY3NzKGxPclQsIHBjdE9mQmFyICogMTAwICsgJyUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkaG5kbC5jc3MobE9yVCwgbW92ZW1lbnQgKyAnJScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkKSB7XG4gICAgICAgICAgLy9pZiBzaW5nbGUtaGFuZGxlZCwgYSBzaW1wbGUgbWV0aG9kIHRvIGV4cGFuZCB0aGUgZmlsbCBiYXJcbiAgICAgICAgICBfdGhpcy4kZmlsbC5jc3MoaE9yVywgcGN0T2ZCYXIgKiAxMDAgKyAnJScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vb3RoZXJ3aXNlLCB1c2UgdGhlIGNzcyBvYmplY3Qgd2UgY3JlYXRlZCBhYm92ZVxuICAgICAgICAgIF90aGlzLiRmaWxsLmNzcyhjc3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSB2YWx1ZSBoYXMgbm90IGJlZW4gY2hhbmdlIGZvciBhIGdpdmVuIHRpbWUuXG4gICAgICAgKiBAZXZlbnQgU2xpZGVyI2NoYW5nZWRcbiAgICAgICAqL1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2VkLnpmLnNsaWRlcicsIFskaG5kbF0pO1xuICAgICAgfSwgX3RoaXMub3B0aW9ucy5jaGFuZ2VkRGVsYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGluaXRpYWwgYXR0cmlidXRlIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgaGFuZGxlL2lucHV0IHRvIHVzZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldEluaXRBdHRyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEluaXRBdHRyKGlkeCkge1xuICAgICAgdmFyIGluaXRWYWwgPSBpZHggPT09IDAgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0IDogdGhpcy5vcHRpb25zLmluaXRpYWxFbmQ7XG4gICAgICB2YXIgaWQgPSB0aGlzLmlucHV0cy5lcShpZHgpLmF0dHIoJ2lkJykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcImFcIiAvKiBHZXRZb0RpZ2l0cyAqL10pKDYsICdzbGlkZXInKTtcbiAgICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkuYXR0cih7XG4gICAgICAgICdpZCc6IGlkLFxuICAgICAgICAnbWF4JzogdGhpcy5vcHRpb25zLmVuZCxcbiAgICAgICAgJ21pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICAgJ3N0ZXAnOiB0aGlzLm9wdGlvbnMuc3RlcFxuICAgICAgfSk7XG4gICAgICB0aGlzLmlucHV0cy5lcShpZHgpLnZhbChpbml0VmFsKTtcbiAgICAgIHRoaXMuaGFuZGxlcy5lcShpZHgpLmF0dHIoe1xuICAgICAgICAncm9sZSc6ICdzbGlkZXInLFxuICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAnYXJpYS12YWx1ZW1heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAgICdhcmlhLXZhbHVlbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgICAnYXJpYS12YWx1ZW5vdyc6IGluaXRWYWwsXG4gICAgICAgICdhcmlhLW9yaWVudGF0aW9uJzogdGhpcy5vcHRpb25zLnZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJyxcbiAgICAgICAgJ3RhYmluZGV4JzogMFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5wdXQgYW5kIGBhcmlhLXZhbHVlbm93YCB2YWx1ZXMgZm9yIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBoYW5kbGUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG9mIHRoZSBuZXcgdmFsdWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRWYWx1ZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0VmFsdWVzKCRoYW5kbGUsIHZhbCkge1xuICAgICAgdmFyIGlkeCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA/IHRoaXMuaGFuZGxlcy5pbmRleCgkaGFuZGxlKSA6IDA7XG4gICAgICB0aGlzLmlucHV0cy5lcShpZHgpLnZhbCh2YWwpO1xuICAgICAgJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JywgdmFsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGV2ZW50cyBvbiB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbmV3IGxvY2F0aW9uIG9mIHRoZSBjdXJyZW50IGhhbmRsZS5cbiAgICAgKiBJZiB0aGVyZSBhcmUgdHdvIGhhbmRsZXMgYW5kIHRoZSBiYXIgd2FzIGNsaWNrZWQsIGl0IGRldGVybWluZXMgd2hpY2ggaGFuZGxlIHRvIG1vdmUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZSAtIHRoZSBgZXZlbnRgIG9iamVjdCBwYXNzZWQgZnJvbSB0aGUgbGlzdGVuZXIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gY2FsY3VsYXRlIGZvciwgaWYgc2VsZWN0ZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG51bWJlciBmb3IgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgICAqIFRPRE8gY2xlYW4gdGhpcyB1cCwgdGhlcmUncyBhIGxvdCBvZiByZXBlYXRlZCBjb2RlIGJldHdlZW4gdGhpcyBhbmQgdGhlIF9zZXRIYW5kbGVQb3MgZm4uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19oYW5kbGVFdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVFdmVudChlLCAkaGFuZGxlLCB2YWwpIHtcbiAgICAgIHZhciB2YWx1ZSwgaGFzVmFsO1xuICAgICAgaWYgKCF2YWwpIHtcbiAgICAgICAgLy9jbGljayBvciBkcmFnIGV2ZW50c1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICB2ZXJ0aWNhbCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICAgIHBhcmFtID0gdmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSB2ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgICAgZXZlbnRPZmZzZXQgPSB2ZXJ0aWNhbCA/IGUucGFnZVkgOiBlLnBhZ2VYLFxuICAgICAgICAgICAgaGFsZk9mSGFuZGxlID0gdGhpcy4kaGFuZGxlWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3BhcmFtXSAvIDIsXG4gICAgICAgICAgICBiYXJEaW0gPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3BhcmFtXSxcbiAgICAgICAgICAgIHdpbmRvd1Njcm9sbCA9IHZlcnRpY2FsID8gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLnNjcm9sbFRvcCgpIDogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLnNjcm9sbExlZnQoKTtcblxuICAgICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClbZGlyZWN0aW9uXTtcblxuICAgICAgICAvLyB0b3VjaCBldmVudHMgZW11bGF0ZWQgYnkgdGhlIHRvdWNoIHV0aWwgZ2l2ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JlZW4sIGFkZCB3aW5kb3cuc2Nyb2xsIHRvIGV2ZW50IGNvb3JkaW5hdGVzLi4uXG4gICAgICAgIC8vIGJlc3Qgd2F5IHRvIGd1ZXNzIHRoaXMgaXMgc2ltdWxhdGVkIGlzIGlmIGNsaWVudFkgPT0gcGFnZVlcbiAgICAgICAgaWYgKGUuY2xpZW50WSA9PT0gZS5wYWdlWSkge1xuICAgICAgICAgIGV2ZW50T2Zmc2V0ID0gZXZlbnRPZmZzZXQgKyB3aW5kb3dTY3JvbGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50RnJvbUJhciA9IGV2ZW50T2Zmc2V0IC0gZWxlbU9mZnNldDtcbiAgICAgICAgdmFyIGJhclhZO1xuICAgICAgICBpZiAoZXZlbnRGcm9tQmFyIDwgMCkge1xuICAgICAgICAgIGJhclhZID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudEZyb21CYXIgPiBiYXJEaW0pIHtcbiAgICAgICAgICBiYXJYWSA9IGJhckRpbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiYXJYWSA9IGV2ZW50RnJvbUJhcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2Zmc2V0UGN0ID0gcGVyY2VudChiYXJYWSwgYmFyRGltKTtcblxuICAgICAgICB2YWx1ZSA9IHRoaXMuX3ZhbHVlKG9mZnNldFBjdCk7XG5cbiAgICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgICAgaWYgKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJjXCIgLyogcnRsICovXSkoKSAmJiAhdGhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLm9wdGlvbnMuZW5kIC0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IF90aGlzLl9hZGp1c3RWYWx1ZShudWxsLCB2YWx1ZSk7XG4gICAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgICAgaGFzVmFsID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCEkaGFuZGxlKSB7XG4gICAgICAgICAgLy9maWd1cmUgb3V0IHdoaWNoIGhhbmRsZSBpdCBpcywgcGFzcyBpdCB0byB0aGUgbmV4dCBmdW5jdGlvbi5cbiAgICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICAgIHNlY25kSG5kbFBvcyA9IGFic1Bvc2l0aW9uKHRoaXMuJGhhbmRsZTIsIGRpcmVjdGlvbiwgYmFyWFksIHBhcmFtKTtcbiAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICAgIHZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUobnVsbCwgdmFsKTtcbiAgICAgICAgaGFzVmFsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKCRoYW5kbGUsIHZhbHVlLCBoYXNWYWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdGVzIHZhbHVlIGZvciBoYW5kbGUgaW4gcmVnYXJkIHRvIHN0ZXAgdmFsdWUuIHJldHVybnMgYWRqdXN0ZWQgdmFsdWVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIHNlbGVjdGVkIGhhbmRsZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBhZGp1c3QuIHVzZWQgaWYgJGhhbmRsZSBpcyBmYWxzeVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRqdXN0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICAgIHZhciB2YWwsXG4gICAgICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgICAgIGRpdiA9IHBhcnNlRmxvYXQoc3RlcCAvIDIpLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgcHJldl92YWwsXG4gICAgICAgICAgbmV4dF92YWw7XG4gICAgICBpZiAoISEkaGFuZGxlKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICAgIHByZXZfdmFsID0gdmFsIC0gbGVmdDtcbiAgICAgIG5leHRfdmFsID0gcHJldl92YWwgKyBzdGVwO1xuICAgICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzbGlkZXIgZWxlbWVudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB0aGlzLl9ldmVudHNGb3JIYW5kbGUodGhpcy4kaGFuZGxlKTtcbiAgICAgIGlmICh0aGlzLmhhbmRsZXNbMV0pIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzRm9ySGFuZGxlKHRoaXMuJGhhbmRsZTIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIGEgcGFydGljdWxhciBoYW5kbGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnQgaGFuZGxlIHRvIGFwcGx5IGxpc3RlbmVycyB0by5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50c0ZvckhhbmRsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHNGb3JIYW5kbGUoJGhhbmRsZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBjdXJIYW5kbGUsXG4gICAgICAgICAgdGltZXI7XG5cbiAgICAgIHRoaXMuaW5wdXRzLm9mZignY2hhbmdlLnpmLnNsaWRlcicpLm9uKCdjaGFuZ2UuemYuc2xpZGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGlkeCA9IF90aGlzLmlucHV0cy5pbmRleChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGUsIF90aGlzLmhhbmRsZXMuZXEoaWR4KSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS52YWwoKSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja1NlbGVjdCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignY2xpY2suemYuc2xpZGVyJykub24oJ2NsaWNrLnpmLnNsaWRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVzLmFkZFRvdWNoKCk7XG5cbiAgICAgICAgdmFyICRib2R5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpO1xuICAgICAgICAkaGFuZGxlLm9mZignbW91c2Vkb3duLnpmLnNsaWRlcicpLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAkaGFuZGxlLmFkZENsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgIF90aGlzLiRmaWxsLmFkZENsYXNzKCdpcy1kcmFnZ2luZycpOyAvL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJywgdHJ1ZSk7XG5cbiAgICAgICAgICBjdXJIYW5kbGUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICAkYm9keS5vbignbW91c2Vtb3ZlLnpmLnNsaWRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcbiAgICAgICAgICB9KS5vbignbW91c2V1cC56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGUsIGN1ckhhbmRsZSk7XG5cbiAgICAgICAgICAgICRoYW5kbGUucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZmlsbC5yZW1vdmVDbGFzcygnaXMtZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAkYm9keS5vZmYoJ21vdXNlbW92ZS56Zi5zbGlkZXIgbW91c2V1cC56Zi5zbGlkZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAgIC5vbignc2VsZWN0c3RhcnQuemYuc2xpZGVyIHRvdWNobW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgICRoYW5kbGUub2ZmKCdrZXlkb3duLnpmLnNsaWRlcicpLm9uKCdrZXlkb3duLnpmLnNsaWRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfJGhhbmRsZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICBpZHggPSBfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID8gX3RoaXMuaGFuZGxlcy5pbmRleChfJGhhbmRsZSkgOiAwLFxuICAgICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlO1xuXG4gICAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL10uaGFuZGxlS2V5KGUsICdTbGlkZXInLCB7XG4gICAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmNyZWFzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvbGRWYWx1ZSArIF90aGlzLm9wdGlvbnMuc3RlcDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1pbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBfdGhpcy5vcHRpb25zLnN0YXJ0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWF4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IF90aGlzLm9wdGlvbnMuZW5kO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gb25seSBzZXQgaGFuZGxlIHBvcyB3aGVuIGV2ZW50IHdhcyBoYW5kbGVkIHNwZWNpYWxseVxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUpO1xuICAgICAgICB9Ki9cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBzbGlkZXIgcGx1Z2luLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgICAgdGhpcy5pbnB1dHMub2ZmKCcuemYuc2xpZGVyJyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnNsaWRlcicpO1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2xpZGVyO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cblNsaWRlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3RhcnQ6IDAsXG4gIC8qKlxuICAgKiBNYXhpbXVtIHZhbHVlIGZvciB0aGUgc2xpZGVyIHNjYWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgZW5kOiAxMDAsXG4gIC8qKlxuICAgKiBNaW5pbXVtIHZhbHVlIGNoYW5nZSBwZXIgY2hhbmdlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHN0ZXA6IDEsXG4gIC8qKlxuICAgKiBWYWx1ZSBhdCB3aGljaCB0aGUgaGFuZGxlL2lucHV0ICoobGVmdCBoYW5kbGUvZmlyc3QgaW5wdXQpKiBzaG91bGQgYmUgc2V0IHRvIG9uIGluaXRpYWxpemF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGluaXRpYWxTdGFydDogMCxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSByaWdodCBoYW5kbGUvc2Vjb25kIGlucHV0IHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTAwXG4gICAqL1xuICBpbml0aWFsRW5kOiAxMDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIGlucHV0IHRvIGJlIGxvY2F0ZWQgb3V0c2lkZSB0aGUgY29udGFpbmVyIGFuZCB2aXNpYmxlLiBTZXQgdG8gYnkgdGhlIEpTXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBiaW5kaW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlciB0byBjbGljay90YXAgb24gdGhlIHNsaWRlciBiYXIgdG8gc2VsZWN0IGEgdmFsdWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmVydGljYWw6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2VyIHRvIGRyYWcgdGhlIHNsaWRlciBoYW5kbGUocykgdG8gc2VsZWN0IGEgdmFsdWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBzbGlkZXIgYW5kIHByZXZlbnRzIGV2ZW50IGxpc3RlbmVycyBmcm9tIGJlaW5nIGFwcGxpZWQuIERvdWJsZSBjaGVja2VkIGJ5IEpTIHdpdGggYGRpc2FibGVkQ2xhc3NgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZG91YmxlU2lkZWQ6IGZhbHNlLFxuICAvKipcbiAgICogUG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlLlxuICAgKi9cbiAgLy8gc3RlcHM6IDEwMCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0aGUgcGx1Z2luIHNob3VsZCBnbyB0byBmb3IgZmxvYXRpbmcgcG9pbnQgcHJlY2lzaW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDJcbiAgICovXG4gIGRlY2ltYWw6IDIsXG4gIC8qKlxuICAgKiBUaW1lIGRlbGF5IGZvciBkcmFnZ2VkIGVsZW1lbnRzLlxuICAgKi9cbiAgLy8gZHJhZ0RlbGF5OiAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGFuaW1hdGUgdGhlIG1vdmVtZW50IG9mIGEgc2xpZGVyIGhhbmRsZSBpZiB1c2VyIGNsaWNrcy90YXBzIG9uIHRoZSBiYXIuIE5lZWRzIHRvIGJlIG1hbnVhbGx5IHNldCBpZiB1cGRhdGluZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBTYXNzIHNldHRpbmdzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDIwMFxuICAgKi9cbiAgbW92ZVRpbWU6IDIwMCwgLy91cGRhdGUgdGhpcyBpZiBjaGFuZ2luZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBzYXNzXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGRpc2FibGVkIHNsaWRlcnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2Rpc2FibGVkJ1xuICAgKi9cbiAgZGlzYWJsZWRDbGFzczogJ2Rpc2FibGVkJyxcbiAgLyoqXG4gICAqIFdpbGwgaW52ZXJ0IHRoZSBkZWZhdWx0IGxheW91dCBmb3IgYSB2ZXJ0aWNhbDxzcGFuIGRhdGEtdG9vbHRpcCB0aXRsZT1cIndobyB3b3VsZCBkbyB0aGlzPz8/XCI+IDwvc3Bhbj5zbGlkZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMCxcbiAgLyoqXG4gICogQmFzZXZhbHVlIGZvciBub24tbGluZWFyIHNsaWRlcnNcbiAgKiBAb3B0aW9uXG4gICogQHR5cGUge251bWJlcn1cbiAgKiBAZGVmYXVsdCA1XG4gICovXG4gIG5vbkxpbmVhckJhc2U6IDUsXG4gIC8qKlxuICAqIEJhc2V2YWx1ZSBmb3Igbm9uLWxpbmVhciBzbGlkZXJzLCBwb3NzaWJsZSB2YWx1ZXMgYXJlOiBgJ2xpbmVhcidgLCBgJ3BvdydgICYgYCdsb2cnYC4gUG93IGFuZCBMb2cgdXNlIHRoZSBub25MaW5lYXJCYXNlIHNldHRpbmcuXG4gICogQG9wdGlvblxuICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgKi9cbiAgcG9zaXRpb25WYWx1ZUZ1bmN0aW9uOiAnbGluZWFyJ1xufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIGZyYWMgLyBudW07XG59XG5mdW5jdGlvbiBhYnNQb3NpdGlvbigkaGFuZGxlLCBkaXIsIGNsaWNrUG9zLCBwYXJhbSkge1xuICByZXR1cm4gTWF0aC5hYnMoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAkaGFuZGxlW3BhcmFtXSgpIC8gMiAtIGNsaWNrUG9zKTtcbn1cbmZ1bmN0aW9uIGJhc2VMb2coYmFzZSwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHZhbHVlKSAvIE1hdGgubG9nKGJhc2UpO1xufVxuXG5cblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3RpY2t5OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG4vKipcbiAqIFN0aWNreSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc3RpY2t5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG52YXIgU3RpY2t5ID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFN0aWNreSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gU3RpY2t5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGlja3kpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTdGlja3kuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTdGlja3kpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdGlja3ksIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBzdGlja3kgdGhpbmcuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgU3RpY2t5XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QgcGFzc2VkIHdoZW4gY3JlYXRpbmcgdGhlIGVsZW1lbnQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnU3RpY2t5JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIC8vIFRyaWdnZXJzIGluaXQgaXMgaWRlbXBvdGVudCwganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBpbml0aWFsaXplZFxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfX1tcImFcIiAvKiBUcmlnZ2VycyAqL10uaW5pdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hKTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBzdGlja3kgZWxlbWVudCBieSBhZGRpbmcgY2xhc3NlcywgZ2V0dGluZy9zZXR0aW5nIGRpbWVuc2lvbnMsIGJyZWFrcG9pbnRzIGFuZCBhdHRyaWJ1dGVzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuXG4gICAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYVwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgJ3N0aWNreScpLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndhc1dyYXBwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLiRlbGVtZW50LndyYXAodGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICB9XG4gICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpLmF0dHIoeyAnZGF0YS1yZXNpemUnOiBpZCwgJ2RhdGEtbXV0YXRlJzogaWQgfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcikuYXR0cih7ICdkYXRhLW11dGF0ZSc6IGlkIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbENvdW50ID0gdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIF90aGlzLiRjb250YWluZXIuY3NzKCdoZWlnaHQnLCBfdGhpcy5jb250YWluZXJIZWlnaHQpO1xuICAgICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKSB7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCBzY3JvbGwpO1xuICAgICAgICAgIC8vVW5zdGljayB0aGUgZWxlbWVudCB3aWxsIGVuc3VyZSB0aGF0IHByb3BlciBjbGFzc2VzIGFyZSBzZXQuXG4gICAgICAgICAgaWYgKCFfdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlU3RpY2t5KHNjcm9sbCA+PSBfdGhpcy50b3BQb2ludCA/IGZhbHNlIDogdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyhpZC5zcGxpdCgnLScpLnJldmVyc2UoKS5qb2luKCctJykpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgbXVsdGlwbGUgZWxlbWVudHMgYXMgYW5jaG9ycywgY2FsY3VsYXRlcyB0aGUgdG9wIGFuZCBib3R0b20gcGl4ZWwgdmFsdWVzIHRoZSBzdGlja3kgdGhpbmcgc2hvdWxkIHN0aWNrIGFuZCB1bnN0aWNrIG9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19wYXJzZVBvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXJzZVBvaW50cygpIHtcbiAgICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgICBidG0gPSB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yID09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgICBwdHMgPSBbdG9wLCBidG1dLFxuICAgICAgICAgIGJyZWFrcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgICAgdmFyIHB0O1xuICAgICAgICBpZiAodHlwZW9mIHB0c1tpXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGxhY2UgPSBwdHNbaV0uc3BsaXQoJzonKSxcbiAgICAgICAgICAgICAgYW5jaG9yID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBwbGFjZVswXSk7XG5cbiAgICAgICAgICBwdCA9IGFuY2hvci5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgaWYgKHBsYWNlWzFdICYmIHBsYWNlWzFdLnRvTG93ZXJDYXNlKCkgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha3NbaV0gPSBwdDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb2ludHMgPSBicmVha3M7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIHNjcm9sbGluZyBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gcHNldWRvLXJhbmRvbSBpZCBmb3IgdW5pcXVlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoaWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gJ3Njcm9sbC56Zi4nICsgaWQ7XG4gICAgICBpZiAodGhpcy5pc09uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhblN0aWNrKSB7XG4gICAgICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpLm9uKHNjcm9sbExpc3RlbmVyLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChfdGhpcy5zY3JvbGxDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuJGFuY2hvcikge1xuICAgICAgICB0aGlzLiRhbmNob3Iub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIGV2ZW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzZXVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHNIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50c0hhbmRsZXIoaWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gJ3Njcm9sbC56Zi4nICsgaWQ7XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzY3JvbGxMaXN0ZW5lciAtIHVuaXF1ZSwgbmFtZXNwYWNlZCBzY3JvbGwgbGlzdGVuZXIgYXR0YWNoZWQgdG8gYHdpbmRvd2BcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhdXNlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICAgKiBAZXZlbnQgU3RpY2t5I3BhdXNlXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3BhdXNlLnpmLnN0aWNreScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBvbiBldmVyeSBgc2Nyb2xsYCBldmVudCBhbmQgb24gYF9pbml0YFxuICAgICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2hlY2tTaXplcyAtIHRydWUgaWYgcGx1Z2luIHNob3VsZCByZWNhbGN1bGF0ZSBzaXplcyBhbmQgYnJlYWtwb2ludHMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbCAtIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBhc3NlZCBmcm9tIHNjcm9sbCBldmVudCBjYiBmdW5jdGlvbi4gSWYgbm90IHBhc3NlZCwgZGVmYXVsdHMgdG8gYHdpbmRvdy5wYWdlWU9mZnNldGAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jYWxjJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGMoY2hlY2tTaXplcywgc2Nyb2xsKSB7XG4gICAgICBpZiAoY2hlY2tTaXplcykge1xuICAgICAgICB0aGlzLl9zZXRTaXplcygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbCA+PSB0aGlzLnRvcFBvaW50KSB7XG4gICAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdGlja3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgdGhlICRlbGVtZW50IHRvIGJlY29tZSBzdHVjay5cbiAgICAgKiBBZGRzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRTdGlja3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U3RpY2t5KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgICAgbXJnbiA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICAgIGNzcyA9IHt9O1xuXG4gICAgICBjc3NbbXJnbl0gPSB0aGlzLm9wdGlvbnNbbXJnbl0gKyAnZW0nO1xuICAgICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICAgIGNzc1tub3RTdHVja1RvXSA9ICdhdXRvJztcbiAgICAgIHRoaXMuaXNTdHVjayA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1hbmNob3JlZCBpcy1hdC0nICsgbm90U3R1Y2tUbykuYWRkQ2xhc3MoJ2lzLXN0dWNrIGlzLWF0LScgKyBzdGlja1RvKS5jc3MoY3NzKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnN0dWNrdG86dG9wYFxuICAgICAgICogQGV2ZW50IFN0aWNreSNzdHVja3RvXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdzdGlja3kuemYuc3R1Y2t0bzonICsgc3RpY2tUbyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgdW5zdHVjay5cbiAgICAgKiBSZW1vdmVzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1RvcCAtIHRlbGxzIHRoZSBmdW5jdGlvbiBpZiB0aGUgJGVsZW1lbnQgc2hvdWxkIGFuY2hvciB0byB0aGUgdG9wIG9yIGJvdHRvbSBvZiBpdHMgJGFuY2hvciBlbGVtZW50LlxuICAgICAqIEBmaXJlcyBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVtb3ZlU3RpY2t5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgICAgdmFyIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgICBzdGlja1RvVG9wID0gc3RpY2tUbyA9PT0gJ3RvcCcsXG4gICAgICAgICAgY3NzID0ge30sXG4gICAgICAgICAgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMucG9pbnRzWzBdIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0LFxuICAgICAgICAgIG1yZ24gPSBzdGlja1RvVG9wID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgICAgdG9wT3JCb3R0b20gPSBpc1RvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cbiAgICAgIGNzc1ttcmduXSA9IDA7XG5cbiAgICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgICBpZiAoaXNUb3ApIHtcbiAgICAgICAgY3NzWyd0b3AnXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtc3R1Y2sgaXMtYXQtJyArIHN0aWNrVG8pLmFkZENsYXNzKCdpcy1hbmNob3JlZCBpcy1hdC0nICsgdG9wT3JCb3R0b20pLmNzcyhjc3MpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYudW5zdHVja2Zyb206Ym90dG9tYFxuICAgICAgICogQGV2ZW50IFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAgICovXG4gICAgICAudHJpZ2dlcignc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOicgKyB0b3BPckJvdHRvbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgJGVsZW1lbnQgYW5kICRjb250YWluZXIgc2l6ZXMgZm9yIHBsdWdpbi5cbiAgICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbiBvZiBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0U2l6ZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U2l6ZXMoY2IpIHtcbiAgICAgIHRoaXMuY2FuU3RpY2sgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uaXModGhpcy5vcHRpb25zLnN0aWNreU9uKTtcbiAgICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBuZXdFbGVtV2lkdGggPSB0aGlzLiRjb250YWluZXJbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgICAgY29tcCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSksXG4gICAgICAgICAgcGRuZ2wgPSBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApLFxuICAgICAgICAgIHBkbmdyID0gcGFyc2VJbnQoY29tcFsncGFkZGluZy1yaWdodCddLCAxMCk7XG5cbiAgICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmFuY2hvckhlaWdodCA9IHRoaXMuJGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICAgICdtYXgtd2lkdGgnOiBuZXdFbGVtV2lkdGggLSBwZG5nbCAtIHBkbmdyICsgJ3B4J1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXdDb250YWluZXJIZWlnaHQgPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB8fCB0aGlzLmNvbnRhaW5lckhlaWdodDtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIpIHtcbiAgICAgICAgbmV3Q29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuICAgICAgdGhpcy4kY29udGFpbmVyLmNzcyh7XG4gICAgICAgIGhlaWdodDogbmV3Q29udGFpbmVySGVpZ2h0XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxlbUhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcblxuICAgICAgaWYgKCF0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLWF0LWJvdHRvbScpKSB7XG4gICAgICAgICAgdmFyIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkudG9wIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0O1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCBhbmNob3JQdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0QnJlYWtQb2ludHMobmV3Q29udGFpbmVySGVpZ2h0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYnJlYWtwb2ludHMgZm9yIHRoZSBlbGVtZW50IHRvIGJlY29tZSBzdGlja3kvdW5zdGlja3kuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVsZW1IZWlnaHQgLSBweCB2YWx1ZSBmb3Igc3RpY2t5LiRlbGVtZW50IGhlaWdodCwgY2FsY3VsYXRlZCBieSBgX3NldFNpemVzYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBjb21wbGV0aW9uLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRCcmVha1BvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRCcmVha1BvaW50cyhlbGVtSGVpZ2h0LCBjYikge1xuICAgICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1Ub3AgPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpblRvcCksXG4gICAgICAgICAgbUJ0bSA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxcbiAgICAgICAgICB0b3BQb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMF0gOiB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wLFxuICAgICAgICAgIGJvdHRvbVBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSA6IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQsXG5cbiAgICAgIC8vIHRvcFBvaW50ID0gdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCB8fCB0aGlzLnBvaW50c1swXSxcbiAgICAgIC8vIGJvdHRvbVBvaW50ID0gdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCB8fCB0aGlzLnBvaW50c1sxXSxcbiAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAndG9wJykge1xuICAgICAgICB0b3BQb2ludCAtPSBtVG9wO1xuICAgICAgICBib3R0b21Qb2ludCAtPSBlbGVtSGVpZ2h0ICsgbVRvcDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHRvcFBvaW50IC09IHdpbkhlaWdodCAtIChlbGVtSGVpZ2h0ICsgbUJ0bSk7XG4gICAgICAgIGJvdHRvbVBvaW50IC09IHdpbkhlaWdodCAtIG1CdG07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL3RoaXMgd291bGQgYmUgdGhlIHN0aWNrVG86IGJvdGggb3B0aW9uLi4uIHRyaWNreVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvcFBvaW50ID0gdG9wUG9pbnQ7XG4gICAgICB0aGlzLmJvdHRvbVBvaW50ID0gYm90dG9tUG9pbnQ7XG5cbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgY3VycmVudCBzdGlja3kgZWxlbWVudC5cbiAgICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycywgSlMtYWRkZWQgY3NzIHByb3BlcnRpZXMgYW5kIGNsYXNzZXMsIGFuZCB1bndyYXBzIHRoZSAkZWxlbWVudCBpZiB0aGUgSlMgYWRkZWQgdGhlICRjb250YWluZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnN0aWNreUNsYXNzICsgJyBpcy1hbmNob3JlZCBpcy1hdC10b3AnKS5jc3Moe1xuICAgICAgICBoZWlnaHQ6ICcnLFxuICAgICAgICB0b3A6ICcnLFxuICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAnbWF4LXdpZHRoJzogJydcbiAgICAgIH0pLm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpLm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ2NoYW5nZS56Zi5zdGlja3knKTtcbiAgICAgIH1cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYodGhpcy5zY3JvbGxMaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0aGlzLndhc1dyYXBwZWQpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpLmNzcyh7XG4gICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RpY2t5O1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cblN0aWNreS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbWl6YWJsZSBjb250YWluZXIgdGVtcGxhdGUuIEFkZCB5b3VyIG93biBjbGFzc2VzIGZvciBzdHlsaW5nIGFuZCBzaXppbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJyZsdDtkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uIENhbiBiZSBgJ3RvcCdgIG9yIGAnYm90dG9tJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRvcEFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSBib3R0b20gYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBidG1BbmNob3I6ICcnLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpblRvcDogMSxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSBib3R0b20gb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtYXJnaW5Cb3R0b206IDEsXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IHN0cmluZyB0aGF0IGlzIHRoZSBtaW5pbXVtIHNjcmVlbiBzaXplIGFuIGVsZW1lbnQgc2hvdWxkIGJlY29tZSBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHN0aWNreU9uOiAnbWVkaXVtJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGVsZW1lbnQsIGFuZCByZW1vdmVkIG9uIGRlc3RydWN0aW9uLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3lgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3knXG4gICAqL1xuICBzdGlja3lDbGFzczogJ3N0aWNreScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBjb250YWluZXIuIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreS1jb250YWluZXJgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3ktY29udGFpbmVyJ1xuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdzdGlja3ktY29udGFpbmVyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBzY3JvbGwgZXZlbnRzIGJldHdlZW4gdGhlIHBsdWdpbidzIHJlY2FsY3VsYXRpbmcgc3RpY2t5IHBvaW50cy4gU2V0dGluZyBpdCB0byBgMGAgd2lsbCBjYXVzZSBpdCB0byByZWNhbGMgZXZlcnkgc2Nyb2xsIGV2ZW50LCBzZXR0aW5nIGl0IHRvIGAtMWAgd2lsbCBwcmV2ZW50IHJlY2FsYyBvbiBzY3JvbGwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG4gIGNoZWNrRXZlcnk6IC0xXG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZW0gdmFsdWVzXG4gKiBAcGFyYW0gTnVtYmVyIHtlbX0gLSBudW1iZXIgb2YgZW0ncyB0byBjYWxjdWxhdGUgaW50byBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZW1DYWxjKGVtKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKS5mb250U2l6ZSwgMTApICogZW07XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDMyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUb2dnbGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBUb2dnbGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50b2dnbGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBUb2dnbGVyID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFRvZ2dsZXIsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvZ2dsZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb2dnbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9nZ2xlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvZ2dsZXIsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBUb2dnbGVyXG4gICAgICogQGZpcmVzIFRvZ2dsZXIjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnJztcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1RvZ2dsZXInOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEpO1xuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyIGlucHV0O1xuICAgICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uT3V0ID0gaW5wdXRbMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBpbnB1dFswXSA9PT0gJy4nID8gaW5wdXQuc2xpY2UoMSkgOiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAvLyBBZGQgQVJJQSBhdHRyaWJ1dGVzIHRvIHRyaWdnZXJzXG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtb3Blbj1cIicgKyBpZCArICdcIl0sIFtkYXRhLWNsb3NlPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtdG9nZ2xlPVwiJyArIGlkICsgJ1wiXScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykgPyBmYWxzZSA6IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIHRvZ2dsZSB0cmlnZ2VyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvZ2dsZS56Zi50cmlnZ2VyJykub24oJ3RvZ2dsZS56Zi50cmlnZ2VyJywgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdGFyZ2V0IGNsYXNzIG9uIHRoZSB0YXJnZXQgZWxlbWVudC4gQW4gZXZlbnQgaXMgZmlyZWQgZnJvbSB0aGUgb3JpZ2luYWwgdHJpZ2dlciBkZXBlbmRpbmcgb24gaWYgdGhlIHJlc3VsdGFudCBzdGF0ZSB3YXMgXCJvblwiIG9yIFwib2ZmXCIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICAgKiBAZmlyZXMgVG9nZ2xlciNvZmZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdGhpc1t0aGlzLm9wdGlvbnMuYW5pbWF0ZSA/ICdfdG9nZ2xlQW5pbWF0ZScgOiAnX3RvZ2dsZUNsYXNzJ10oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdG9nZ2xlQ2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3NOYW1lKTtcblxuICAgICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgIGlmIChpc09uKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBkb2VzIG5vdCBoYXZlIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3RvZ2dsZUFuaW1hdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXS5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl91cGRhdGVBUklBKHRydWUpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgICAgIHRoaXMuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcImFcIiAvKiBNb3Rpb24gKi9dLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25PdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQShmYWxzZSk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgICAgIHRoaXMuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZUFSSUEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09uID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgVG9nZ2xlciBvbiB0aGUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudG9nZ2xlcicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb2dnbGVyO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJhXCIgLyogUGx1Z2luICovXSk7XG5cblRvZ2dsZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUZWxscyB0aGUgcGx1Z2luIGlmIHRoZSBlbGVtZW50IHNob3VsZCBhbmltYXRlZCB3aGVuIHRvZ2dsZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbmltYXRlOiBmYWxzZVxufTtcblxuXG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRvb2x0aXA7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3Bvc2l0aW9uYWJsZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBUb29sdGlwIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50b29sdGlwXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoX1Bvc2l0aW9uYWJsZSkge1xuICBfaW5oZXJpdHMoVG9vbHRpcCwgX1Bvc2l0aW9uYWJsZSk7XG5cbiAgZnVuY3Rpb24gVG9vbHRpcCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb29sdGlwKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIFRvb2x0aXAuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgVG9vbHRpcFxuICAgICAqIEBmaXJlcyBUb29sdGlwI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYXR0YWNoIGEgdG9vbHRpcCB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9iamVjdCB0byBleHRlbmQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIFRvb2x0aXAuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Rvb2x0aXAnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5pc0NsaWNrID0gZmFsc2U7XG5cbiAgICAgIC8vIFRyaWdnZXJzIGluaXQgaXMgaWRlbXBvdGVudCwganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBpbml0aWFsaXplZFxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfX1tcImFcIiAvKiBUcmlnZ2VycyAqL10uaW5pdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hKTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0b29sdGlwIGJ5IHNldHRpbmcgdGhlIGNyZWF0aW5nIHRoZSB0aXAgZWxlbWVudCwgYWRkaW5nIGl0J3MgdGV4dCwgc2V0dGluZyBwcml2YXRlIHZhcmlhYmxlcyBhbmQgc2V0dGluZyBhdHRyaWJ1dGVzIG9uIHRoZSBhbmNob3IuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuICAgICAgdmFyIGVsZW1JZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScpIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCAndG9vbHRpcCcpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSkgOiB0aGlzLl9idWlsZFRlbXBsYXRlKGVsZW1JZCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dIdG1sKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuaHRtbCh0aGlzLm9wdGlvbnMudGlwVGV4dCkuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS50ZXh0KHRoaXMub3B0aW9ucy50aXBUZXh0KS5oaWRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICd0aXRsZSc6ICcnLFxuICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGVsZW1JZCxcbiAgICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAgICdkYXRhLXRvZ2dsZSc6IGVsZW1JZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogZWxlbUlkXG4gICAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgICAgX2dldChUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvb2x0aXAucHJvdG90eXBlKSwgJ19pbml0JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgLy8gaGFuZGxlIGxlZ2FjeSBjbGFzc25hbWVzXG4gICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvXFxiKHRvcHxsZWZ0fHJpZ2h0fGJvdHRvbSlcXGIvZyk7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICd0b3AnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0QWxpZ25tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRBbGlnbm1lbnQoKSB7XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldEhPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SE9mZnNldCgpIHtcbiAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGhpcy5wb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhPZmZzZXQgKyB0aGlzLm9wdGlvbnMudG9vbHRpcFdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXRWT2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFZPZmZzZXQoKSB7XG4gICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52T2Zmc2V0ICsgdGhpcy5vcHRpb25zLnRvb2x0aXBIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYnVpbGRzIHRoZSB0b29sdGlwIGVsZW1lbnQsIGFkZHMgYXR0cmlidXRlcywgYW5kIHJldHVybnMgdGhlIHRlbXBsYXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19idWlsZFRlbXBsYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkVGVtcGxhdGUoaWQpIHtcbiAgICAgIHZhciB0ZW1wbGF0ZUNsYXNzZXMgPSAodGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyArICcgJyArIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzICsgJyAnICsgdGhpcy5vcHRpb25zLnRlbXBsYXRlQ2xhc3NlcykudHJpbSgpO1xuICAgICAgdmFyICR0ZW1wbGF0ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3ModGVtcGxhdGVDbGFzc2VzKS5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlLFxuICAgICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gJHRlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgICAqIGlmIHRoZSB0b29sdGlwIGlzIGxhcmdlciB0aGFuIHRoZSBzY3JlZW4gd2lkdGgsIGRlZmF1bHQgdG8gZnVsbCB3aWR0aCAtIGFueSB1c2VyIHNlbGVjdGVkIG1hcmdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRQb3NpdGlvbigpIHtcbiAgICAgIF9nZXQoVG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb29sdGlwLnByb3RvdHlwZSksICdfc2V0UG9zaXRpb24nLCB0aGlzKS5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQsIHRoaXMudGVtcGxhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgICAqIEBmaXJlcyBUb29sdGlwI2Nsb3NlbWVcbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNzaG93XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93T24gIT09ICdhbGwnICYmICFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL10uaXModGhpcy5vcHRpb25zLnNob3dPbikpIHtcbiAgICAgICAgLy8gY29uc29sZS5lcnJvcignVGhlIHNjcmVlbiBpcyB0b28gc21hbGwgdG8gZGlzcGxheSB0aGlzIHRvb2x0aXAnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuc2hvdygpO1xuICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ3RvcCBib3R0b20gbGVmdCByaWdodCcpLmFkZENsYXNzKHRoaXMucG9zaXRpb24pO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcygnYWxpZ24tdG9wIGFsaWduLWJvdHRvbSBhbGlnbi1sZWZ0IGFsaWduLXJpZ2h0IGFsaWduLWNlbnRlcicpLmFkZENsYXNzKCdhbGlnbi0nICsgdGhpcy5hbGlnbm1lbnQpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHRvIGNsb3NlIGFsbCBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAgICAgKiBAZXZlbnQgQ2xvc2VtZSN0b29sdGlwXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi50b29sdGlwJywgdGhpcy50ZW1wbGF0ZS5hdHRyKCdpZCcpKTtcblxuICAgICAgdGhpcy50ZW1wbGF0ZS5hdHRyKHtcbiAgICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogdHJ1ZSxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgLy8gY29uc29sZS5sb2codGhpcy50ZW1wbGF0ZSk7XG4gICAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKCd2aXNpYmlsaXR5JywgJycpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9tYXliZSBkbyBzdHVmZj9cbiAgICAgIH0pO1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIHNob3duXG4gICAgICAgKiBAZXZlbnQgVG9vbHRpcCNzaG93XG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi50b29sdGlwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIGN1cnJlbnQgdG9vbHRpcCwgYW5kIHJlc2V0cyB0aGUgcG9zaXRpb25pbmcgY2xhc3MgaWYgaXQgd2FzIGNoYW5nZWQgZHVlIHRvIGNvbGxpc2lvblxuICAgICAqIEBmaXJlcyBUb29sdGlwI2hpZGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgdGhpcy4kZWxlbWVudC5kYXRhKCd5ZXRpLWJveCcpKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2VcbiAgICAgIH0pLmZhZGVPdXQodGhpcy5vcHRpb25zLmZhZGVPdXREdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogZmlyZXMgd2hlbiB0aGUgdG9vbHRpcCBpcyBoaWRkZW5cbiAgICAgICAqIEBldmVudCBUb29sdGlwI2hpZGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLnRvb2x0aXAnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRzIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIHRvb2x0aXAgYW5kIGl0cyBhbmNob3JcbiAgICAgKiBUT0RPIGNvbWJpbmUgc29tZSBvZiB0aGUgbGlzdGVuZXJzIGxpa2UgZm9jdXMgYW5kIG1vdXNlZW50ZXIsIGV0Yy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgJHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICAgIHZhciBpc0ZvY3VzID0gZmFsc2U7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZW50ZXIuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgIGlmICghaXNGb2N1cyB8fCBfdGhpcy5pc0NsaWNrICYmICFfdGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgICAvL190aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIC8vIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuaXNDbGljayA9IHRydWU7XG4gICAgICAgICAgICBpZiAoKF90aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyIHx8ICFfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcpKSAmJiAhX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWRvd24uemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVGb3JUb3VjaCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCd0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfdGhpcy5pc0FjdGl2ZSA/IF90aGlzLmhpZGUoKSA6IF90aGlzLnNob3coKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAvLyAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgICAvLyAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuaGlkZS5iaW5kKHRoaXMpXG4gICAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdmb2N1cy56Zi50b29sdGlwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IHRydWU7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgbm90IHNob3dpbmcgb3BlbiBvbiBjbGlja3MsIHdlIG5lZWQgdG8gcHJldGVuZCBhIGNsaWNrLWxhdW5jaGVkIGZvY3VzIGlzbid0XG4gICAgICAgICAgLy8gYSByZWFsIGZvY3VzLCBvdGhlcndpc2Ugb24gaG92ZXIgYW5kIGNvbWUgYmFjayB3ZSBnZXQgYmFkIGJlaGF2aW9yXG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICAgICAgaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9KS5vbignZm9jdXNvdXQuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICB9KS5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZHMgYSB0b2dnbGUgbWV0aG9kLCBpbiBhZGRpdGlvbiB0byB0aGUgc3RhdGljIHNob3coKSAmIGhpZGUoKSBmdW5jdGlvbnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiB0b29sdGlwLCByZW1vdmVzIHRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgdmlldy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLnRlbXBsYXRlLnRleHQoKSkub2ZmKCcuemYudHJpZ2dlciAuemYudG9vbHRpcCcpLnJlbW92ZUNsYXNzKCdoYXMtdGlwIHRvcCByaWdodCBsZWZ0JykucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieSBhcmlhLWhhc3BvcHVwIGRhdGEtZGlzYWJsZS1ob3ZlciBkYXRhLXJlc2l6ZSBkYXRhLXRvZ2dsZSBkYXRhLXRvb2x0aXAgZGF0YS15ZXRpLWJveCcpO1xuXG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb29sdGlwO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcG9zaXRpb25hYmxlX19bXCJhXCIgLyogUG9zaXRpb25hYmxlICovXSk7XG5cblRvb2x0aXAuZGVmYXVsdHMgPSB7XG4gIGRpc2FibGVGb3JUb3VjaDogZmFsc2UsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYmVmb3JlIGEgdG9vbHRpcCBzaG91bGQgb3BlbiBvbiBob3Zlci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyMDBcbiAgICovXG4gIGhvdmVyRGVsYXk6IDIwMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBhIHRvb2x0aXAgc2hvdWxkIHRha2UgdG8gZmFkZSBpbnRvIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTUwXG4gICAqL1xuICBmYWRlSW5EdXJhdGlvbjogMTUwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIG91dCBvZiB2aWV3LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDE1MFxuICAgKi9cbiAgZmFkZU91dER1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBob3ZlciBldmVudHMgZnJvbSBvcGVuaW5nIHRoZSB0b29sdGlwIGlmIHNldCB0byB0cnVlXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogT3B0aW9uYWwgYWRkdGlvbmFsIGNsYXNzZXMgdG8gYXBwbHkgdG8gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gaW5pdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdGVtcGxhdGVDbGFzc2VzOiAnJyxcbiAgLyoqXG4gICAqIE5vbi1vcHRpb25hbCBjbGFzcyBhZGRlZCB0byB0b29sdGlwIHRlbXBsYXRlcy4gRm91bmRhdGlvbiBkZWZhdWx0IGlzICd0b29sdGlwJy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndG9vbHRpcCdcbiAgICovXG4gIHRvb2x0aXBDbGFzczogJ3Rvb2x0aXAnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgdG9vbHRpcCBhbmNob3IgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaGFzLXRpcCdcbiAgICovXG4gIHRyaWdnZXJDbGFzczogJ2hhcy10aXAnLFxuICAvKipcbiAgICogTWluaW11bSBicmVha3BvaW50IHNpemUgYXQgd2hpY2ggdG8gb3BlbiB0aGUgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnc21hbGwnXG4gICAqL1xuICBzaG93T246ICdzbWFsbCcsXG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBtYXJrdXAgZm9yIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRlbXBsYXRlOiAnJyxcbiAgLyoqXG4gICAqIFRleHQgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRpcFRleHQ6ICcnLFxuICB0b3VjaENsb3NlVGV4dDogJ1RhcCB0byBjbG9zZS4nLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB0b29sdGlwIHRvIHJlbWFpbiBvcGVuIGlmIHRyaWdnZXJlZCB3aXRoIGEgY2xpY2sgb3IgdG91Y2ggZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogdHJ1ZSxcbiAgLyoqXG4gICAqIERFUFJFQ0FURUQgQWRkaXRpb25hbCBwb3NpdGlvbmluZyBjbGFzc2VzLCBzZXQgYnkgdGhlIEpTXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdG9vbHRpcC4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHBvc2l0aW9uOiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGlnbm1lbnQgb2YgdG9vbHRpcCByZWxhdGl2ZSB0byBhbmNob3IuIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIGNlbnRlciwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIGFsaWdubWVudDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3cgb3ZlcmxhcCBvZiBjb250YWluZXIvd2luZG93LiBJZiBmYWxzZSwgdG9vbHRpcCB3aWxsIGZpcnN0IHRyeSB0b1xuICAgKiBwb3NpdGlvbiBhcyBkZWZpbmVkIGJ5IGRhdGEtcG9zaXRpb24gYW5kIGRhdGEtYWxpZ25tZW50LCBidXQgcmVwb3NpdGlvbiBpZlxuICAgKiBpdCB3b3VsZCBjYXVzZSBhbiBvdmVyZmxvdy4gIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd092ZXJsYXA6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgb3ZlcmxhcCBvZiBvbmx5IHRoZSBib3R0b20gb2YgdGhlIGNvbnRhaW5lci4gVGhpcyBpcyB0aGUgbW9zdCBjb21tb25cbiAgICogYmVoYXZpb3IgZm9yIGRyb3Bkb3ducywgYWxsb3dpbmcgdGhlIGRyb3Bkb3duIHRvIGV4dGVuZCB0aGUgYm90dG9tIG9mIHRoZVxuICAgKiBzY3JlZW4gYnV0IG5vdCBvdGhlcndpc2UgaW5mbHVlbmNlIG9yIGJyZWFrIG91dCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBMZXNzIGNvbW1vbiBmb3IgdG9vbHRpcHMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd0JvdHRvbU92ZXJsYXA6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBZIGF4aXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdk9mZnNldDogMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWCBheGlzXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaE9mZnNldDogMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzcGFjaW5nIGF1dG8tYWRqdXN0IGZvciBhIHZlcnRpY2FsIHRvb2x0aXBcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxNFxuICAgKi9cbiAgdG9vbHRpcEhlaWdodDogMTQsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgdGVtcGxhdGUgc3BhY2luZyBhdXRvLWFkanVzdCBmb3IgYSBob3Jpem9udGFsIHRvb2x0aXBcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxMlxuICAgKi9cbiAgdG9vbHRpcFdpZHRoOiAxMixcbiAgLyoqXG4gICogQWxsb3cgSFRNTCBpbiB0b29sdGlwLiBXYXJuaW5nOiBJZiB5b3UgYXJlIGxvYWRpbmcgdXNlci1nZW5lcmF0ZWQgY29udGVudCBpbnRvIHRvb2x0aXBzLFxuICAqIGFsbG93aW5nIEhUTUwgbWF5IG9wZW4geW91cnNlbGYgdXAgdG8gWFNTIGF0dGFja3MuXG4gICogQG9wdGlvblxuICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IGZhbHNlXG4gICovXG4gIGFsbG93SHRtbDogZmFsc2Vcbn07XG5cbi8qKlxuICogVE9ETyB1dGlsaXplIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gKi9cblxuXG5cbi8qKiovIH0pLFxuLyogMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRpbWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG5cblxuXG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAvL29wdGlvbnMgaXMgYW4gb2JqZWN0IGZvciBlYXNpbHkgYWRkaW5nIGZlYXR1cmVzIGxhdGVyLlxuICBuYW1lU3BhY2UgPSBPYmplY3Qua2V5cyhlbGVtLmRhdGEoKSlbMF0gfHwgJ3RpbWVyJyxcbiAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgc3RhcnQsXG4gICAgICB0aW1lcjtcblxuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJlbWFpbiA9IC0xO1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9O1xuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIC8vIGlmKCFlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgcmVtYWluID0gcmVtYWluIDw9IDAgPyBkdXJhdGlvbiA6IHJlbWFpbjtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIGZhbHNlKTtcbiAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZmluaXRlKSB7XG4gICAgICAgIF90aGlzLnJlc3RhcnQoKTsgLy9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSwgcmVtYWluKTtcbiAgICBlbGVtLnRyaWdnZXIoJ3RpbWVyc3RhcnQuemYuJyArIG5hbWVTcGFjZSk7XG4gIH07XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKCd0aW1lcnBhdXNlZC56Zi4nICsgbmFtZVNwYWNlKTtcbiAgfTtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc2xpZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2RyaWxsZG93bl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9tYWdlbGxhbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9yZXNwb25zaXZlTWVudV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fYWNjb3JkaW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9kcm9wZG93bl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fb2ZmY2FudmFzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl90YWJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9yZXZlYWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl90b29sdGlwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9vcmJpdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc3RpY2t5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9pbnRlcmNoYW5nZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZVRvZ2dsZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fdG9nZ2xlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fYWJpZGVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2VxdWFsaXplcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2NvcmVfX1tcImFcIiAvKiBGb3VuZGF0aW9uICovXS5hZGRUb0pxdWVyeShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10uTWVkaWFRdWVyeSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJhXCIgLyogTWVkaWFRdWVyeSAqL107XG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEsIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fY29yZV9fW1wiYVwiIC8qIEZvdW5kYXRpb24gKi9dKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fc2xpZGVyX19bXCJhXCIgLyogU2xpZGVyICovXSwgJ1NsaWRlcicpO1xuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2NvcmVfX1tcImFcIiAvKiBGb3VuZGF0aW9uICovXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9kcmlsbGRvd25fX1tcImFcIiAvKiBEcmlsbGRvd24gKi9dLCAnRHJpbGxkb3duJyk7XG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fY29yZV9fW1wiYVwiIC8qIEZvdW5kYXRpb24gKi9dLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2FjY29yZGlvbk1lbnVfX1tcImFcIiAvKiBBY2NvcmRpb25NZW51ICovXSwgJ0FjY29yZGlvbk1lbnUnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fZHJvcGRvd25NZW51X19bXCJhXCIgLyogRHJvcGRvd25NZW51ICovXSwgJ0Ryb3Bkb3duTWVudScpO1xuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2NvcmVfX1tcImFcIiAvKiBGb3VuZGF0aW9uICovXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9tYWdlbGxhbl9fW1wiYVwiIC8qIE1hZ2VsbGFuICovXSwgJ01hZ2VsbGFuJyk7XG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9faG9tZV9kZXBsb3llcl9zaXRlc19ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9ub2RlX2ZvdW5kYXRpb25fY3VzdG9taXplcl9mb3VuZGF0aW9uX3NpdGVzX2pzX2ZvdW5kYXRpb25fY29yZV9fW1wiYVwiIC8qIEZvdW5kYXRpb24gKi9dLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVNZW51X19bXCJhXCIgLyogUmVzcG9uc2l2ZU1lbnUgKi9dLCAnUmVzcG9uc2l2ZU1lbnUnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2FjY29yZGlvbl9fW1wiYVwiIC8qIEFjY29yZGlvbiAqL10sICdBY2NvcmRpb24nKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2Ryb3Bkb3duX19bXCJhXCIgLyogRHJvcGRvd24gKi9dLCAnRHJvcGRvd24nKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX29mZmNhbnZhc19fW1wiYVwiIC8qIE9mZkNhbnZhcyAqL10sICdPZmZDYW52YXMnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3RhYnNfX1tcImFcIiAvKiBUYWJzICovXSwgJ1RhYnMnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3JldmVhbF9fW1wiYVwiIC8qIFJldmVhbCAqL10sICdSZXZlYWwnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzX19bXCJhXCIgLyogUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMgKi9dLCAnUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Rvb2x0aXBfX1tcImFcIiAvKiBUb29sdGlwICovXSwgJ1Rvb2x0aXAnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX29yYml0X19bXCJhXCIgLyogT3JiaXQgKi9dLCAnT3JiaXQnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3N0aWNreV9fW1wiYVwiIC8qIFN0aWNreSAqL10sICdTdGlja3knKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2ludGVyY2hhbmdlX19bXCJhXCIgLyogSW50ZXJjaGFuZ2UgKi9dLCAnSW50ZXJjaGFuZ2UnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVUb2dnbGVfX1tcImFcIiAvKiBSZXNwb25zaXZlVG9nZ2xlICovXSwgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjFfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3RvZ2dsZXJfX1tcImFcIiAvKiBUb2dnbGVyICovXSwgJ1RvZ2dsZXInKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjJfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2FiaWRlX19bXCJhXCIgLyogQWJpZGUgKi9dLCAnQWJpZGUnKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX2VxdWFsaXplcl9fW1wiYVwiIC8qIEVxdWFsaXplciAqL10sICdFcXVhbGl6ZXInKTtcblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19ob21lX2RlcGxveWVyX3NpdGVzX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX25vZGVfZm91bmRhdGlvbl9jdXN0b21pemVyX2ZvdW5kYXRpb25fc2l0ZXNfanNfZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfX2hvbWVfZGVwbG95ZXJfc2l0ZXNfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfbm9kZV9mb3VuZGF0aW9uX2N1c3RvbWl6ZXJfZm91bmRhdGlvbl9zaXRlc19qc19mb3VuZGF0aW9uX3Ntb290aFNjcm9sbF9fW1wiYVwiIC8qIFNtb290aFNjcm9sbCAqL10sICdTbW9vdGhTY3JvbGwnKTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuLyoqXG4gKiB3aGF0LWlucHV0IC0gQSBnbG9iYWwgdXRpbGl0eSBmb3IgdHJhY2tpbmcgdGhlIGN1cnJlbnQgaW5wdXQgbWV0aG9kIChtb3VzZSwga2V5Ym9hcmQgb3IgdG91Y2gpLlxuICogQHZlcnNpb24gdjQuMi4wXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGVuMXNldmVuL3doYXQtaW5wdXRcbiAqIEBsaWNlbnNlIE1JVFxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIndoYXRJbnB1dFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ3aGF0SW5wdXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wid2hhdElucHV0XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLypcblx0ICAgKiB2YXJpYWJsZXNcblx0ICAgKi9cblxuXHQgIC8vIGxhc3QgdXNlZCBpbnB1dCB0eXBlXG5cdCAgdmFyIGN1cnJlbnRJbnB1dCA9ICdpbml0aWFsJztcblxuXHQgIC8vIGxhc3QgdXNlZCBpbnB1dCBpbnRlbnRcblx0ICB2YXIgY3VycmVudEludGVudCA9IG51bGw7XG5cblx0ICAvLyBjYWNoZSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcblx0ICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdCAgLy8gZm9ybSBpbnB1dCB0eXBlc1xuXHQgIHZhciBmb3JtSW5wdXRzID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuXHQgIHZhciBmdW5jdGlvbkxpc3QgPSBbXTtcblxuXHQgIC8vIGxpc3Qgb2YgbW9kaWZpZXIga2V5cyBjb21tb25seSB1c2VkIHdpdGggdGhlIG1vdXNlIGFuZFxuXHQgIC8vIGNhbiBiZSBzYWZlbHkgaWdub3JlZCB0byBwcmV2ZW50IGZhbHNlIGtleWJvYXJkIGRldGVjdGlvblxuXHQgIHZhciBpZ25vcmVNYXAgPSBbMTYsIC8vIHNoaWZ0XG5cdCAgMTcsIC8vIGNvbnRyb2xcblx0ICAxOCwgLy8gYWx0XG5cdCAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcblx0ICA5MyAvLyBXaW5kb3dzIG1lbnUgLyByaWdodCBBcHBsZSBjbWRcblx0ICBdO1xuXG5cdCAgLy8gbGlzdCBvZiBrZXlzIGZvciB3aGljaCB3ZSBjaGFuZ2UgaW50ZW50IGV2ZW4gZm9yIGZvcm0gaW5wdXRzXG5cdCAgdmFyIGNoYW5nZUludGVudE1hcCA9IFs5IC8vIHRhYlxuXHQgIF07XG5cblx0ICAvLyBtYXBwaW5nIG9mIGV2ZW50cyB0byBpbnB1dCB0eXBlc1xuXHQgIHZhciBpbnB1dE1hcCA9IHtcblx0ICAgIGtleWRvd246ICdrZXlib2FyZCcsXG5cdCAgICBtb3VzZWRvd246ICdtb3VzZScsXG5cdCAgICBtb3VzZW1vdmU6ICdtb3VzZScsXG5cdCAgICBNU1BvaW50ZXJEb3duOiAncG9pbnRlcicsXG5cdCAgICBNU1BvaW50ZXJNb3ZlOiAncG9pbnRlcicsXG5cdCAgICBwb2ludGVyZG93bjogJ3BvaW50ZXInLFxuXHQgICAgcG9pbnRlcm1vdmU6ICdwb2ludGVyJyxcblx0ICAgIHRvdWNoc3RhcnQ6ICd0b3VjaCdcblx0ICB9O1xuXG5cdCAgLy8gYXJyYXkgb2YgYWxsIHVzZWQgaW5wdXQgdHlwZXNcblx0ICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG5cdCAgLy8gYm9vbGVhbjogdHJ1ZSBpZiB0b3VjaCBidWZmZXIgaXMgYWN0aXZlXG5cdCAgdmFyIGlzQnVmZmVyaW5nID0gZmFsc2U7XG5cblx0ICAvLyBib29sZWFuOiB0cnVlIGlmIHRoZSBwYWdlIGlzIGJlaW5nIHNjcm9sbGVkXG5cdCAgdmFyIGlzU2Nyb2xsaW5nID0gZmFsc2U7XG5cblx0ICAvLyBzdG9yZSBjdXJyZW50IG1vdXNlIHBvc2l0aW9uXG5cdCAgdmFyIG1vdXNlUG9zID0ge1xuXHQgICAgeDogbnVsbCxcblx0ICAgIHk6IG51bGxcblx0ICB9O1xuXG5cdCAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG5cdCAgdmFyIHBvaW50ZXJNYXAgPSB7XG5cdCAgICAyOiAndG91Y2gnLFxuXHQgICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcblx0ICAgIDQ6ICdtb3VzZSdcblx0ICB9O1xuXG5cdCAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG5cdCAgdHJ5IHtcblx0ICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0cyk7XG5cdCAgfSBjYXRjaCAoZSkge31cblxuXHQgIC8qXG5cdCAgICogc2V0IHVwXG5cdCAgICovXG5cblx0ICB2YXIgc2V0VXAgPSBmdW5jdGlvbiBzZXRVcCgpIHtcblx0ICAgIC8vIGFkZCBjb3JyZWN0IG1vdXNlIHdoZWVsIGV2ZW50IG1hcHBpbmcgdG8gYGlucHV0TWFwYFxuXHQgICAgaW5wdXRNYXBbZGV0ZWN0V2hlZWwoKV0gPSAnbW91c2UnO1xuXG5cdCAgICBhZGRMaXN0ZW5lcnMoKTtcblx0ICAgIHNldElucHV0KCk7XG5cdCAgfTtcblxuXHQgIC8qXG5cdCAgICogZXZlbnRzXG5cdCAgICovXG5cblx0ICB2YXIgYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuXHQgICAgLy8gYHBvaW50ZXJtb3ZlYCwgYE1TUG9pbnRlck1vdmVgLCBgbW91c2Vtb3ZlYCBhbmQgbW91c2Ugd2hlZWwgZXZlbnQgYmluZGluZ1xuXHQgICAgLy8gY2FuIG9ubHkgZGVtb25zdHJhdGUgcG90ZW50aWFsLCBidXQgbm90IGFjdHVhbCwgaW50ZXJhY3Rpb25cblx0ICAgIC8vIGFuZCBhcmUgdHJlYXRlZCBzZXBhcmF0ZWx5XG5cblx0ICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcblx0ICAgIGlmICh3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJEb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHNldEludGVudCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBtb3VzZSBldmVudHNcblx0ICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNldEludGVudCk7XG5cblx0ICAgICAgLy8gdG91Y2ggZXZlbnRzXG5cdCAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHtcblx0ICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvdWNoQnVmZmVyKTtcblx0ICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaEJ1ZmZlcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gbW91c2Ugd2hlZWxcblx0ICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKGRldGVjdFdoZWVsKCksIHNldEludGVudCwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG5cblx0ICAgIC8vIGtleWJvYXJkIGV2ZW50c1xuXHQgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB1cGRhdGVJbnB1dCk7XG5cdCAgfTtcblxuXHQgIC8vIGNoZWNrcyBjb25kaXRpb25zIGJlZm9yZSB1cGRhdGluZyBuZXcgaW5wdXRcblx0ICB2YXIgdXBkYXRlSW5wdXQgPSBmdW5jdGlvbiB1cGRhdGVJbnB1dChldmVudCkge1xuXHQgICAgLy8gb25seSBleGVjdXRlIGlmIHRoZSB0b3VjaCBidWZmZXIgdGltZXIgaXNuJ3QgcnVubmluZ1xuXHQgICAgaWYgKCFpc0J1ZmZlcmluZykge1xuXHQgICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC53aGljaDtcblx0ICAgICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG5cdCAgICAgIGlmICh2YWx1ZSA9PT0gJ3BvaW50ZXInKSB2YWx1ZSA9IHBvaW50ZXJUeXBlKGV2ZW50KTtcblxuXHQgICAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSB8fCBjdXJyZW50SW50ZW50ICE9PSB2YWx1ZSkge1xuXHQgICAgICAgIHZhciBhY3RpdmVFbGVtID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0ICAgICAgICB2YXIgYWN0aXZlSW5wdXQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgbm90Rm9ybUlucHV0ID0gYWN0aXZlRWxlbSAmJiBhY3RpdmVFbGVtLm5vZGVOYW1lICYmIGZvcm1JbnB1dHMuaW5kZXhPZihhY3RpdmVFbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMTtcblxuXHQgICAgICAgIGlmIChub3RGb3JtSW5wdXQgfHwgY2hhbmdlSW50ZW50TWFwLmluZGV4T2YoZXZlbnRLZXkpICE9PSAtMSkge1xuXHQgICAgICAgICAgYWN0aXZlSW5wdXQgPSB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh2YWx1ZSA9PT0gJ3RvdWNoJyB8fFxuXHQgICAgICAgIC8vIGlnbm9yZSBtb3VzZSBtb2RpZmllciBrZXlzXG5cdCAgICAgICAgdmFsdWUgPT09ICdtb3VzZScgfHxcblx0ICAgICAgICAvLyBkb24ndCBzd2l0Y2ggaWYgdGhlIGN1cnJlbnQgZWxlbWVudCBpcyBhIGZvcm0gaW5wdXRcblx0ICAgICAgICB2YWx1ZSA9PT0gJ2tleWJvYXJkJyAmJiBldmVudEtleSAmJiBhY3RpdmVJbnB1dCAmJiBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPT09IC0xKSB7XG5cdCAgICAgICAgICAvLyBzZXQgdGhlIGN1cnJlbnQgYW5kIGNhdGNoLWFsbCB2YXJpYWJsZVxuXHQgICAgICAgICAgY3VycmVudElucHV0ID0gY3VycmVudEludGVudCA9IHZhbHVlO1xuXG5cdCAgICAgICAgICBzZXRJbnB1dCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyB1cGRhdGVzIHRoZSBkb2MgYW5kIGBpbnB1dFR5cGVzYCBhcnJheSB3aXRoIG5ldyBpbnB1dFxuXHQgIHZhciBzZXRJbnB1dCA9IGZ1bmN0aW9uIHNldElucHV0KCkge1xuXHQgICAgZG9jLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0aW5wdXQnLCBjdXJyZW50SW5wdXQpO1xuXHQgICAgZG9jLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0aW50ZW50JywgY3VycmVudElucHV0KTtcblxuXHQgICAgaWYgKGlucHV0VHlwZXMuaW5kZXhPZihjdXJyZW50SW5wdXQpID09PSAtMSkge1xuXHQgICAgICBpbnB1dFR5cGVzLnB1c2goY3VycmVudElucHV0KTtcblx0ICAgICAgZG9jLmNsYXNzTmFtZSArPSAnIHdoYXRpbnB1dC10eXBlcy0nICsgY3VycmVudElucHV0O1xuXHQgICAgfVxuXG5cdCAgICBmaXJlRnVuY3Rpb25zKCdpbnB1dCcpO1xuXHQgIH07XG5cblx0ICAvLyB1cGRhdGVzIGlucHV0IGludGVudCBmb3IgYG1vdXNlbW92ZWAgYW5kIGBwb2ludGVybW92ZWBcblx0ICB2YXIgc2V0SW50ZW50ID0gZnVuY3Rpb24gc2V0SW50ZW50KGV2ZW50KSB7XG5cdCAgICAvLyB0ZXN0IHRvIHNlZSBpZiBgbW91c2Vtb3ZlYCBoYXBwZW5lZCByZWxhdGl2ZSB0byB0aGUgc2NyZWVuXG5cdCAgICAvLyB0byBkZXRlY3Qgc2Nyb2xsaW5nIHZlcnN1cyBtb3VzZW1vdmVcblx0ICAgIGlmIChtb3VzZVBvc1sneCddICE9PSBldmVudC5zY3JlZW5YIHx8IG1vdXNlUG9zWyd5J10gIT09IGV2ZW50LnNjcmVlblkpIHtcblx0ICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcblxuXHQgICAgICBtb3VzZVBvc1sneCddID0gZXZlbnQuc2NyZWVuWDtcblx0ICAgICAgbW91c2VQb3NbJ3knXSA9IGV2ZW50LnNjcmVlblk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpc1Njcm9sbGluZyA9IHRydWU7XG5cdCAgICB9XG5cblx0ICAgIC8vIG9ubHkgZXhlY3V0ZSBpZiB0aGUgdG91Y2ggYnVmZmVyIHRpbWVyIGlzbid0IHJ1bm5pbmdcblx0ICAgIC8vIG9yIHNjcm9sbGluZyBpc24ndCBoYXBwZW5pbmdcblx0ICAgIGlmICghaXNCdWZmZXJpbmcgJiYgIWlzU2Nyb2xsaW5nKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGlucHV0TWFwW2V2ZW50LnR5cGVdO1xuXHQgICAgICBpZiAodmFsdWUgPT09ICdwb2ludGVyJykgdmFsdWUgPSBwb2ludGVyVHlwZShldmVudCk7XG5cblx0ICAgICAgaWYgKGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlKSB7XG5cdCAgICAgICAgY3VycmVudEludGVudCA9IHZhbHVlO1xuXG5cdCAgICAgICAgZG9jLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0aW50ZW50JywgY3VycmVudEludGVudCk7XG5cblx0ICAgICAgICBmaXJlRnVuY3Rpb25zKCdpbnRlbnQnKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyBidWZmZXJzIHRvdWNoIGV2ZW50cyBiZWNhdXNlIHRoZXkgZnJlcXVlbnRseSBhbHNvIGZpcmUgbW91c2UgZXZlbnRzXG5cdCAgdmFyIHRvdWNoQnVmZmVyID0gZnVuY3Rpb24gdG91Y2hCdWZmZXIoZXZlbnQpIHtcblx0ICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcblx0ICAgICAgaXNCdWZmZXJpbmcgPSBmYWxzZTtcblxuXHQgICAgICAvLyBzZXQgdGhlIGN1cnJlbnQgaW5wdXRcblx0ICAgICAgdXBkYXRlSW5wdXQoZXZlbnQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaXNCdWZmZXJpbmcgPSB0cnVlO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICB2YXIgZmlyZUZ1bmN0aW9ucyA9IGZ1bmN0aW9uIGZpcmVGdW5jdGlvbnModHlwZSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZ1bmN0aW9uTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICBpZiAoZnVuY3Rpb25MaXN0W2ldLnR5cGUgPT09IHR5cGUpIHtcblx0ICAgICAgICBmdW5jdGlvbkxpc3RbaV0uZnVuY3Rpb24uY2FsbCh1bmRlZmluZWQsIGN1cnJlbnRJbnRlbnQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8qXG5cdCAgICogdXRpbGl0aWVzXG5cdCAgICovXG5cblx0ICB2YXIgcG9pbnRlclR5cGUgPSBmdW5jdGlvbiBwb2ludGVyVHlwZShldmVudCkge1xuXHQgICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgcmV0dXJuIHBvaW50ZXJNYXBbZXZlbnQucG9pbnRlclR5cGVdO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcblx0ICAgICAgcmV0dXJuIGV2ZW50LnBvaW50ZXJUeXBlID09PSAncGVuJyA/ICd0b3VjaCcgOiBldmVudC5wb2ludGVyVHlwZTtcblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgLy8gZGV0ZWN0IHZlcnNpb24gb2YgbW91c2Ugd2hlZWwgZXZlbnQgdG8gdXNlXG5cdCAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuXHQgIHZhciBkZXRlY3RXaGVlbCA9IGZ1bmN0aW9uIGRldGVjdFdoZWVsKCkge1xuXHQgICAgdmFyIHdoZWVsVHlwZSA9IHZvaWQgMDtcblxuXHQgICAgLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cdCAgICBpZiAoJ29ud2hlZWwnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSB7XG5cdCAgICAgIHdoZWVsVHlwZSA9ICd3aGVlbCc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBXZWJraXQgYW5kIElFIHN1cHBvcnQgYXQgbGVhc3QgXCJtb3VzZXdoZWVsXCJcblx0ICAgICAgLy8gb3IgYXNzdW1lIHRoYXQgcmVtYWluaW5nIGJyb3dzZXJzIGFyZSBvbGRlciBGaXJlZm94XG5cdCAgICAgIHdoZWVsVHlwZSA9IGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID8gJ21vdXNld2hlZWwnIDogJ0RPTU1vdXNlU2Nyb2xsJztcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHdoZWVsVHlwZTtcblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiBpbml0XG5cdCAgICovXG5cblx0ICAvLyBkb24ndCBzdGFydCBzY3JpcHQgdW5sZXNzIGJyb3dzZXIgY3V0cyB0aGUgbXVzdGFyZFxuXHQgIC8vIChhbHNvIHBhc3NlcyBpZiBwb2x5ZmlsbHMgYXJlIHVzZWQpXG5cdCAgaWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cgJiYgQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcblx0ICAgIHNldFVwKCk7XG5cdCAgfVxuXG5cdCAgLypcblx0ICAgKiBhcGlcblx0ICAgKi9cblxuXHQgIHJldHVybiB7XG5cdCAgICAvLyByZXR1cm5zIHN0cmluZzogdGhlIGN1cnJlbnQgaW5wdXQgdHlwZVxuXHQgICAgLy8gb3B0OiAnbG9vc2UnfCdzdHJpY3QnXG5cdCAgICAvLyAnc3RyaWN0JyAoZGVmYXVsdCk6IHJldHVybnMgdGhlIHNhbWUgdmFsdWUgYXMgdGhlIGBkYXRhLXdoYXRpbnB1dGAgYXR0cmlidXRlXG5cdCAgICAvLyAnbG9vc2UnOiBpbmNsdWRlcyBgZGF0YS13aGF0aW50ZW50YCB2YWx1ZSBpZiBpdCdzIG1vcmUgY3VycmVudCB0aGFuIGBkYXRhLXdoYXRpbnB1dGBcblx0ICAgIGFzazogZnVuY3Rpb24gYXNrKG9wdCkge1xuXHQgICAgICByZXR1cm4gb3B0ID09PSAnbG9vc2UnID8gY3VycmVudEludGVudCA6IGN1cnJlbnRJbnB1dDtcblx0ICAgIH0sXG5cblx0ICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcblx0ICAgIHR5cGVzOiBmdW5jdGlvbiB0eXBlcygpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0VHlwZXM7XG5cdCAgICB9LFxuXG5cdCAgICAvLyBvdmVyd3JpdGVzIGlnbm9yZWQga2V5cyB3aXRoIHByb3ZpZGVkIGFycmF5XG5cdCAgICBpZ25vcmVLZXlzOiBmdW5jdGlvbiBpZ25vcmVLZXlzKGFycikge1xuXHQgICAgICBpZ25vcmVNYXAgPSBhcnI7XG5cdCAgICB9LFxuXG5cdCAgICAvLyBhdHRhY2ggZnVuY3Rpb25zIHRvIGlucHV0IGFuZCBpbnRlbnQgXCJldmVudHNcIlxuXHQgICAgLy8gZnVuY3Q6IGZ1bmN0aW9uIHRvIGZpcmUgb24gY2hhbmdlXG5cdCAgICAvLyBldmVudFR5cGU6ICdpbnB1dCd8J2ludGVudCdcblx0ICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShmdW5jdCwgZXZlbnRUeXBlKSB7XG5cdCAgICAgIGZ1bmN0aW9uTGlzdC5wdXNoKHtcblx0ICAgICAgICBmdW5jdGlvbjogZnVuY3QsXG5cdCAgICAgICAgdHlwZTogZXZlbnRUeXBlXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH07XG5cdH0oKTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pXG59KTtcbjtcbi8vZ28gbnV0cyFcbi8vdG8gaGF2ZSBzb21ldGhpbmcgcGFyc2UgYmVmb3JlIGFueXRoaW5nIGVsc2UgYWRkIHRoZSBjb2RlIHRvIC4uL2xpYi9BQUEuanMgaXQgaXMgdGhlIGZpcnN0IGZpbGUgaW4gdGhlIGNvbmNhdGVuYXRpb24gcHJvY2Vzc1xuLy9pbml0aWFsaXplIGZvdW5kYXRpb25cbiQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcblxuXG4vL2RvYyByZWFkeVxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcblxuXG4vL2lzIHRoZXJlIGEgdGFsbHkgcmVjb3JkP1xuXG4vL2lmIHNvIHBvcHVsYXRlIGxpc3RcblxuLy9mdW5jdGlvbiB0byBnZXQgdGFsbHkgaWYgaXMgZXhzaXN0IGFuZCBhZCB0aGVtIHVwIHRvIGdldCB0aGUgdG90YWwgc28gZmFyXG52YXIgZ2V0VGFsbHkgPSBmdW5jdGlvbihhcnJheSl7XG4gIHZhciBob2xkID0gMDtcbiAgZm9yKHZhciBpID0gMDsgaTxhcnJheS5sZW5ndGg7IGkrKyl7XG4gICAgaG9sZCA9IGhvbGQgKyBwYXJzZUludChhcnJheVtpXSk7XG4gIH1cbiAgJCgnLnRhbGx5LWlucHV0JykuYXR0cigncGxhY2Vob2xkZXInLCBob2xkKTtcbiAgJCgnLnRhbGx5LWlucHV0JykuYmx1cigpLnZhbCgnJyk7XG4gIHJldHVybiBob2xkO1xufTtcblxuXG5sb2NhbGZvcmFnZS5rZXlzKCkudGhlbihmdW5jdGlvbihrZXlzKXtcbiAgaWYoa2V5cyA9PSAndGFsbHknKXtcbiAgICBsb2NhbGZvcmFnZS5nZXRJdGVtKCd0YWxseScpLnRoZW4oZnVuY3Rpb24odGFsbHkpe1xuICAgICAgZ2V0VGFsbHkodGFsbHkpO1xuICAgICAgY29uc29sZS5sb2codGFsbHkpO1xuICAgIH0pO1xuICB9XG59KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICBjb25zb2xlLmxvZyhlcnIpO1xufSk7XG5cblxuXG5cblxuXG5cblxuJCgnLnRhbGx5LWFkZCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuXG4gIGlmKCQoJy50YWxseS1pbnB1dCcpLnZhbCgpKXtcbiAgdmFyIGl2ID0gJCgnLnRhbGx5LWlucHV0JykudmFsKCk7XG4gIFxuICBsb2NhbGZvcmFnZS5rZXlzKCkudGhlbihmdW5jdGlvbihrZXlzKXtcbiAgICBpZihrZXlzID09ICd0YWxseScpe1xuICAgICAgY29uc29sZS5sb2coJ3RhbGx5IGV4c2lzdCcpO1xuICAgICAgbG9jYWxmb3JhZ2UuZ2V0SXRlbSgndGFsbHknKS50aGVuKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICBpdGVtLnB1c2goaXYpO1xuICAgICAgICBnZXRUYWxseShpdGVtKTtcbiAgICAgICAgbG9jYWxmb3JhZ2Uuc2V0SXRlbSgndGFsbHknLCBpdGVtKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gICAgfWVsc2V7XG4gICAgICBsb2NhbGZvcmFnZS5zZXRJdGVtKCd0YWxseScsIFtpdl0pLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgIGdldFRhbGx5KHZhbHVlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RhbGx5IGRpZCBub3QgZXhzaXN0Jyk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgY29uc29sZS5sb2coJ3RhbGx5LWlucHV0IHdhcyBlbXB0eScpO1xuICB9XG5cbn0pO1xuXG5cblxuJCgnLnRhbGx5LWNsZWFyLWxpc3QnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgbG9jYWxmb3JhZ2UuY2xlYXIoKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgY29uc29sZS5sb2coJ2RiIGNsZWFyJyk7XG4gICAgJCgnLnRhbGx5LWlucHV0JykuYmx1cigpLnZhbCgnJykuYXR0cigncGxhY2Vob2xkZXInLCAnMCcpO1xuICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gIH0pO1xufSk7XG4gIFxuICBcbiAgXG4gIFxuICBcbiQoJy50YWxseS1sYXN0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gIHN3YWwoe1xuICAgIHRpdGxlOiAncmVtb3ZlIGxhc3QgZW50cnk/JyxcbiAgICB0eXBlOiAnd2FybmluZycsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICBjb25maXJtQnV0dG9uVGV4dDogJ3llcyEnXG4gIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICBpZihyZXN1bHQudmFsdWUpe1xuICAgICAgbG9jYWxmb3JhZ2UuZ2V0SXRlbSgndGFsbHknKS50aGVuKGZ1bmN0aW9uKHRhbGx5KXtcbiAgICAgICAgdGFsbHkucG9wKCk7XG4gICAgICAgIGxvY2FsZm9yYWdlLnNldEl0ZW0oJ3RhbGx5JywgdGFsbHkpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICBsb2NhbGZvcmFnZS5nZXRJdGVtKCd0YWxseScpLnRoZW4oZnVuY3Rpb24odGFsbHkpe1xuICAgICAgICAgICAgZ2V0VGFsbHkodGFsbHkpO1xuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBcbn0pOyBcblxuXG5cblxuXG5cblxuXG5cblxufSk7IC8vRU5EIERvYy5yZWFkeVxuXG5cbi8vZG9jIGxvYWRcbiQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCl7XG5cbiAgXG4gIC8vaWYgbG9hZGVyIHBsYXkoKVxuICB2YXIgbG9hZGVkID0gZnVuY3Rpb24oKXtcbiAgICBpZigkKCcubG9hZGVyJykuaXMoJzp2aXNpYmxlJykpe1xuICAgICAgY29uc29sZS5sb2coJ2xvYWRlciBkZXRlY3RlZCA8YnIvPicpO1xuICAgICAgLy9sb2FkZXIgYW5pbWF0aW9uICBcbiAgICAgIHZhciBsb2FkZXJFeGl0ID0gbmV3IFRpbWVsaW5lTWF4KHtvbkNvbXBsZXRlOiBmdW5jdGlvbigpe2NvbnNvbGUubG9nKCdsb2FkZXIgcmVtb3ZlcmQgPGJyLz4nKX19KTtcbiAgICAgICAgICBsb2FkZXJFeGl0LmFkZChUd2Vlbk1heC50bygnLmxvYWRlcicsIC41LCB7YXV0b0FscGhhOjB9KSk7XG5cdCAgfVxuICB9O1xuXHRcbiAgbG9hZGVkKCk7XG59KTsgLy9FTkQgV0lOLmxvYWRcblxuIl19
